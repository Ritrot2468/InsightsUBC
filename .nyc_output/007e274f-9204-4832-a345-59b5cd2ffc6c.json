{"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\IInsightFacade.ts":{"path":"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\IInsightFacade.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":113}},"2":{"start":{"line":5,"column":0},"end":{"line":8,"column":89}},"3":{"start":{"line":6,"column":4},"end":{"line":6,"column":48}},"4":{"start":{"line":7,"column":4},"end":{"line":7,"column":42}},"5":{"start":{"line":11,"column":8},"end":{"line":11,"column":23}},"6":{"start":{"line":12,"column":8},"end":{"line":12,"column":52}},"7":{"start":{"line":15,"column":0},"end":{"line":15,"column":36}},"8":{"start":{"line":18,"column":8},"end":{"line":18,"column":23}},"9":{"start":{"line":19,"column":8},"end":{"line":19,"column":53}},"10":{"start":{"line":22,"column":0},"end":{"line":22,"column":38}},"11":{"start":{"line":25,"column":8},"end":{"line":25,"column":23}},"12":{"start":{"line":26,"column":8},"end":{"line":26,"column":59}},"13":{"start":{"line":29,"column":0},"end":{"line":29,"column":50}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":1},"end":{"line":5,"column":2}},"loc":{"start":{"line":5,"column":31},"end":{"line":8,"column":1}},"line":5},"1":{"name":"(anonymous_1)","decl":{"start":{"line":10,"column":4},"end":{"line":10,"column":5}},"loc":{"start":{"line":10,"column":25},"end":{"line":13,"column":5}},"line":10},"2":{"name":"(anonymous_2)","decl":{"start":{"line":17,"column":4},"end":{"line":17,"column":5}},"loc":{"start":{"line":17,"column":25},"end":{"line":20,"column":5}},"line":17},"3":{"name":"(anonymous_3)","decl":{"start":{"line":24,"column":4},"end":{"line":24,"column":5}},"loc":{"start":{"line":24,"column":25},"end":{"line":27,"column":5}},"line":24}},"branchMap":{"0":{"loc":{"start":{"line":8,"column":24},"end":{"line":8,"column":87}},"type":"binary-expr","locations":[{"start":{"line":8,"column":24},"end":{"line":8,"column":50}},{"start":{"line":8,"column":55},"end":{"line":8,"column":86}}],"line":8}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":87,"6":87,"7":1,"8":12,"9":12,"10":1,"11":3,"12":3,"13":1},"f":{"0":1,"1":87,"2":12,"3":3},"b":{"0":[1,1]},"inputSourceMap":{"version":3,"file":"C:/Users/oreak/IdeaProjects/project_team059/src/controller/IInsightFacade.ts","sources":["C:/Users/oreak/IdeaProjects/project_team059/src/controller/IInsightFacade.ts"],"names":[],"mappings":";;;AAMA,IAAY,kBAGX;AAHD,WAAY,kBAAkB;IAC7B,2CAAqB,CAAA;IACrB,qCAAe,CAAA;AAChB,CAAC,EAHW,kBAAkB,GAAlB,0BAAkB,KAAlB,0BAAkB,QAG7B;AAUD,MAAa,YAAa,SAAQ,KAAK;IACtC,YAAY,OAAgB;QAC3B,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;IAC7C,CAAC;CACD;AALD,oCAKC;AAED,MAAa,aAAc,SAAQ,KAAK;IACvC,YAAY,OAAgB;QAC3B,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;IAC9C,CAAC;CACD;AALD,sCAKC;AAED,MAAa,mBAAoB,SAAQ,KAAK;IAC7C,YAAY,OAAgB;QAC3B,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,mBAAmB,CAAC,CAAC;IACpD,CAAC;CACD;AALD,kDAKC","sourcesContent":["/*\n * This is the primary high-level API for the project. In this folder there should be:\n * A class called InsightFacade, this should be in a file called InsightFacade.ts.\n * You should not change this interface at all or the test suite will not work.\n */\n\nexport enum InsightDatasetKind {\n\tSections = \"sections\",\n\tRooms = \"rooms\",\n}\n\nexport interface InsightDataset {\n\tid: string;\n\tkind: InsightDatasetKind;\n\tnumRows: number;\n}\n\nexport type InsightResult = Record<string, string | number>;\n\nexport class InsightError extends Error {\n\tconstructor(message?: string) {\n\t\tsuper(message);\n\t\tError.captureStackTrace(this, InsightError);\n\t}\n}\n\nexport class NotFoundError extends Error {\n\tconstructor(message?: string) {\n\t\tsuper(message);\n\t\tError.captureStackTrace(this, NotFoundError);\n\t}\n}\n\nexport class ResultTooLargeError extends Error {\n\tconstructor(message?: string) {\n\t\tsuper(message);\n\t\tError.captureStackTrace(this, ResultTooLargeError);\n\t}\n}\n\nexport interface IInsightFacade {\n\t/**\n\t * Add a dataset to insightUBC.\n\t *\n\t * @param id  The id of the dataset being added. Follows the format /^[^_]+$/\n\t * @param content  The base64 content of the dataset. This content should be in the form of a serialized zip file.\n\t * @param kind  The kind of the dataset\n\t *\n\t * @return Promise <string[]>\n\t *\n\t * The promise should fulfill on a successful add, reject for any failures.\n\t * The promise should fulfill with a string array,\n\t * containing the ids of all currently added datasets upon a successful add.\n\t * The promise should reject with an InsightError describing the error.\n\t *\n\t * An id is invalid if it contains an underscore, or is only whitespace characters.\n\t * If id is the same as the id of an already added dataset, the dataset should be rejected and not saved.\n\t *\n\t * After receiving the dataset, it should be processed into a data structure of\n\t * your design. The processed data structure should be persisted to disk; your\n\t * system should be able to load this persisted value into memory for answering\n\t * queries.\n\t *\n\t * Ultimately, a dataset must be added or loaded from disk before queries can\n\t * be successfully answered.\n\t */\n\taddDataset(id: string, content: string, kind: InsightDatasetKind): Promise<string[]>;\n\n\t/**\n\t * Remove a dataset from insightUBC.\n\t *\n\t * @param id  The id of the dataset to remove. Follows the format /^[^_]+$/\n\t *\n\t * @return Promise <string>\n\t *\n\t * The promise should fulfill upon a successful removal, reject on any error.\n\t * Attempting to remove a dataset that hasn't been added yet counts as an error.\n\t *\n\t * An id is invalid if it contains an underscore, or is only whitespace characters.\n\t *\n\t * The promise should fulfill the id of the dataset that was removed.\n\t * The promise should reject with a NotFoundError (if a valid id was not yet added)\n\t * or an InsightError (invalid id or any other source of failure) describing the error.\n\t *\n\t * This will delete both disk and memory caches for the dataset for the id meaning\n\t * that subsequent queries for that id should fail unless a new addDataset happens first.\n\t */\n\tremoveDataset(id: string): Promise<string>;\n\n\t/**\n\t * Perform a query on insightUBC.\n\t *\n\t * @param query  The query to be performed.\n\t *\n\t * If a query is incorrectly formatted, references a dataset not added (in memory or on disk),\n\t * or references multiple datasets, it should be rejected.\n\t *\n\t * @return Promise <InsightResult[]>\n\t *\n\t * The promise should fulfill with an array of results.\n\t * The promise should reject with a ResultTooLargeError (if the query returns too many results)\n\t * or an InsightError (for any other source of failure) describing the error.\n\t */\n\tperformQuery(query: unknown): Promise<InsightResult[]>;\n\n\t/**\n\t * List all currently added datasets, their types, and number of rows.\n\t *\n\t * @return Promise <InsightDataset[]>\n\t * The promise should fulfill an array of currently added InsightDatasets, and will only fulfill.\n\t */\n\tlistDatasets(): Promise<InsightDataset[]>;\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"186ddd2fc7343cd12beec612c136f070d466131b","contentHash":"a045d6d31dd997dd4f77a7f25da641624640ff1720c7fdd25a55b002d5bb632c"},"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\InsightFacade.ts":{"path":"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\InsightFacade.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":25},"end":{"line":6,"column":52}},"4":{"start":{"line":7,"column":19},"end":{"line":7,"column":55}},"5":{"start":{"line":8,"column":33},"end":{"line":8,"column":85}},"6":{"start":{"line":9,"column":22},"end":{"line":9,"column":63}},"7":{"start":{"line":10,"column":28},"end":{"line":10,"column":84}},"8":{"start":{"line":11,"column":28},"end":{"line":11,"column":84}},"9":{"start":{"line":12,"column":25},"end":{"line":12,"column":75}},"10":{"start":{"line":13,"column":25},"end":{"line":13,"column":75}},"11":{"start":{"line":14,"column":28},"end":{"line":14,"column":84}},"12":{"start":{"line":26,"column":8},"end":{"line":26,"column":42}},"13":{"start":{"line":27,"column":8},"end":{"line":27,"column":39}},"14":{"start":{"line":28,"column":8},"end":{"line":28,"column":77}},"15":{"start":{"line":29,"column":8},"end":{"line":29,"column":67}},"16":{"start":{"line":30,"column":8},"end":{"line":30,"column":63}},"17":{"start":{"line":31,"column":8},"end":{"line":31,"column":63}},"18":{"start":{"line":32,"column":8},"end":{"line":32,"column":61}},"19":{"start":{"line":33,"column":8},"end":{"line":33,"column":61}},"20":{"start":{"line":34,"column":8},"end":{"line":34,"column":63}},"21":{"start":{"line":37,"column":8},"end":{"line":53,"column":9}},"22":{"start":{"line":38,"column":12},"end":{"line":38,"column":70}},"23":{"start":{"line":39,"column":12},"end":{"line":39,"column":117}},"24":{"start":{"line":40,"column":12},"end":{"line":46,"column":13}},"25":{"start":{"line":41,"column":16},"end":{"line":41,"column":95}},"26":{"start":{"line":44,"column":16},"end":{"line":44,"column":97}},"27":{"start":{"line":45,"column":16},"end":{"line":45,"column":60}},"28":{"start":{"line":49,"column":12},"end":{"line":51,"column":13}},"29":{"start":{"line":50,"column":16},"end":{"line":50,"column":26}},"30":{"start":{"line":52,"column":12},"end":{"line":52,"column":92}},"31":{"start":{"line":56,"column":8},"end":{"line":79,"column":9}},"32":{"start":{"line":57,"column":12},"end":{"line":57,"column":70}},"33":{"start":{"line":58,"column":32},"end":{"line":58,"column":46}},"34":{"start":{"line":59,"column":12},"end":{"line":61,"column":13}},"35":{"start":{"line":60,"column":16},"end":{"line":60,"column":93}},"36":{"start":{"line":62,"column":12},"end":{"line":67,"column":13}},"37":{"start":{"line":63,"column":16},"end":{"line":63,"column":49}},"38":{"start":{"line":66,"column":16},"end":{"line":66,"column":46}},"39":{"start":{"line":68,"column":12},"end":{"line":68,"column":60}},"40":{"start":{"line":69,"column":12},"end":{"line":69,"column":22}},"41":{"start":{"line":72,"column":12},"end":{"line":74,"column":13}},"42":{"start":{"line":73,"column":16},"end":{"line":73,"column":60}},"43":{"start":{"line":75,"column":12},"end":{"line":77,"column":13}},"44":{"start":{"line":76,"column":16},"end":{"line":76,"column":70}},"45":{"start":{"line":78,"column":12},"end":{"line":78,"column":99}},"46":{"start":{"line":82,"column":21},"end":{"line":82,"column":23}},"47":{"start":{"line":83,"column":8},"end":{"line":101,"column":9}},"48":{"start":{"line":84,"column":28},"end":{"line":84,"column":70}},"49":{"start":{"line":85,"column":30},"end":{"line":85,"column":97}},"50":{"start":{"line":86,"column":12},"end":{"line":91,"column":13}},"51":{"start":{"line":87,"column":29},"end":{"line":87,"column":46}},"52":{"start":{"line":88,"column":29},"end":{"line":88,"column":44}},"53":{"start":{"line":89,"column":16},"end":{"line":89,"column":113}},"54":{"start":{"line":90,"column":16},"end":{"line":90,"column":105}},"55":{"start":{"line":92,"column":12},"end":{"line":92,"column":48}},"56":{"start":{"line":95,"column":12},"end":{"line":100,"column":13}},"57":{"start":{"line":96,"column":16},"end":{"line":96,"column":26}},"58":{"start":{"line":99,"column":16},"end":{"line":99,"column":77}},"59":{"start":{"line":102,"column":8},"end":{"line":102,"column":22}},"60":{"start":{"line":105,"column":24},"end":{"line":105,"column":66}},"61":{"start":{"line":106,"column":8},"end":{"line":106,"column":66}},"62":{"start":{"line":109,"column":0},"end":{"line":109,"column":32}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":25,"column":4},"end":{"line":25,"column":5}},"loc":{"start":{"line":25,"column":18},"end":{"line":35,"column":5}},"line":25},"2":{"name":"(anonymous_2)","decl":{"start":{"line":36,"column":4},"end":{"line":36,"column":5}},"loc":{"start":{"line":36,"column":40},"end":{"line":54,"column":5}},"line":36},"3":{"name":"(anonymous_3)","decl":{"start":{"line":55,"column":4},"end":{"line":55,"column":5}},"loc":{"start":{"line":55,"column":28},"end":{"line":80,"column":5}},"line":55},"4":{"name":"(anonymous_4)","decl":{"start":{"line":81,"column":4},"end":{"line":81,"column":5}},"loc":{"start":{"line":81,"column":30},"end":{"line":103,"column":5}},"line":81},"5":{"name":"(anonymous_5)","decl":{"start":{"line":104,"column":4},"end":{"line":104,"column":5}},"loc":{"start":{"line":104,"column":25},"end":{"line":107,"column":5}},"line":104}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":40,"column":12},"end":{"line":46,"column":13}},"type":"if","locations":[{"start":{"line":40,"column":12},"end":{"line":46,"column":13}},{"start":{"line":40,"column":12},"end":{"line":46,"column":13}}],"line":40},"4":{"loc":{"start":{"line":49,"column":12},"end":{"line":51,"column":13}},"type":"if","locations":[{"start":{"line":49,"column":12},"end":{"line":51,"column":13}},{"start":{"line":49,"column":12},"end":{"line":51,"column":13}}],"line":49},"5":{"loc":{"start":{"line":59,"column":12},"end":{"line":61,"column":13}},"type":"if","locations":[{"start":{"line":59,"column":12},"end":{"line":61,"column":13}},{"start":{"line":59,"column":12},"end":{"line":61,"column":13}}],"line":59},"6":{"loc":{"start":{"line":62,"column":12},"end":{"line":67,"column":13}},"type":"if","locations":[{"start":{"line":62,"column":12},"end":{"line":67,"column":13}},{"start":{"line":62,"column":12},"end":{"line":67,"column":13}}],"line":62},"7":{"loc":{"start":{"line":72,"column":12},"end":{"line":74,"column":13}},"type":"if","locations":[{"start":{"line":72,"column":12},"end":{"line":74,"column":13}},{"start":{"line":72,"column":12},"end":{"line":74,"column":13}}],"line":72},"8":{"loc":{"start":{"line":75,"column":12},"end":{"line":77,"column":13}},"type":"if","locations":[{"start":{"line":75,"column":12},"end":{"line":77,"column":13}},{"start":{"line":75,"column":12},"end":{"line":77,"column":13}}],"line":75},"9":{"loc":{"start":{"line":86,"column":12},"end":{"line":91,"column":13}},"type":"if","locations":[{"start":{"line":86,"column":12},"end":{"line":91,"column":13}},{"start":{"line":86,"column":12},"end":{"line":91,"column":13}}],"line":86},"10":{"loc":{"start":{"line":95,"column":12},"end":{"line":100,"column":13}},"type":"if","locations":[{"start":{"line":95,"column":12},"end":{"line":100,"column":13}},{"start":{"line":95,"column":12},"end":{"line":100,"column":13}}],"line":95},"11":{"loc":{"start":{"line":95,"column":16},"end":{"line":95,"column":115}},"type":"binary-expr","locations":[{"start":{"line":95,"column":16},"end":{"line":95,"column":60}},{"start":{"line":95,"column":64},"end":{"line":95,"column":115}}],"line":95}},"s":{"0":1,"1":8,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":71,"13":71,"14":71,"15":71,"16":71,"17":71,"18":71,"19":71,"20":71,"21":83,"22":83,"23":74,"24":68,"25":41,"26":27,"27":21,"28":21,"29":19,"30":2,"31":21,"32":21,"33":18,"34":18,"35":6,"36":12,"37":5,"38":7,"39":12,"40":12,"41":9,"42":3,"43":6,"44":6,"45":0,"46":87,"47":87,"48":87,"49":87,"50":87,"51":0,"52":0,"53":0,"54":0,"55":87,"56":49,"57":49,"58":0,"59":38,"60":25,"61":25,"62":1},"f":{"0":8,"1":71,"2":83,"3":21,"4":87,"5":25},"b":{"0":[1,1,1],"1":[7,1],"2":[8,8],"3":[41,27],"4":[19,2],"5":[6,12],"6":[5,7],"7":[3,6],"8":[6,0],"9":[0,87],"10":[49,0],"11":[49,3]},"inputSourceMap":{"version":3,"file":"C:/Users/oreak/IdeaProjects/project_team059/src/controller/InsightFacade.ts","sources":["C:/Users/oreak/IdeaProjects/project_team059/src/controller/InsightFacade.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n\tIInsightFacade,\n\tInsightDataset,\n\tInsightDatasetKind,\n\tInsightError,\n\tInsightResult,\n\tNotFoundError,\n\tResultTooLargeError,\n} from \"./IInsightFacade\";\nimport fs from \"fs-extra\";\nimport DatasetValidatorHelper from \"./DatasetValidatorHelper\";\nimport QueryEngine from \"./QueryEngine\";\nimport SectionDiskReader from \"./sections/SectionDiskReader\";\nimport SectionDiskWriter from \"./sections/SectionDiskWriter\";\nimport Section from \"./sections/Section\";\nimport RoomDiskReader from \"./rooms/RoomDiskReader\";\nimport RoomDiskWriter from \"./rooms/RoomDiskWriter\";\nimport Room from \"./rooms/Room\";\nimport AddSectionDataset from \"./sections/addSectionDataset\";\n\n/**\n * This is the main programmatic entry point for the project.\n * Method documentation is in IInsightFacade\n *\n */\nexport default class InsightFacade implements IInsightFacade {\n\t// tracks all sections added from a dataset using their associated id as the key\n\tpublic sectionsDatabase: Map<string, Section[]>;\n\tpublic roomsDatabase: Map<string, Room[]>;\n\n\t// service classes\n\tprivate datasetValidatorHelper: DatasetValidatorHelper;\n\tprivate qe: QueryEngine;\n\tprivate secDiskReader: SectionDiskReader;\n\tprivate secDiskWriter: SectionDiskWriter;\n\tprivate roomDiskReader: RoomDiskReader;\n\tprivate roomDiskWriter: RoomDiskWriter;\n\tprivate sectionHelper: AddSectionDataset;\n\n\tconstructor() {\n\t\t//Log.info(\"InsightFacadeImpl::init()\");\n\t\tthis.sectionsDatabase = new Map<string, []>();\n\t\tthis.roomsDatabase = new Map<string, Room[]>();\n\t\tthis.datasetValidatorHelper = new DatasetValidatorHelper();\n\t\tthis.qe = new QueryEngine(this.sectionsDatabase);\n\t\tthis.secDiskReader = new SectionDiskReader();\n\t\tthis.secDiskWriter = new SectionDiskWriter();\n\t\tthis.roomDiskReader = new RoomDiskReader();\n\t\tthis.roomDiskWriter = new RoomDiskWriter();\n\n\t\tthis.sectionHelper = new AddSectionDataset();\n\t\t// initialize dictionary for the fields\n\t}\n\tpublic async addDataset(id: string, content: string, kind: InsightDatasetKind): Promise<string[]> {\n\t\ttry {\n\t\t\tawait this.datasetValidatorHelper.validateIdStructure(id);\n\t\t\tawait this.datasetValidatorHelper.validateSectionAddition(id, this.sectionsDatabase, this.roomsDatabase);\n\n\t\t\tif (kind === InsightDatasetKind.Sections) {\n\t\t\t\treturn this.sectionHelper.addCourses(id, this.sectionsDatabase, content, kind);\n\t\t\t} else {\n\t\t\t\tawait this.roomDiskWriter.logRoomsDatasetOnDisk(content, id, this.roomsDatabase);\n\t\t\t\treturn fs.readdir(\"./data\");\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tif (err instanceof InsightError) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\tthrow new InsightError(`An unexpected error occurred: ${err}`);\n\t\t}\n\t}\n\n\tpublic async removeDataset(id: string): Promise<string> {\n\t\ttry {\n\t\t\tawait this.datasetValidatorHelper.validateIdStructure(id);\n\t\t\tconst datasetPath = `./data/${id}`;\n\t\t\tif (!(await fs.pathExists(datasetPath))) {\n\t\t\t\tthrow new NotFoundError(`Dataset with id ${id} not found.`);\n\t\t\t}\n\n\t\t\tif (this.sectionsDatabase.get(id)) {\n\t\t\t\tthis.sectionsDatabase.delete(id);\n\t\t\t} else {\n\t\t\t\tthis.roomsDatabase.delete(id);\n\t\t\t}\n\n\t\t\tawait fs.remove(`./data/${id}`);\n\n\t\t\t// return id name of set currently removed\n\t\t\treturn id;\n\t\t} catch (err) {\n\t\t\tif (err instanceof InsightError) {\n\t\t\t\tthrow new InsightError(\"\");\n\t\t\t}\n\n\t\t\tif (err instanceof NotFoundError) {\n\t\t\t\tthrow new NotFoundError(\"Not found\");\n\t\t\t}\n\t\t\t// Handle unexpected errors\n\t\t\tthrow new InsightError(\"An unexpected error occurred ${err.message}\");\n\t\t}\n\t}\n\n\tpublic async performQuery(query: unknown): Promise<InsightResult[]> {\n\t\tlet result: InsightResult[] = [];\n\t\ttry {\n\t\t\tconst currIDs = await fs.readdir(\"./data\");\n\t\t\tconst idRecords = await this.datasetValidatorHelper.separateRoomAndCourseIDs(currIDs);\n\n\t\t\tif (this.sectionsDatabase.size + this.roomsDatabase.size !== currIDs.length) {\n\t\t\t\tconst cIDs = idRecords.courses;\n\t\t\t\tconst rIDs = idRecords.rooms;\n\n\t\t\t\tthis.sectionsDatabase = await this.secDiskReader.mapMissingSections(cIDs, this.sectionsDatabase);\n\t\t\t\tthis.roomsDatabase = await this.roomDiskReader.mapMissingRooms(rIDs, this.roomsDatabase);\n\t\t\t}\n\n\t\t\tresult = await this.qe.query(query);\n\t\t} catch (err) {\n\t\t\tif (err instanceof InsightError || err instanceof ResultTooLargeError) {\n\t\t\t\tthrow err;\n\t\t\t} else {\n\t\t\t\tthrow new InsightError(\"Unexpected error.\");\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic async listDatasets(): Promise<InsightDataset[]> {\n\t\t// reads the list of dataset ids already on disk\n\n\t\tconst currIDs = await fs.readdir(\"./data\");\n\n\t\t// reads their content info on disk and parses into InsightDataset[](works for rooms as well)\n\t\treturn this.secDiskReader.logInsightKindFromDisk(currIDs);\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"09f4fd51dd1c3b3134996a9f0f5a2aa1b0572faa","contentHash":"adee8e48b527e3d4d2c0f4081467f4acbe3ad1a48325406e470aa7c28285a45f"},"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\DatasetValidatorHelper.ts":{"path":"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\DatasetValidatorHelper.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":25},"end":{"line":6,"column":52}},"4":{"start":{"line":7,"column":19},"end":{"line":7,"column":55}},"5":{"start":{"line":10,"column":8},"end":{"line":12,"column":9}},"6":{"start":{"line":11,"column":12},"end":{"line":11,"column":76}},"7":{"start":{"line":13,"column":28},"end":{"line":13,"column":37}},"8":{"start":{"line":14,"column":8},"end":{"line":16,"column":9}},"9":{"start":{"line":15,"column":12},"end":{"line":15,"column":66}},"10":{"start":{"line":19,"column":8},"end":{"line":21,"column":9}},"11":{"start":{"line":20,"column":12},"end":{"line":20,"column":93}},"12":{"start":{"line":24,"column":23},"end":{"line":24,"column":38}},"13":{"start":{"line":25,"column":26},"end":{"line":25,"column":28}},"14":{"start":{"line":26,"column":24},"end":{"line":26,"column":26}},"15":{"start":{"line":27,"column":8},"end":{"line":41,"column":11}},"16":{"start":{"line":28,"column":31},"end":{"line":28,"column":53}},"17":{"start":{"line":29,"column":12},"end":{"line":40,"column":15}},"18":{"start":{"line":31,"column":16},"end":{"line":36,"column":17}},"19":{"start":{"line":32,"column":20},"end":{"line":32,"column":39}},"20":{"start":{"line":35,"column":20},"end":{"line":35,"column":37}},"21":{"start":{"line":39,"column":16},"end":{"line":39,"column":26}},"22":{"start":{"line":42,"column":8},"end":{"line":42,"column":54}},"23":{"start":{"line":45,"column":0},"end":{"line":45,"column":41}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":9,"column":4},"end":{"line":9,"column":5}},"loc":{"start":{"line":9,"column":34},"end":{"line":17,"column":5}},"line":9},"2":{"name":"(anonymous_2)","decl":{"start":{"line":18,"column":4},"end":{"line":18,"column":5}},"loc":{"start":{"line":18,"column":71},"end":{"line":22,"column":5}},"line":18},"3":{"name":"(anonymous_3)","decl":{"start":{"line":23,"column":4},"end":{"line":23,"column":5}},"loc":{"start":{"line":23,"column":43},"end":{"line":43,"column":5}},"line":23},"4":{"name":"(anonymous_4)","decl":{"start":{"line":27,"column":23},"end":{"line":27,"column":24}},"loc":{"start":{"line":27,"column":31},"end":{"line":41,"column":9}},"line":27},"5":{"name":"(anonymous_5)","decl":{"start":{"line":30,"column":22},"end":{"line":30,"column":23}},"loc":{"start":{"line":30,"column":38},"end":{"line":37,"column":13}},"line":30},"6":{"name":"(anonymous_6)","decl":{"start":{"line":38,"column":23},"end":{"line":38,"column":24}},"loc":{"start":{"line":38,"column":32},"end":{"line":40,"column":13}},"line":38}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":10,"column":8},"end":{"line":12,"column":9}},"type":"if","locations":[{"start":{"line":10,"column":8},"end":{"line":12,"column":9}},{"start":{"line":10,"column":8},"end":{"line":12,"column":9}}],"line":10},"4":{"loc":{"start":{"line":10,"column":12},"end":{"line":10,"column":54}},"type":"binary-expr","locations":[{"start":{"line":10,"column":12},"end":{"line":10,"column":28}},{"start":{"line":10,"column":32},"end":{"line":10,"column":54}}],"line":10},"5":{"loc":{"start":{"line":14,"column":8},"end":{"line":16,"column":9}},"type":"if","locations":[{"start":{"line":14,"column":8},"end":{"line":16,"column":9}},{"start":{"line":14,"column":8},"end":{"line":16,"column":9}}],"line":14},"6":{"loc":{"start":{"line":19,"column":8},"end":{"line":21,"column":9}},"type":"if","locations":[{"start":{"line":19,"column":8},"end":{"line":21,"column":9}},{"start":{"line":19,"column":8},"end":{"line":21,"column":9}}],"line":19},"7":{"loc":{"start":{"line":19,"column":12},"end":{"line":19,"column":118}},"type":"binary-expr","locations":[{"start":{"line":19,"column":12},"end":{"line":19,"column":36}},{"start":{"line":19,"column":40},"end":{"line":19,"column":61}},{"start":{"line":19,"column":66},"end":{"line":19,"column":117}}],"line":19},"8":{"loc":{"start":{"line":31,"column":16},"end":{"line":36,"column":17}},"type":"if","locations":[{"start":{"line":31,"column":16},"end":{"line":36,"column":17}},{"start":{"line":31,"column":16},"end":{"line":36,"column":17}}],"line":31}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":145,"6":12,"7":133,"8":133,"9":0,"10":74,"11":6,"12":87,"13":87,"14":87,"15":87,"16":87,"17":87,"18":87,"19":87,"20":0,"21":0,"22":87,"23":1},"f":{"0":1,"1":145,"2":74,"3":87,"4":87,"5":87,"6":0},"b":{"0":[1,1,1],"1":[0,1],"2":[1,1],"3":[12,133],"4":[145,138],"5":[0,133],"6":[6,68],"7":[74,72,70],"8":[87,0]},"inputSourceMap":{"version":3,"file":"C:/Users/oreak/IdeaProjects/project_team059/src/controller/DatasetValidatorHelper.ts","sources":["C:/Users/oreak/IdeaProjects/project_team059/src/controller/DatasetValidatorHelper.ts"],"names":[],"mappings":";;;;;AAAA,qDAAgD;AAChD,wDAA0B;AAI1B,MAAqB,sBAAsB;IAInC,KAAK,CAAC,mBAAmB,CAAC,EAAU;QAG1C,IAAI,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,MAAM,KAAK,CAAC,EAAE;YAC/C,MAAM,IAAI,6BAAY,CAAC,sBAAsB,CAAC,CAAC;SAC/C;QAGD,MAAM,WAAW,GAAG,SAAS,CAAC;QAC9B,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE;YAC1B,MAAM,IAAI,6BAAY,CAAC,YAAY,CAAC,CAAC;SACrC;IACF,CAAC;IAEM,KAAK,CAAC,uBAAuB,CACnC,EAAU,EACV,gBAAwC,EACxC,aAAkC;QAElC,IAAI,gBAAgB,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,aAAa,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,kBAAE,CAAC,UAAU,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC,EAAE;YAC/F,MAAM,IAAI,6BAAY,CAAC,mBAAmB,EAAE,kBAAkB,CAAC,CAAC;SAChE;IACF,CAAC;IAEM,KAAK,CAAC,wBAAwB,CAAC,MAAgB;QACrD,MAAM,MAAM,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,CAAC;QAC/B,MAAM,SAAS,GAAa,EAAE,CAAC;QAC/B,MAAM,OAAO,GAAa,EAAE,CAAC;QAC7B,MAAM,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,EAAE;YACrB,MAAM,UAAU,GAAG,UAAU,EAAE,UAAU,CAAC;YAE1C,kBAAE,CAAC,UAAU,CAAC,UAAU,CAAC;iBACvB,IAAI,CAAC,CAAC,UAAU,EAAE,EAAE;gBACpB,IAAI,UAAU,EAAE;oBACf,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;iBACnB;qBAAM;oBACN,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;iBACjB;YACF,CAAC,CAAC;iBACD,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;gBACd,MAAM,GAAG,CAAC;YACX,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC;IAC/C,CAAC;CACD;AAlDD,yCAkDC","sourcesContent":["import { InsightError } from \"./IInsightFacade\";\nimport fs from \"fs-extra\";\nimport Section from \"./sections/Section\";\nimport Room from \"./rooms/Room\";\n\nexport default class DatasetValidatorHelper {\n\t// checks if a dataset id is valid to be added\n\n\t// checks if a dataset id is valid to be removed\n\tpublic async validateIdStructure(id: string): Promise<void> {\n\t\t// Validate ID follows proper format\n\n\t\tif (id.includes(\"_\") || id.trim().length === 0) {\n\t\t\tthrow new InsightError(\"Invalid ID structure\");\n\t\t}\n\n\t\t// Validate content based on its kind\n\t\tconst base64Regex = /^[^_]+$/;\n\t\tif (!base64Regex.test(id)) {\n\t\t\tthrow new InsightError(\"Invalid id\");\n\t\t}\n\t}\n\n\tpublic async validateSectionAddition(\n\t\tid: string,\n\t\tsectionsDatabase: Map<string, Section[]>,\n\t\troomsDatabase: Map<string, Room[]>\n\t): Promise<void> {\n\t\tif (sectionsDatabase.has(id) || roomsDatabase.has(id) || (await fs.pathExists(`./data/${id}`))) {\n\t\t\tthrow new InsightError(`Dataset with id ${id} already exists.`);\n\t\t}\n\t}\n\n\tpublic async separateRoomAndCourseIDs(allIds: string[]): Promise<{ courses: string[]; rooms: string[] }> {\n\t\tconst setIds = new Set(allIds);\n\t\tconst courseIDs: string[] = [];\n\t\tconst roomIDs: string[] = [];\n\t\tsetIds.forEach((id) => {\n\t\t\tconst coursePath = `./data/${id}/courses`;\n\n\t\t\tfs.pathExists(coursePath)\n\t\t\t\t.then((pathExists) => {\n\t\t\t\t\tif (pathExists) {\n\t\t\t\t\t\tcourseIDs.push(id);\n\t\t\t\t\t} else {\n\t\t\t\t\t\troomIDs.push(id);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch((err) => {\n\t\t\t\t\tthrow err;\n\t\t\t\t});\n\t\t});\n\n\t\treturn { courses: courseIDs, rooms: roomIDs };\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"44023188cbc63054fd759e6360ba26dc16e083d6","contentHash":"6319edc71d7d9a338c4c2861ee6df613ef6d6fcf7f16931ae4abd488ab5b5c88"},"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\QueryEngine.ts":{"path":"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\QueryEngine.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":25},"end":{"line":6,"column":52}},"4":{"start":{"line":7,"column":28},"end":{"line":7,"column":58}},"5":{"start":{"line":8,"column":21},"end":{"line":8,"column":61}},"6":{"start":{"line":16,"column":8},"end":{"line":16,"column":35}},"7":{"start":{"line":17,"column":8},"end":{"line":17,"column":49}},"8":{"start":{"line":18,"column":8},"end":{"line":18,"column":30}},"9":{"start":{"line":19,"column":8},"end":{"line":19,"column":48}},"10":{"start":{"line":20,"column":8},"end":{"line":20,"column":77}},"11":{"start":{"line":23,"column":31},"end":{"line":23,"column":33}},"12":{"start":{"line":24,"column":21},"end":{"line":24,"column":23}},"13":{"start":{"line":25,"column":8},"end":{"line":25,"column":35}},"14":{"start":{"line":26,"column":25},"end":{"line":26,"column":38}},"15":{"start":{"line":27,"column":8},"end":{"line":51,"column":9}},"16":{"start":{"line":28,"column":30},"end":{"line":28,"column":51}},"17":{"start":{"line":29,"column":32},"end":{"line":29,"column":99}},"18":{"start":{"line":29,"column":58},"end":{"line":29,"column":98}},"19":{"start":{"line":30,"column":12},"end":{"line":32,"column":13}},"20":{"start":{"line":31,"column":16},"end":{"line":31,"column":80}},"21":{"start":{"line":33,"column":12},"end":{"line":38,"column":13}},"22":{"start":{"line":34,"column":16},"end":{"line":34,"column":74}},"23":{"start":{"line":37,"column":16},"end":{"line":37,"column":79}},"24":{"start":{"line":39,"column":12},"end":{"line":44,"column":13}},"25":{"start":{"line":40,"column":16},"end":{"line":40,"column":86}},"26":{"start":{"line":43,"column":16},"end":{"line":43,"column":81}},"27":{"start":{"line":47,"column":12},"end":{"line":49,"column":13}},"28":{"start":{"line":48,"column":16},"end":{"line":48,"column":26}},"29":{"start":{"line":50,"column":12},"end":{"line":50,"column":73}},"30":{"start":{"line":52,"column":8},"end":{"line":52,"column":22}},"31":{"start":{"line":55,"column":31},"end":{"line":55,"column":33}},"32":{"start":{"line":56,"column":8},"end":{"line":56,"column":30}},"33":{"start":{"line":57,"column":8},"end":{"line":74,"column":9}},"34":{"start":{"line":58,"column":12},"end":{"line":67,"column":13}},"35":{"start":{"line":59,"column":16},"end":{"line":59,"column":37}},"36":{"start":{"line":60,"column":16},"end":{"line":60,"column":40}},"37":{"start":{"line":62,"column":17},"end":{"line":67,"column":13}},"38":{"start":{"line":63,"column":16},"end":{"line":63,"column":88}},"39":{"start":{"line":66,"column":16},"end":{"line":66,"column":107}},"40":{"start":{"line":70,"column":12},"end":{"line":72,"column":13}},"41":{"start":{"line":71,"column":16},"end":{"line":71,"column":26}},"42":{"start":{"line":73,"column":12},"end":{"line":73,"column":73}},"43":{"start":{"line":75,"column":8},"end":{"line":75,"column":32}},"44":{"start":{"line":79,"column":8},"end":{"line":112,"column":9}},"45":{"start":{"line":80,"column":12},"end":{"line":105,"column":13}},"46":{"start":{"line":81,"column":16},"end":{"line":81,"column":68}},"47":{"start":{"line":83,"column":17},"end":{"line":105,"column":13}},"48":{"start":{"line":84,"column":16},"end":{"line":84,"column":43}},"49":{"start":{"line":85,"column":37},"end":{"line":85,"column":61}},"50":{"start":{"line":86,"column":16},"end":{"line":101,"column":17}},"51":{"start":{"line":88,"column":24},"end":{"line":90,"column":25}},"52":{"start":{"line":89,"column":28},"end":{"line":89,"column":97}},"53":{"start":{"line":91,"column":24},"end":{"line":91,"column":69}},"54":{"start":{"line":92,"column":24},"end":{"line":92,"column":30}},"55":{"start":{"line":94,"column":24},"end":{"line":94,"column":66}},"56":{"start":{"line":95,"column":24},"end":{"line":95,"column":30}},"57":{"start":{"line":97,"column":24},"end":{"line":99,"column":25}},"58":{"start":{"line":98,"column":28},"end":{"line":98,"column":104}},"59":{"start":{"line":100,"column":24},"end":{"line":100,"column":77}},"60":{"start":{"line":104,"column":16},"end":{"line":104,"column":89}},"61":{"start":{"line":108,"column":12},"end":{"line":110,"column":13}},"62":{"start":{"line":109,"column":16},"end":{"line":109,"column":26}},"63":{"start":{"line":111,"column":12},"end":{"line":111,"column":73}},"64":{"start":{"line":113,"column":8},"end":{"line":113,"column":23}},"65":{"start":{"line":116,"column":8},"end":{"line":132,"column":9}},"66":{"start":{"line":117,"column":38},"end":{"line":117,"column":70}},"67":{"start":{"line":118,"column":36},"end":{"line":118,"column":84}},"68":{"start":{"line":119,"column":12},"end":{"line":125,"column":13}},"69":{"start":{"line":120,"column":16},"end":{"line":120,"column":87}},"70":{"start":{"line":123,"column":46},"end":{"line":123,"column":78}},"71":{"start":{"line":124,"column":16},"end":{"line":124,"column":96}},"72":{"start":{"line":124,"column":59},"end":{"line":124,"column":94}},"73":{"start":{"line":128,"column":12},"end":{"line":130,"column":13}},"74":{"start":{"line":129,"column":16},"end":{"line":129,"column":26}},"75":{"start":{"line":131,"column":12},"end":{"line":131,"column":73}},"76":{"start":{"line":135,"column":8},"end":{"line":162,"column":9}},"77":{"start":{"line":136,"column":12},"end":{"line":138,"column":13}},"78":{"start":{"line":137,"column":16},"end":{"line":137,"column":77}},"79":{"start":{"line":139,"column":29},"end":{"line":139,"column":47}},"80":{"start":{"line":140,"column":27},"end":{"line":140,"column":45}},"81":{"start":{"line":141,"column":12},"end":{"line":141,"column":41}},"82":{"start":{"line":142,"column":36},"end":{"line":142,"column":71}},"83":{"start":{"line":143,"column":12},"end":{"line":155,"column":13}},"84":{"start":{"line":144,"column":16},"end":{"line":144,"column":87}},"85":{"start":{"line":147,"column":16},"end":{"line":154,"column":17}},"86":{"start":{"line":148,"column":39},"end":{"line":148,"column":73}},"87":{"start":{"line":149,"column":39},"end":{"line":149,"column":66}},"88":{"start":{"line":150,"column":20},"end":{"line":150,"column":118}},"89":{"start":{"line":150,"column":63},"end":{"line":150,"column":116}},"90":{"start":{"line":153,"column":20},"end":{"line":153,"column":76}},"91":{"start":{"line":158,"column":12},"end":{"line":160,"column":13}},"92":{"start":{"line":159,"column":16},"end":{"line":159,"column":26}},"93":{"start":{"line":161,"column":12},"end":{"line":161,"column":73}},"94":{"start":{"line":165,"column":8},"end":{"line":188,"column":9}},"95":{"start":{"line":166,"column":29},"end":{"line":166,"column":47}},"96":{"start":{"line":167,"column":27},"end":{"line":167,"column":45}},"97":{"start":{"line":168,"column":12},"end":{"line":168,"column":41}},"98":{"start":{"line":169,"column":36},"end":{"line":169,"column":71}},"99":{"start":{"line":170,"column":12},"end":{"line":181,"column":13}},"100":{"start":{"line":171,"column":16},"end":{"line":171,"column":87}},"101":{"start":{"line":174,"column":16},"end":{"line":180,"column":17}},"102":{"start":{"line":175,"column":39},"end":{"line":175,"column":73}},"103":{"start":{"line":176,"column":20},"end":{"line":176,"column":97}},"104":{"start":{"line":179,"column":20},"end":{"line":179,"column":76}},"105":{"start":{"line":184,"column":12},"end":{"line":186,"column":13}},"106":{"start":{"line":185,"column":16},"end":{"line":185,"column":26}},"107":{"start":{"line":187,"column":12},"end":{"line":187,"column":73}},"108":{"start":{"line":191,"column":8},"end":{"line":208,"column":9}},"109":{"start":{"line":192,"column":36},"end":{"line":192,"column":67}},"110":{"start":{"line":193,"column":12},"end":{"line":201,"column":13}},"111":{"start":{"line":194,"column":16},"end":{"line":194,"column":55}},"112":{"start":{"line":196,"column":17},"end":{"line":201,"column":13}},"113":{"start":{"line":197,"column":16},"end":{"line":197,"column":54}},"114":{"start":{"line":200,"column":16},"end":{"line":200,"column":84}},"115":{"start":{"line":204,"column":12},"end":{"line":206,"column":13}},"116":{"start":{"line":205,"column":16},"end":{"line":205,"column":26}},"117":{"start":{"line":207,"column":12},"end":{"line":207,"column":73}},"118":{"start":{"line":211,"column":32},"end":{"line":211,"column":34}},"119":{"start":{"line":212,"column":8},"end":{"line":214,"column":9}},"120":{"start":{"line":213,"column":12},"end":{"line":213,"column":85}},"121":{"start":{"line":215,"column":8},"end":{"line":223,"column":9}},"122":{"start":{"line":216,"column":12},"end":{"line":222,"column":13}},"123":{"start":{"line":217,"column":28},"end":{"line":217,"column":89}},"124":{"start":{"line":218,"column":16},"end":{"line":218,"column":42}},"125":{"start":{"line":221,"column":16},"end":{"line":221,"column":74}},"126":{"start":{"line":224,"column":24},"end":{"line":224,"column":58}},"127":{"start":{"line":225,"column":8},"end":{"line":227,"column":9}},"128":{"start":{"line":226,"column":12},"end":{"line":226,"column":30}},"129":{"start":{"line":228,"column":27},"end":{"line":228,"column":59}},"130":{"start":{"line":229,"column":8},"end":{"line":229,"column":26}},"131":{"start":{"line":232,"column":23},"end":{"line":232,"column":25}},"132":{"start":{"line":233,"column":8},"end":{"line":235,"column":9}},"133":{"start":{"line":234,"column":12},"end":{"line":234,"column":84}},"134":{"start":{"line":236,"column":8},"end":{"line":243,"column":9}},"135":{"start":{"line":237,"column":12},"end":{"line":242,"column":13}},"136":{"start":{"line":238,"column":16},"end":{"line":238,"column":91}},"137":{"start":{"line":241,"column":16},"end":{"line":241,"column":74}},"138":{"start":{"line":244,"column":31},"end":{"line":244,"column":56}},"139":{"start":{"line":245,"column":8},"end":{"line":245,"column":37}},"140":{"start":{"line":248,"column":8},"end":{"line":250,"column":9}},"141":{"start":{"line":249,"column":12},"end":{"line":249,"column":95}},"142":{"start":{"line":251,"column":8},"end":{"line":256,"column":9}},"143":{"start":{"line":252,"column":12},"end":{"line":252,"column":45}},"144":{"start":{"line":254,"column":13},"end":{"line":256,"column":9}},"145":{"start":{"line":255,"column":12},"end":{"line":255,"column":91}},"146":{"start":{"line":257,"column":8},"end":{"line":257,"column":20}},"147":{"start":{"line":260,"column":22},"end":{"line":260,"column":24}},"148":{"start":{"line":261,"column":22},"end":{"line":261,"column":24}},"149":{"start":{"line":262,"column":23},"end":{"line":262,"column":25}},"150":{"start":{"line":263,"column":8},"end":{"line":285,"column":9}},"151":{"start":{"line":264,"column":32},"end":{"line":264,"column":52}},"152":{"start":{"line":265,"column":32},"end":{"line":265,"column":99}},"153":{"start":{"line":265,"column":60},"end":{"line":265,"column":98}},"154":{"start":{"line":266,"column":12},"end":{"line":268,"column":13}},"155":{"start":{"line":267,"column":16},"end":{"line":267,"column":83}},"156":{"start":{"line":269,"column":12},"end":{"line":274,"column":13}},"157":{"start":{"line":270,"column":16},"end":{"line":270,"column":62}},"158":{"start":{"line":273,"column":16},"end":{"line":273,"column":81}},"159":{"start":{"line":275,"column":12},"end":{"line":277,"column":13}},"160":{"start":{"line":276,"column":16},"end":{"line":276,"column":92}},"161":{"start":{"line":278,"column":12},"end":{"line":278,"column":76}},"162":{"start":{"line":281,"column":12},"end":{"line":283,"column":13}},"163":{"start":{"line":282,"column":16},"end":{"line":282,"column":26}},"164":{"start":{"line":284,"column":12},"end":{"line":284,"column":73}},"165":{"start":{"line":286,"column":8},"end":{"line":286,"column":23}},"166":{"start":{"line":289,"column":22},"end":{"line":289,"column":24}},"167":{"start":{"line":290,"column":8},"end":{"line":298,"column":9}},"168":{"start":{"line":291,"column":36},"end":{"line":291,"column":84}},"169":{"start":{"line":292,"column":12},"end":{"line":297,"column":13}},"170":{"start":{"line":293,"column":16},"end":{"line":293,"column":87}},"171":{"start":{"line":296,"column":16},"end":{"line":296,"column":43}},"172":{"start":{"line":299,"column":8},"end":{"line":299,"column":39}},"173":{"start":{"line":300,"column":8},"end":{"line":300,"column":68}},"174":{"start":{"line":301,"column":8},"end":{"line":301,"column":66}},"175":{"start":{"line":302,"column":8},"end":{"line":302,"column":23}},"176":{"start":{"line":305,"column":24},"end":{"line":305,"column":55}},"177":{"start":{"line":306,"column":24},"end":{"line":306,"column":26}},"178":{"start":{"line":307,"column":8},"end":{"line":317,"column":9}},"179":{"start":{"line":308,"column":27},"end":{"line":308,"column":38}},"180":{"start":{"line":309,"column":26},"end":{"line":309,"column":46}},"181":{"start":{"line":310,"column":12},"end":{"line":310,"column":53}},"182":{"start":{"line":311,"column":12},"end":{"line":316,"column":13}},"183":{"start":{"line":312,"column":16},"end":{"line":312,"column":37}},"184":{"start":{"line":315,"column":16},"end":{"line":315,"column":92}},"185":{"start":{"line":318,"column":8},"end":{"line":318,"column":23}},"186":{"start":{"line":321,"column":0},"end":{"line":321,"column":30}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":15,"column":4},"end":{"line":15,"column":5}},"loc":{"start":{"line":15,"column":34},"end":{"line":21,"column":5}},"line":15},"2":{"name":"(anonymous_2)","decl":{"start":{"line":22,"column":4},"end":{"line":22,"column":5}},"loc":{"start":{"line":22,"column":23},"end":{"line":53,"column":5}},"line":22},"3":{"name":"(anonymous_3)","decl":{"start":{"line":29,"column":49},"end":{"line":29,"column":50}},"loc":{"start":{"line":29,"column":58},"end":{"line":29,"column":98}},"line":29},"4":{"name":"(anonymous_4)","decl":{"start":{"line":54,"column":4},"end":{"line":54,"column":5}},"loc":{"start":{"line":54,"column":29},"end":{"line":76,"column":5}},"line":54},"5":{"name":"(anonymous_5)","decl":{"start":{"line":77,"column":4},"end":{"line":77,"column":5}},"loc":{"start":{"line":77,"column":38},"end":{"line":114,"column":5}},"line":77},"6":{"name":"(anonymous_6)","decl":{"start":{"line":115,"column":4},"end":{"line":115,"column":5}},"loc":{"start":{"line":115,"column":40},"end":{"line":133,"column":5}},"line":115},"7":{"name":"(anonymous_7)","decl":{"start":{"line":124,"column":46},"end":{"line":124,"column":47}},"loc":{"start":{"line":124,"column":59},"end":{"line":124,"column":94}},"line":124},"8":{"name":"(anonymous_8)","decl":{"start":{"line":134,"column":4},"end":{"line":134,"column":5}},"loc":{"start":{"line":134,"column":41},"end":{"line":163,"column":5}},"line":134},"9":{"name":"(anonymous_9)","decl":{"start":{"line":150,"column":50},"end":{"line":150,"column":51}},"loc":{"start":{"line":150,"column":63},"end":{"line":150,"column":116}},"line":150},"10":{"name":"(anonymous_10)","decl":{"start":{"line":164,"column":4},"end":{"line":164,"column":5}},"loc":{"start":{"line":164,"column":49},"end":{"line":189,"column":5}},"line":164},"11":{"name":"(anonymous_11)","decl":{"start":{"line":190,"column":4},"end":{"line":190,"column":5}},"loc":{"start":{"line":190,"column":47},"end":{"line":209,"column":5}},"line":190},"12":{"name":"(anonymous_12)","decl":{"start":{"line":210,"column":4},"end":{"line":210,"column":5}},"loc":{"start":{"line":210,"column":27},"end":{"line":230,"column":5}},"line":210},"13":{"name":"(anonymous_13)","decl":{"start":{"line":231,"column":4},"end":{"line":231,"column":5}},"loc":{"start":{"line":231,"column":26},"end":{"line":246,"column":5}},"line":231},"14":{"name":"(anonymous_14)","decl":{"start":{"line":247,"column":4},"end":{"line":247,"column":5}},"loc":{"start":{"line":247,"column":28},"end":{"line":258,"column":5}},"line":247},"15":{"name":"(anonymous_15)","decl":{"start":{"line":259,"column":4},"end":{"line":259,"column":5}},"loc":{"start":{"line":259,"column":43},"end":{"line":287,"column":5}},"line":259},"16":{"name":"(anonymous_16)","decl":{"start":{"line":265,"column":51},"end":{"line":265,"column":52}},"loc":{"start":{"line":265,"column":60},"end":{"line":265,"column":98}},"line":265},"17":{"name":"(anonymous_17)","decl":{"start":{"line":288,"column":4},"end":{"line":288,"column":5}},"loc":{"start":{"line":288,"column":53},"end":{"line":303,"column":5}},"line":288},"18":{"name":"(anonymous_18)","decl":{"start":{"line":304,"column":4},"end":{"line":304,"column":5}},"loc":{"start":{"line":304,"column":25},"end":{"line":319,"column":5}},"line":304}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":30,"column":12},"end":{"line":32,"column":13}},"type":"if","locations":[{"start":{"line":30,"column":12},"end":{"line":32,"column":13}},{"start":{"line":30,"column":12},"end":{"line":32,"column":13}}],"line":30},"4":{"loc":{"start":{"line":33,"column":12},"end":{"line":38,"column":13}},"type":"if","locations":[{"start":{"line":33,"column":12},"end":{"line":38,"column":13}},{"start":{"line":33,"column":12},"end":{"line":38,"column":13}}],"line":33},"5":{"loc":{"start":{"line":39,"column":12},"end":{"line":44,"column":13}},"type":"if","locations":[{"start":{"line":39,"column":12},"end":{"line":44,"column":13}},{"start":{"line":39,"column":12},"end":{"line":44,"column":13}}],"line":39},"6":{"loc":{"start":{"line":47,"column":12},"end":{"line":49,"column":13}},"type":"if","locations":[{"start":{"line":47,"column":12},"end":{"line":49,"column":13}},{"start":{"line":47,"column":12},"end":{"line":49,"column":13}}],"line":47},"7":{"loc":{"start":{"line":47,"column":16},"end":{"line":47,"column":115}},"type":"binary-expr","locations":[{"start":{"line":47,"column":16},"end":{"line":47,"column":60}},{"start":{"line":47,"column":64},"end":{"line":47,"column":115}}],"line":47},"8":{"loc":{"start":{"line":58,"column":12},"end":{"line":67,"column":13}},"type":"if","locations":[{"start":{"line":58,"column":12},"end":{"line":67,"column":13}},{"start":{"line":58,"column":12},"end":{"line":67,"column":13}}],"line":58},"9":{"loc":{"start":{"line":62,"column":17},"end":{"line":67,"column":13}},"type":"if","locations":[{"start":{"line":62,"column":17},"end":{"line":67,"column":13}},{"start":{"line":62,"column":17},"end":{"line":67,"column":13}}],"line":62},"10":{"loc":{"start":{"line":70,"column":12},"end":{"line":72,"column":13}},"type":"if","locations":[{"start":{"line":70,"column":12},"end":{"line":72,"column":13}},{"start":{"line":70,"column":12},"end":{"line":72,"column":13}}],"line":70},"11":{"loc":{"start":{"line":70,"column":16},"end":{"line":70,"column":115}},"type":"binary-expr","locations":[{"start":{"line":70,"column":16},"end":{"line":70,"column":60}},{"start":{"line":70,"column":64},"end":{"line":70,"column":115}}],"line":70},"12":{"loc":{"start":{"line":80,"column":12},"end":{"line":105,"column":13}},"type":"if","locations":[{"start":{"line":80,"column":12},"end":{"line":105,"column":13}},{"start":{"line":80,"column":12},"end":{"line":105,"column":13}}],"line":80},"13":{"loc":{"start":{"line":83,"column":17},"end":{"line":105,"column":13}},"type":"if","locations":[{"start":{"line":83,"column":17},"end":{"line":105,"column":13}},{"start":{"line":83,"column":17},"end":{"line":105,"column":13}}],"line":83},"14":{"loc":{"start":{"line":83,"column":21},"end":{"line":83,"column":99}},"type":"binary-expr","locations":[{"start":{"line":83,"column":21},"end":{"line":83,"column":60}},{"start":{"line":83,"column":64},"end":{"line":83,"column":79}},{"start":{"line":83,"column":83},"end":{"line":83,"column":99}}],"line":83},"15":{"loc":{"start":{"line":86,"column":16},"end":{"line":101,"column":17}},"type":"switch","locations":[{"start":{"line":87,"column":20},"end":{"line":92,"column":30}},{"start":{"line":93,"column":20},"end":{"line":95,"column":30}},{"start":{"line":96,"column":20},"end":{"line":100,"column":77}}],"line":86},"16":{"loc":{"start":{"line":88,"column":24},"end":{"line":90,"column":25}},"type":"if","locations":[{"start":{"line":88,"column":24},"end":{"line":90,"column":25}},{"start":{"line":88,"column":24},"end":{"line":90,"column":25}}],"line":88},"17":{"loc":{"start":{"line":97,"column":24},"end":{"line":99,"column":25}},"type":"if","locations":[{"start":{"line":97,"column":24},"end":{"line":99,"column":25}},{"start":{"line":97,"column":24},"end":{"line":99,"column":25}}],"line":97},"18":{"loc":{"start":{"line":108,"column":12},"end":{"line":110,"column":13}},"type":"if","locations":[{"start":{"line":108,"column":12},"end":{"line":110,"column":13}},{"start":{"line":108,"column":12},"end":{"line":110,"column":13}}],"line":108},"19":{"loc":{"start":{"line":108,"column":16},"end":{"line":108,"column":115}},"type":"binary-expr","locations":[{"start":{"line":108,"column":16},"end":{"line":108,"column":60}},{"start":{"line":108,"column":64},"end":{"line":108,"column":115}}],"line":108},"20":{"loc":{"start":{"line":119,"column":12},"end":{"line":125,"column":13}},"type":"if","locations":[{"start":{"line":119,"column":12},"end":{"line":125,"column":13}},{"start":{"line":119,"column":12},"end":{"line":125,"column":13}}],"line":119},"21":{"loc":{"start":{"line":128,"column":12},"end":{"line":130,"column":13}},"type":"if","locations":[{"start":{"line":128,"column":12},"end":{"line":130,"column":13}},{"start":{"line":128,"column":12},"end":{"line":130,"column":13}}],"line":128},"22":{"loc":{"start":{"line":128,"column":16},"end":{"line":128,"column":115}},"type":"binary-expr","locations":[{"start":{"line":128,"column":16},"end":{"line":128,"column":60}},{"start":{"line":128,"column":64},"end":{"line":128,"column":115}}],"line":128},"23":{"loc":{"start":{"line":136,"column":12},"end":{"line":138,"column":13}},"type":"if","locations":[{"start":{"line":136,"column":12},"end":{"line":138,"column":13}},{"start":{"line":136,"column":12},"end":{"line":138,"column":13}}],"line":136},"24":{"loc":{"start":{"line":143,"column":12},"end":{"line":155,"column":13}},"type":"if","locations":[{"start":{"line":143,"column":12},"end":{"line":155,"column":13}},{"start":{"line":143,"column":12},"end":{"line":155,"column":13}}],"line":143},"25":{"loc":{"start":{"line":147,"column":16},"end":{"line":154,"column":17}},"type":"if","locations":[{"start":{"line":147,"column":16},"end":{"line":154,"column":17}},{"start":{"line":147,"column":16},"end":{"line":154,"column":17}}],"line":147},"26":{"loc":{"start":{"line":158,"column":12},"end":{"line":160,"column":13}},"type":"if","locations":[{"start":{"line":158,"column":12},"end":{"line":160,"column":13}},{"start":{"line":158,"column":12},"end":{"line":160,"column":13}}],"line":158},"27":{"loc":{"start":{"line":158,"column":16},"end":{"line":158,"column":115}},"type":"binary-expr","locations":[{"start":{"line":158,"column":16},"end":{"line":158,"column":60}},{"start":{"line":158,"column":64},"end":{"line":158,"column":115}}],"line":158},"28":{"loc":{"start":{"line":170,"column":12},"end":{"line":181,"column":13}},"type":"if","locations":[{"start":{"line":170,"column":12},"end":{"line":181,"column":13}},{"start":{"line":170,"column":12},"end":{"line":181,"column":13}}],"line":170},"29":{"loc":{"start":{"line":174,"column":16},"end":{"line":180,"column":17}},"type":"if","locations":[{"start":{"line":174,"column":16},"end":{"line":180,"column":17}},{"start":{"line":174,"column":16},"end":{"line":180,"column":17}}],"line":174},"30":{"loc":{"start":{"line":184,"column":12},"end":{"line":186,"column":13}},"type":"if","locations":[{"start":{"line":184,"column":12},"end":{"line":186,"column":13}},{"start":{"line":184,"column":12},"end":{"line":186,"column":13}}],"line":184},"31":{"loc":{"start":{"line":184,"column":16},"end":{"line":184,"column":115}},"type":"binary-expr","locations":[{"start":{"line":184,"column":16},"end":{"line":184,"column":60}},{"start":{"line":184,"column":64},"end":{"line":184,"column":115}}],"line":184},"32":{"loc":{"start":{"line":193,"column":12},"end":{"line":201,"column":13}},"type":"if","locations":[{"start":{"line":193,"column":12},"end":{"line":201,"column":13}},{"start":{"line":193,"column":12},"end":{"line":201,"column":13}}],"line":193},"33":{"loc":{"start":{"line":196,"column":17},"end":{"line":201,"column":13}},"type":"if","locations":[{"start":{"line":196,"column":17},"end":{"line":201,"column":13}},{"start":{"line":196,"column":17},"end":{"line":201,"column":13}}],"line":196},"34":{"loc":{"start":{"line":204,"column":12},"end":{"line":206,"column":13}},"type":"if","locations":[{"start":{"line":204,"column":12},"end":{"line":206,"column":13}},{"start":{"line":204,"column":12},"end":{"line":206,"column":13}}],"line":204},"35":{"loc":{"start":{"line":204,"column":16},"end":{"line":204,"column":115}},"type":"binary-expr","locations":[{"start":{"line":204,"column":16},"end":{"line":204,"column":60}},{"start":{"line":204,"column":64},"end":{"line":204,"column":115}}],"line":204},"36":{"loc":{"start":{"line":212,"column":8},"end":{"line":214,"column":9}},"type":"if","locations":[{"start":{"line":212,"column":8},"end":{"line":214,"column":9}},{"start":{"line":212,"column":8},"end":{"line":214,"column":9}}],"line":212},"37":{"loc":{"start":{"line":216,"column":12},"end":{"line":222,"column":13}},"type":"if","locations":[{"start":{"line":216,"column":12},"end":{"line":222,"column":13}},{"start":{"line":216,"column":12},"end":{"line":222,"column":13}}],"line":216},"38":{"loc":{"start":{"line":216,"column":16},"end":{"line":216,"column":55}},"type":"binary-expr","locations":[{"start":{"line":216,"column":16},"end":{"line":216,"column":39}},{"start":{"line":216,"column":43},"end":{"line":216,"column":55}}],"line":216},"39":{"loc":{"start":{"line":225,"column":8},"end":{"line":227,"column":9}},"type":"if","locations":[{"start":{"line":225,"column":8},"end":{"line":227,"column":9}},{"start":{"line":225,"column":8},"end":{"line":227,"column":9}}],"line":225},"40":{"loc":{"start":{"line":233,"column":8},"end":{"line":235,"column":9}},"type":"if","locations":[{"start":{"line":233,"column":8},"end":{"line":235,"column":9}},{"start":{"line":233,"column":8},"end":{"line":235,"column":9}}],"line":233},"41":{"loc":{"start":{"line":237,"column":12},"end":{"line":242,"column":13}},"type":"if","locations":[{"start":{"line":237,"column":12},"end":{"line":242,"column":13}},{"start":{"line":237,"column":12},"end":{"line":242,"column":13}}],"line":237},"42":{"loc":{"start":{"line":237,"column":16},"end":{"line":237,"column":55}},"type":"binary-expr","locations":[{"start":{"line":237,"column":16},"end":{"line":237,"column":39}},{"start":{"line":237,"column":43},"end":{"line":237,"column":55}}],"line":237},"43":{"loc":{"start":{"line":248,"column":8},"end":{"line":250,"column":9}},"type":"if","locations":[{"start":{"line":248,"column":8},"end":{"line":250,"column":9}},{"start":{"line":248,"column":8},"end":{"line":250,"column":9}}],"line":248},"44":{"loc":{"start":{"line":251,"column":8},"end":{"line":256,"column":9}},"type":"if","locations":[{"start":{"line":251,"column":8},"end":{"line":256,"column":9}},{"start":{"line":251,"column":8},"end":{"line":256,"column":9}}],"line":251},"45":{"loc":{"start":{"line":254,"column":13},"end":{"line":256,"column":9}},"type":"if","locations":[{"start":{"line":254,"column":13},"end":{"line":256,"column":9}},{"start":{"line":254,"column":13},"end":{"line":256,"column":9}}],"line":254},"46":{"loc":{"start":{"line":266,"column":12},"end":{"line":268,"column":13}},"type":"if","locations":[{"start":{"line":266,"column":12},"end":{"line":268,"column":13}},{"start":{"line":266,"column":12},"end":{"line":268,"column":13}}],"line":266},"47":{"loc":{"start":{"line":269,"column":12},"end":{"line":274,"column":13}},"type":"if","locations":[{"start":{"line":269,"column":12},"end":{"line":274,"column":13}},{"start":{"line":269,"column":12},"end":{"line":274,"column":13}}],"line":269},"48":{"loc":{"start":{"line":275,"column":12},"end":{"line":277,"column":13}},"type":"if","locations":[{"start":{"line":275,"column":12},"end":{"line":277,"column":13}},{"start":{"line":275,"column":12},"end":{"line":277,"column":13}}],"line":275},"49":{"loc":{"start":{"line":281,"column":12},"end":{"line":283,"column":13}},"type":"if","locations":[{"start":{"line":281,"column":12},"end":{"line":283,"column":13}},{"start":{"line":281,"column":12},"end":{"line":283,"column":13}}],"line":281},"50":{"loc":{"start":{"line":281,"column":16},"end":{"line":281,"column":115}},"type":"binary-expr","locations":[{"start":{"line":281,"column":16},"end":{"line":281,"column":60}},{"start":{"line":281,"column":64},"end":{"line":281,"column":115}}],"line":281},"51":{"loc":{"start":{"line":290,"column":8},"end":{"line":298,"column":9}},"type":"if","locations":[{"start":{"line":290,"column":8},"end":{"line":298,"column":9}},{"start":{"line":290,"column":8},"end":{"line":298,"column":9}}],"line":290},"52":{"loc":{"start":{"line":292,"column":12},"end":{"line":297,"column":13}},"type":"if","locations":[{"start":{"line":292,"column":12},"end":{"line":297,"column":13}},{"start":{"line":292,"column":12},"end":{"line":297,"column":13}}],"line":292},"53":{"loc":{"start":{"line":311,"column":12},"end":{"line":316,"column":13}},"type":"if","locations":[{"start":{"line":311,"column":12},"end":{"line":316,"column":13}},{"start":{"line":311,"column":12},"end":{"line":316,"column":13}}],"line":311},"54":{"loc":{"start":{"line":311,"column":16},"end":{"line":311,"column":88}},"type":"binary-expr","locations":[{"start":{"line":311,"column":16},"end":{"line":311,"column":50}},{"start":{"line":311,"column":54},"end":{"line":311,"column":88}}],"line":311}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":71,"7":71,"8":71,"9":71,"10":71,"11":87,"12":87,"13":87,"14":87,"15":87,"16":87,"17":87,"18":167,"19":87,"20":3,"21":84,"22":81,"23":3,"24":48,"25":47,"26":1,"27":49,"28":49,"29":0,"30":38,"31":81,"32":81,"33":81,"34":81,"35":2,"36":2,"37":79,"38":2,"39":77,"40":33,"41":33,"42":0,"43":46,"44":208,"45":208,"46":62,"47":146,"48":141,"49":138,"50":137,"51":42,"52":1,"53":41,"54":41,"55":19,"56":19,"57":76,"58":2,"59":74,"60":5,"61":12,"62":11,"63":1,"64":196,"65":19,"66":19,"67":19,"68":19,"69":0,"70":19,"71":19,"72":1227628,"73":0,"74":0,"75":0,"76":41,"77":41,"78":0,"79":41,"80":41,"81":41,"82":35,"83":35,"84":0,"85":35,"86":32,"87":32,"88":30,"89":1938360,"90":3,"91":11,"92":11,"93":0,"94":74,"95":74,"96":74,"97":74,"98":65,"99":65,"100":0,"101":65,"102":63,"103":63,"104":2,"105":11,"106":11,"107":0,"108":62,"109":62,"110":61,"111":52,"112":9,"113":9,"114":0,"115":1,"116":1,"117":0,"118":52,"119":52,"120":2,"121":50,"122":101,"123":100,"124":100,"125":1,"126":49,"127":33,"128":2,"129":31,"130":31,"131":9,"132":9,"133":0,"134":9,"135":12,"136":12,"137":0,"138":9,"139":9,"140":252,"141":16,"142":236,"143":57,"144":179,"145":0,"146":236,"147":47,"148":47,"149":47,"150":47,"151":47,"152":47,"153":84,"154":47,"155":3,"156":44,"157":44,"158":0,"159":43,"160":35,"161":41,"162":9,"163":9,"164":0,"165":38,"166":41,"167":41,"168":1,"169":1,"170":0,"171":1,"172":41,"173":38,"174":38,"175":38,"176":44,"177":44,"178":44,"179":137,"180":137,"181":137,"182":136,"183":136,"184":0,"185":43,"186":1},"f":{"0":1,"1":71,"2":87,"3":167,"4":81,"5":208,"6":19,"7":1227628,"8":41,"9":1938360,"10":74,"11":62,"12":52,"13":9,"14":252,"15":47,"16":84,"17":41,"18":44},"b":{"0":[1,1,1],"1":[1,0],"2":[1,1],"3":[3,84],"4":[81,3],"5":[47,1],"6":[49,0],"7":[49,3],"8":[2,79],"9":[2,77],"10":[33,0],"11":[33,0],"12":[62,146],"13":[141,5],"14":[146,69,26],"15":[42,19,76],"16":[1,41],"17":[2,74],"18":[11,1],"19":[12,1],"20":[0,19],"21":[0,0],"22":[0,0],"23":[0,41],"24":[0,35],"25":[32,3],"26":[11,0],"27":[11,0],"28":[0,65],"29":[63,2],"30":[11,0],"31":[11,0],"32":[52,9],"33":[9,0],"34":[1,0],"35":[1,0],"36":[2,50],"37":[100,1],"38":[101,100],"39":[2,31],"40":[0,9],"41":[12,0],"42":[12,12],"43":[16,236],"44":[57,179],"45":[0,179],"46":[3,44],"47":[44,0],"48":[35,8],"49":[9,0],"50":[9,3],"51":[1,40],"52":[0,1],"53":[136,0],"54":[136,79]},"inputSourceMap":{"version":3,"file":"C:/Users/oreak/IdeaProjects/project_team059/src/controller/QueryEngine.ts","sources":["C:/Users/oreak/IdeaProjects/project_team059/src/controller/QueryEngine.ts"],"names":[],"mappings":"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","sourcesContent":["import { InsightError, InsightResult, ResultTooLargeError } from \"./IInsightFacade\";\nimport { QueryOrderHandler } from \"./QueryOrderHandler\";\nimport QueryUtils from \"./QueryUtils\";\nimport Section from \"./sections/Section\";\n\nexport default class QueryEngine {\n\tprivate queryingIDString: string;\n\tprivate sectionsDatabase: Map<string, Section[]>;\n\tprivate noFilter: boolean;\n\tprivate utils: QueryUtils;\n\tprivate QueryOrderHandler: QueryOrderHandler;\n\n\tconstructor(sectionsDatabase: Map<string, Section[]>) {\n\t\tthis.queryingIDString = \"\";\n\t\tthis.sectionsDatabase = sectionsDatabase;\n\t\tthis.noFilter = false;\n\t\tthis.utils = new QueryUtils();\n\t\tthis.QueryOrderHandler = new QueryOrderHandler();\n\t}\n\n\tpublic async query(query: unknown): Promise<InsightResult[]> {\n\t\t//console.log(\"QUERY method\");\n\t\tlet filteredSections: Section[] = [];\n\t\tlet result: InsightResult[] = [];\n\t\tthis.queryingIDString = \"\"; // restart on every query;\n\t\tconst queryObj = Object(query);\n\t\ttry {\n\t\t\tconst queryKeys = Object.keys(queryObj);\n\t\t\tconst invalidKeys = queryKeys.filter((key) => !this.utils.validQueryKeys.includes(key));\n\t\t\tif (invalidKeys.length > 0) {\n\t\t\t\tthrow new InsightError(\"Excess keys in query\");\n\t\t\t}\n\t\t\t// If WHERE key exists, filter all the sections, else throw InsightError\n\t\t\tif (\"WHERE\" in queryObj) {\n\t\t\t\tfilteredSections = await this.handleWHERE(queryObj.WHERE);\n\t\t\t} else {\n\t\t\t\tthrow new InsightError(\"Query missing WHERE\");\n\t\t\t}\n\n\t\t\t// If OPTIONS key exists, collect InsightResults, else throw InsightError\n\t\t\tif (\"OPTIONS\" in queryObj) {\n\t\t\t\tresult = await this.handleOPTIONS(queryObj.OPTIONS, filteredSections);\n\t\t\t} else {\n\t\t\t\tthrow new InsightError(\"Query missing OPTIONS\");\n\t\t\t}\n\t\t\t//console.log(\"End result\");\n\t\t\t//console.log(result);\n\t\t} catch (err) {\n\t\t\tif (err instanceof InsightError || err instanceof ResultTooLargeError) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\tthrow new InsightError(\"Unexpected error.\");\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate async handleWHERE(where: object): Promise<Section[]> {\n\t\tlet filteredSections: Section[] = [];\n\t\tthis.noFilter = false;\n\t\t//console.log(\"WHERE WORKING\");\n\t\ttry {\n\t\t\tif (Object.keys(where).length === 0) {\n\t\t\t\tthis.noFilter = true;\n\t\t\t\treturn filteredSections;\n\t\t\t} else if (Object.keys(where).length > 1) {\n\t\t\t\tthrow new InsightError(\"WHERE should only have 1 key\");\n\t\t\t} else {\n\t\t\t\tfilteredSections = await this.handleFilter(Object.keys(where)[0], Object.values(where)[0]);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tif (err instanceof InsightError || err instanceof ResultTooLargeError) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\tthrow new InsightError(\"Unexpected error.\");\n\t\t}\n\t\treturn filteredSections;\n\t}\n\n\tprivate async handleFilter(filter: string, value: unknown): Promise<Section[]> {\n\t\tlet promise: Promise<Section[]>;\n\t\ttry {\n\t\t\t//console.log(\"Filter running\");\n\t\t\t//console.log(filter);\n\t\t\tif (this.utils.logicComparator.includes(filter)) {\n\t\t\t\tpromise = this.handleLogicComparison(filter, value);\n\t\t\t} else if (this.utils.mComparator.includes(filter) || filter === \"IS\" || filter === \"NOT\") {\n\t\t\t\tthis.utils.isObject(value);\n\t\t\t\tconst [key, input] = Object.entries(value as Record<string, any>)[0];\n\t\t\t\tswitch (filter) {\n\t\t\t\t\tcase \"IS\":\n\t\t\t\t\t\tif (typeof input !== \"string\") {\n\t\t\t\t\t\t\tthrow new InsightError(`Invalid input type for IS`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpromise = this.handleSComparison(key, input);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"NOT\":\n\t\t\t\t\t\tpromise = this.handleNegation(key, input);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tif (typeof input !== \"number\") {\n\t\t\t\t\t\t\tthrow new InsightError(`Invalid input type for ${filter}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpromise = this.handleMComparison(filter, key, input);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow new InsightError(`Invalid filter key: ${filter}`);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tif (err instanceof InsightError || err instanceof ResultTooLargeError) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\tthrow new InsightError(\"Unexpected error.\");\n\t\t}\n\t\treturn promise;\n\t}\n\n\tprivate async handleNegation(filter: string, value: unknown): Promise<Section[]> {\n\t\ttry {\n\t\t\tconst nonNegatedResults = this.handleFilter(filter, value);\n\t\t\tconst datasetSections = this.sectionsDatabase.get(this.queryingIDString);\n\t\t\tif (datasetSections === undefined) {\n\t\t\t\t// should not be possible given current implementation of other methods for query\n\t\t\t\tthrow new InsightError(\"Can't find querying dataset\");\n\t\t\t} else {\n\t\t\t\t// use a set instead -> faster?\n\t\t\t\tconst resolvedNonNegatedSet = new Set(await nonNegatedResults);\n\n\t\t\t\t// Filter using the Set for faster lookups\n\t\t\t\treturn datasetSections.filter((section) => !resolvedNonNegatedSet.has(section));\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tif (err instanceof InsightError || err instanceof ResultTooLargeError) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\tthrow new InsightError(\"Unexpected error.\");\n\t\t}\n\t}\n\n\tprivate async handleSComparison(skey: string, input: string): Promise<Section[]> {\n\t\ttry {\n\t\t\tif (typeof input === \"number\") {\n\t\t\t\tthrow new InsightError(\"Invalid skey type\");\n\t\t\t}\n\t\t\t// split on underscore\n\t\t\tconst idstring = skey.split(\"_\")[0];\n\t\t\tconst sfield = skey.split(\"_\")[1];\n\n\t\t\t// check if database contains dataset with idstring\n\t\t\tthis.checkIDString(idstring);\n\n\t\t\t// query based on idstring\n\t\t\tconst datasetSections = this.sectionsDatabase.get(idstring);\n\t\t\tif (datasetSections === undefined) {\n\t\t\t\t// should not be possible\n\t\t\t\tthrow new InsightError(\"Can't find querying dataset\");\n\t\t\t} else {\n\t\t\t\tif (this.utils.sFields.includes(sfield)) {\n\t\t\t\t\tconst fieldIndex = this.utils.sFields.indexOf(sfield);\n\t\t\t\t\tconst inputRegex = this.utils.testRegex(input); // Use case-insensitive matching\n\t\t\t\t\treturn datasetSections.filter((section) => inputRegex.test(section.getSFieldByIndex(fieldIndex)));\n\t\t\t\t} else {\n\t\t\t\t\tthrow new InsightError(\"Invalid sKey\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tif (err instanceof InsightError || err instanceof ResultTooLargeError) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\tthrow new InsightError(\"Unexpected error.\");\n\t\t}\n\t}\n\n\tprivate async handleMComparison(filter: string, mkey: string, input: number): Promise<Section[]> {\n\t\t//console.log(\"HANDLING MCOMPARISON\");\n\t\t//console.log(\"mkey: \" + mkey);\n\t\t//console.log(\"input: \" + input);\n\t\ttry {\n\t\t\tconst idstring = mkey.split(\"_\")[0];\n\t\t\tconst mfield = mkey.split(\"_\")[1];\n\n\t\t\t// check if database contains dataset with idstring\n\t\t\tthis.checkIDString(idstring);\n\t\t\tconst datasetSections = this.sectionsDatabase.get(idstring);\n\t\t\tif (datasetSections === undefined) {\n\t\t\t\t// should not be possible\n\t\t\t\tthrow new InsightError(\"Can't find querying dataset\");\n\t\t\t} else {\n\t\t\t\tif (this.utils.mFields.includes(mfield)) {\n\t\t\t\t\tconst fieldIndex = this.utils.mFields.indexOf(mfield);\n\t\t\t\t\treturn this.utils.filterMCompare(datasetSections, filter, fieldIndex, input);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new InsightError(\"Invalid mKey\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tif (err instanceof InsightError || err instanceof ResultTooLargeError) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\tthrow new InsightError(\"Unexpected error.\");\n\t\t}\n\t}\n\n\tprivate async handleLogicComparison(filter: string, value: unknown): Promise<Section[]> {\n\t\ttry {\n\t\t\tconst comparisonArray: unknown[] = this.utils.coerceToArray(value);\n\t\t\tif (filter === \"AND\") {\n\t\t\t\treturn this.handleAND(comparisonArray);\n\t\t\t} else if (filter === \"OR\") {\n\t\t\t\treturn this.handleOR(comparisonArray);\n\t\t\t} else {\n\t\t\t\tthrow new InsightError(\"Invalid Logic Comparator\");\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tif (err instanceof InsightError || err instanceof ResultTooLargeError) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\tthrow new InsightError(\"Unexpected error.\");\n\t\t}\n\t}\n\n\tprivate async handleAND(value: unknown[]): Promise<Section[]> {\n\t\tconst andListPromises: Promise<Section[]>[] = [];\n\t\tif (value.length === 0) {\n\t\t\tthrow new InsightError(\"AND must be a non-empty array\");\n\t\t}\n\t\tfor (const obj of value) {\n\t\t\tif (typeof obj === \"object\" && obj !== null) {\n\t\t\t\tconst key: Promise<Section[]> = this.handleFilter(\n\t\t\t\t\tObject.keys(obj)[0] as string,\n\t\t\t\t\tObject.values(obj)[0] as unknown\n\t\t\t\t);\n\t\t\t\tandListPromises.push(key);\n\t\t\t} else {\n\t\t\t\tthrow new InsightError(\"Invalid Object\");\n\t\t\t}\n\t\t}\n\t\tconst andList = await Promise.all(andListPromises);\n\t\t/*console.log(andList.length);\n\t\tfor (const list of andList) {\n\t\t\tconsole.log(list.length);\n\t\t}*/\n\t\t// only one filter applied\n\t\tif (andList.length === 1) {\n\t\t\treturn andList[0];\n\t\t}\n\t\tconst mergedList = this.utils.mergeAndList(andList);\n\t\t//console.log((await mergedList).length);\n\t\treturn mergedList;\n\t}\n\n\tprivate async handleOR(value: unknown[]): Promise<Section[]> {\n\t\tconst orList: Promise<Section[]>[] = [];\n\t\tif (value.length === 0) {\n\t\t\tthrow new InsightError(\"OR must be a non-empty array\");\n\t\t}\n\n\t\tfor (const obj of value) {\n\t\t\tif (typeof obj === \"object\" && obj !== null) {\n\t\t\t\torList.push(this.handleFilter(Object.keys(obj)[0] as string, Object.values(obj)[0] as unknown));\n\t\t\t} else {\n\t\t\t\tthrow new InsightError(\"Invalid Object\");\n\t\t\t}\n\t\t}\n\t\tconst resolvedOrList = await Promise.all(orList);\n\t\treturn resolvedOrList.flat();\n\t}\n\n\t// check if an id string is already being referenced, if not, return true\n\tprivate checkIDString(idstring: string): boolean {\n\t\tif (!this.sectionsDatabase.has(idstring)) {\n\t\t\tthrow new InsightError(`Dataset with id: ${idstring} not added.`);\n\t\t}\n\t\t// check if a dataset has already been referenced if not set queryingIDString as idstring\n\t\tif (this.queryingIDString === \"\") {\n\t\t\tthis.queryingIDString = idstring;\n\t\t} else if (this.queryingIDString !== idstring) {\n\t\t\tthrow new InsightError(\"Cannot reference multiple datasets.\");\n\t\t}\n\t\treturn true;\n\t}\n\n\tprivate async handleOPTIONS(options: object, sections: Section[]): Promise<InsightResult[]> {\n\t\t//console.log(\"OPTIONS WORKING\");\n\t\tlet results: InsightResult[] = [];\n\t\tlet columns: string[] = [];\n\t\tlet orderKey = \"\";\n\t\ttry {\n\t\t\tconst optionsKeys = Object.keys(options);\n\t\t\tconst invalidKeys = optionsKeys.filter((key) => !this.utils.validOptions.includes(key));\n\t\t\tif (invalidKeys.length > 0) {\n\t\t\t\tthrow new InsightError(\"Invalid keys in OPTIONS\");\n\t\t\t}\n\n\t\t\tif (\"COLUMNS\" in options) {\n\t\t\t\tcolumns = this.handleCOLUMNS(options.COLUMNS);\n\t\t\t} else {\n\t\t\t\tthrow new InsightError(\"Query missing COLUMNS\");\n\t\t\t}\n\t\t\t//console.log(columns);\n\t\t\tif (\"ORDER\" in options) {\n\t\t\t\torderKey = await this.QueryOrderHandler.handleORDER(options.ORDER, columns);\n\t\t\t}\n\t\t\tresults = await this.completeQuery(sections, columns, orderKey);\n\t\t} catch (err) {\n\t\t\tif (err instanceof InsightError || err instanceof ResultTooLargeError) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\tthrow new InsightError(\"Unexpected error.\");\n\t\t}\n\t\treturn results;\n\t}\n\n\tprivate async completeQuery(sections: Section[], columns: string[], orderKey: string): Promise<InsightResult[]> {\n\t\tlet results: InsightResult[] = [];\n\t\t//console.log(\"COMPLETE QUERY WORKING\");\n\t\t// if no filters have been applied\n\t\tif (this.noFilter) {\n\t\t\tconst datasetSections = this.sectionsDatabase.get(this.queryingIDString);\n\t\t\tif (datasetSections === undefined) {\n\t\t\t\t// should not be possible given current implementation of other methods for query\n\t\t\t\tthrow new InsightError(\"Can't find querying dataset\");\n\t\t\t} else {\n\t\t\t\tsections = datasetSections;\n\t\t\t}\n\t\t}\n\t\tthis.utils.checkSize(sections);\n\t\tresults = await this.utils.selectCOLUMNS(sections, columns);\n\t\tresults = await this.utils.sortByOrder(results, orderKey);\n\t\treturn results;\n\t}\n\t// returns the columns as an array of strings (WORKING)\n\tprivate handleCOLUMNS(value: unknown): string[] {\n\t\tconst columns = this.utils.coerceToArray(value); // checks if is an array, if so, coerce to array type\n\t\tconst results: string[] = [];\n\t\tfor (const key of columns) {\n\t\t\tconst keyStr = String(key);\n\t\t\tconst field = keyStr.split(\"_\")[1];\n\t\t\tthis.checkIDString(keyStr.split(\"_\")[0]);\n\t\t\tif (this.utils.mFields.includes(field) || this.utils.sFields.includes(field)) {\n\t\t\t\tresults.push(keyStr);\n\t\t\t} else {\n\t\t\t\tthrow new InsightError(`Invalid key ${keyStr} in COLUMNS`);\n\t\t\t}\n\t\t}\n\t\treturn results;\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"57bc269b115a03601136639e80cdcb94d8082eee","contentHash":"29263173fa3cf5e33a19498a1940a07010e83835eed01aaafb2ef4c402936fb8"},"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\QueryOrderHandler.ts":{"path":"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\QueryOrderHandler.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":35}},"2":{"start":{"line":4,"column":25},"end":{"line":4,"column":52}},"3":{"start":{"line":7,"column":8},"end":{"line":18,"column":9}},"4":{"start":{"line":8,"column":12},"end":{"line":8,"column":74}},"5":{"start":{"line":11,"column":29},"end":{"line":11,"column":42}},"6":{"start":{"line":12,"column":12},"end":{"line":17,"column":13}},"7":{"start":{"line":13,"column":16},"end":{"line":13,"column":32}},"8":{"start":{"line":16,"column":16},"end":{"line":16,"column":88}},"9":{"start":{"line":21,"column":0},"end":{"line":21,"column":46}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":6,"column":4},"end":{"line":6,"column":5}},"loc":{"start":{"line":6,"column":38},"end":{"line":19,"column":5}},"line":6}},"branchMap":{"0":{"loc":{"start":{"line":7,"column":8},"end":{"line":18,"column":9}},"type":"if","locations":[{"start":{"line":7,"column":8},"end":{"line":18,"column":9}},{"start":{"line":7,"column":8},"end":{"line":18,"column":9}}],"line":7},"1":{"loc":{"start":{"line":12,"column":12},"end":{"line":17,"column":13}},"type":"if","locations":[{"start":{"line":12,"column":12},"end":{"line":17,"column":13}},{"start":{"line":12,"column":12},"end":{"line":17,"column":13}}],"line":12}},"s":{"0":1,"1":1,"2":1,"3":35,"4":1,"5":34,"6":34,"7":33,"8":1,"9":1},"f":{"0":35},"b":{"0":[1,34],"1":[33,1]},"inputSourceMap":{"version":3,"file":"C:/Users/oreak/IdeaProjects/project_team059/src/controller/QueryOrderHandler.ts","sources":["C:/Users/oreak/IdeaProjects/project_team059/src/controller/QueryOrderHandler.ts"],"names":[],"mappings":";;;AAAA,qDAAgD;AAEhD,MAAa,iBAAiB;IAEtB,KAAK,CAAC,WAAW,CAAC,KAAc,EAAE,OAAiB;QACzD,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAC9B,MAAM,IAAI,6BAAY,CAAC,oBAAoB,CAAC,CAAC;SAC7C;aAAM;YACN,MAAM,QAAQ,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;YAC/B,IAAI,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;gBAC/B,OAAO,QAAQ,CAAC;aAChB;iBAAM;gBACN,MAAM,IAAI,6BAAY,CAAC,8BAA8B,CAAC,CAAC;aACvD;SACD;IACF,CAAC;CACD;AAdD,8CAcC","sourcesContent":["import { InsightError } from \"./IInsightFacade\";\n\nexport class QueryOrderHandler {\n\t// returns the order key as a string (WORKING)\n\tpublic async handleORDER(value: unknown, columns: string[]): Promise<string> {\n\t\tif (typeof value !== \"string\") {\n\t\t\tthrow new InsightError(\"Invalid ORDER type\");\n\t\t} else {\n\t\t\tconst valueStr = String(value);\n\t\t\tif (columns.includes(valueStr)) {\n\t\t\t\treturn valueStr;\n\t\t\t} else {\n\t\t\t\tthrow new InsightError(\"ORDER key must be in COLUMNS\");\n\t\t\t}\n\t\t}\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"8e6c6f8f55568ac50d424674cf7921ed033ffa80","contentHash":"97351e305e687b2ee25d380079f15954b9e2172bb8ae9a71fa60549bf4e344bc"},"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\QueryUtils.ts":{"path":"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\QueryUtils.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":25},"end":{"line":3,"column":52}},"2":{"start":{"line":5,"column":22},"end":{"line":5,"column":35}},"3":{"start":{"line":6,"column":18},"end":{"line":6,"column":36}},"4":{"start":{"line":7,"column":14},"end":{"line":7,"column":59}},"5":{"start":{"line":8,"column":14},"end":{"line":8,"column":54}},"6":{"start":{"line":9,"column":19},"end":{"line":9,"column":39}},"7":{"start":{"line":10,"column":21},"end":{"line":10,"column":41}},"8":{"start":{"line":12,"column":8},"end":{"line":17,"column":9}},"9":{"start":{"line":13,"column":12},"end":{"line":13,"column":25}},"10":{"start":{"line":16,"column":12},"end":{"line":16,"column":69}},"11":{"start":{"line":20,"column":29},"end":{"line":20,"column":33}},"12":{"start":{"line":21,"column":8},"end":{"line":26,"column":9}},"13":{"start":{"line":22,"column":12},"end":{"line":22,"column":144}},"14":{"start":{"line":25,"column":12},"end":{"line":25,"column":24}},"15":{"start":{"line":29,"column":8},"end":{"line":51,"column":9}},"16":{"start":{"line":30,"column":12},"end":{"line":30,"column":27}},"17":{"start":{"line":33,"column":12},"end":{"line":50,"column":15}},"18":{"start":{"line":34,"column":16},"end":{"line":49,"column":22}},"19":{"start":{"line":35,"column":20},"end":{"line":47,"column":23}},"20":{"start":{"line":36,"column":39},"end":{"line":36,"column":56}},"21":{"start":{"line":37,"column":39},"end":{"line":37,"column":56}},"22":{"start":{"line":38,"column":24},"end":{"line":46,"column":25}},"23":{"start":{"line":39,"column":28},"end":{"line":39,"column":64}},"24":{"start":{"line":41,"column":29},"end":{"line":46,"column":25}},"25":{"start":{"line":42,"column":28},"end":{"line":42,"column":51}},"26":{"start":{"line":45,"column":28},"end":{"line":45,"column":80}},"27":{"start":{"line":48,"column":20},"end":{"line":48,"column":37}},"28":{"start":{"line":54,"column":24},"end":{"line":68,"column":10}},"29":{"start":{"line":55,"column":31},"end":{"line":55,"column":33}},"30":{"start":{"line":56,"column":12},"end":{"line":66,"column":15}},"31":{"start":{"line":57,"column":30},"end":{"line":57,"column":50}},"32":{"start":{"line":58,"column":16},"end":{"line":65,"column":17}},"33":{"start":{"line":59,"column":35},"end":{"line":59,"column":62}},"34":{"start":{"line":60,"column":20},"end":{"line":60,"column":74}},"35":{"start":{"line":63,"column":35},"end":{"line":63,"column":62}},"36":{"start":{"line":64,"column":20},"end":{"line":64,"column":74}},"37":{"start":{"line":67,"column":12},"end":{"line":67,"column":30}},"38":{"start":{"line":69,"column":8},"end":{"line":69,"column":23}},"39":{"start":{"line":73,"column":8},"end":{"line":75,"column":9}},"40":{"start":{"line":74,"column":12},"end":{"line":74,"column":73}},"41":{"start":{"line":76,"column":8},"end":{"line":87,"column":9}},"42":{"start":{"line":77,"column":12},"end":{"line":77,"column":91}},"43":{"start":{"line":77,"column":50},"end":{"line":77,"column":89}},"44":{"start":{"line":79,"column":13},"end":{"line":87,"column":9}},"45":{"start":{"line":80,"column":12},"end":{"line":80,"column":91}},"46":{"start":{"line":80,"column":50},"end":{"line":80,"column":89}},"47":{"start":{"line":82,"column":13},"end":{"line":87,"column":9}},"48":{"start":{"line":83,"column":12},"end":{"line":83,"column":93}},"49":{"start":{"line":83,"column":50},"end":{"line":83,"column":91}},"50":{"start":{"line":86,"column":12},"end":{"line":86,"column":75}},"51":{"start":{"line":88,"column":8},"end":{"line":88,"column":23}},"52":{"start":{"line":91,"column":32},"end":{"line":91,"column":41}},"53":{"start":{"line":92,"column":29},"end":{"line":94,"column":10}},"54":{"start":{"line":93,"column":12},"end":{"line":93,"column":77}},"55":{"start":{"line":95,"column":28},"end":{"line":95,"column":49}},"56":{"start":{"line":96,"column":8},"end":{"line":98,"column":11}},"57":{"start":{"line":97,"column":12},"end":{"line":97,"column":82}},"58":{"start":{"line":99,"column":8},"end":{"line":109,"column":9}},"59":{"start":{"line":100,"column":12},"end":{"line":102,"column":13}},"60":{"start":{"line":101,"column":16},"end":{"line":101,"column":25}},"61":{"start":{"line":103,"column":28},"end":{"line":103,"column":46}},"62":{"start":{"line":104,"column":12},"end":{"line":108,"column":15}},"63":{"start":{"line":105,"column":16},"end":{"line":107,"column":17}},"64":{"start":{"line":106,"column":20},"end":{"line":106,"column":52}},"65":{"start":{"line":110,"column":8},"end":{"line":110,"column":78}},"66":{"start":{"line":110,"column":48},"end":{"line":110,"column":76}},"67":{"start":{"line":113,"column":8},"end":{"line":115,"column":9}},"68":{"start":{"line":114,"column":12},"end":{"line":114,"column":78}},"69":{"start":{"line":118,"column":32},"end":{"line":118,"column":49}},"70":{"start":{"line":119,"column":8},"end":{"line":121,"column":9}},"71":{"start":{"line":120,"column":12},"end":{"line":120,"column":128}},"72":{"start":{"line":122,"column":31},"end":{"line":122,"column":57}},"73":{"start":{"line":123,"column":8},"end":{"line":123,"column":49}},"74":{"start":{"line":126,"column":0},"end":{"line":126,"column":29}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":11,"column":4},"end":{"line":11,"column":5}},"loc":{"start":{"line":11,"column":25},"end":{"line":18,"column":5}},"line":11},"1":{"name":"(anonymous_1)","decl":{"start":{"line":19,"column":4},"end":{"line":19,"column":5}},"loc":{"start":{"line":19,"column":24},"end":{"line":27,"column":5}},"line":19},"2":{"name":"(anonymous_2)","decl":{"start":{"line":28,"column":4},"end":{"line":28,"column":5}},"loc":{"start":{"line":28,"column":41},"end":{"line":52,"column":5}},"line":28},"3":{"name":"(anonymous_3)","decl":{"start":{"line":33,"column":31},"end":{"line":33,"column":32}},"loc":{"start":{"line":33,"column":44},"end":{"line":50,"column":13}},"line":33},"4":{"name":"(anonymous_4)","decl":{"start":{"line":34,"column":27},"end":{"line":34,"column":28}},"loc":{"start":{"line":34,"column":33},"end":{"line":49,"column":17}},"line":34},"5":{"name":"(anonymous_5)","decl":{"start":{"line":35,"column":33},"end":{"line":35,"column":34}},"loc":{"start":{"line":35,"column":55},"end":{"line":47,"column":21}},"line":35},"6":{"name":"(anonymous_6)","decl":{"start":{"line":53,"column":4},"end":{"line":53,"column":5}},"loc":{"start":{"line":53,"column":43},"end":{"line":70,"column":5}},"line":53},"7":{"name":"(anonymous_7)","decl":{"start":{"line":54,"column":37},"end":{"line":54,"column":38}},"loc":{"start":{"line":54,"column":50},"end":{"line":68,"column":9}},"line":54},"8":{"name":"(anonymous_8)","decl":{"start":{"line":56,"column":28},"end":{"line":56,"column":29}},"loc":{"start":{"line":56,"column":40},"end":{"line":66,"column":13}},"line":56},"9":{"name":"(anonymous_9)","decl":{"start":{"line":71,"column":4},"end":{"line":71,"column":5}},"loc":{"start":{"line":71,"column":56},"end":{"line":89,"column":5}},"line":71},"10":{"name":"(anonymous_10)","decl":{"start":{"line":77,"column":37},"end":{"line":77,"column":38}},"loc":{"start":{"line":77,"column":50},"end":{"line":77,"column":89}},"line":77},"11":{"name":"(anonymous_11)","decl":{"start":{"line":80,"column":37},"end":{"line":80,"column":38}},"loc":{"start":{"line":80,"column":50},"end":{"line":80,"column":89}},"line":80},"12":{"name":"(anonymous_12)","decl":{"start":{"line":83,"column":37},"end":{"line":83,"column":38}},"loc":{"start":{"line":83,"column":50},"end":{"line":83,"column":91}},"line":83},"13":{"name":"(anonymous_13)","decl":{"start":{"line":90,"column":4},"end":{"line":90,"column":5}},"loc":{"start":{"line":90,"column":32},"end":{"line":111,"column":5}},"line":90},"14":{"name":"(anonymous_14)","decl":{"start":{"line":92,"column":44},"end":{"line":92,"column":45}},"loc":{"start":{"line":92,"column":69},"end":{"line":94,"column":9}},"line":92},"15":{"name":"(anonymous_15)","decl":{"start":{"line":96,"column":28},"end":{"line":96,"column":29}},"loc":{"start":{"line":96,"column":41},"end":{"line":98,"column":9}},"line":96},"16":{"name":"(anonymous_16)","decl":{"start":{"line":104,"column":33},"end":{"line":104,"column":34}},"loc":{"start":{"line":104,"column":46},"end":{"line":108,"column":13}},"line":104},"17":{"name":"(anonymous_17)","decl":{"start":{"line":110,"column":35},"end":{"line":110,"column":36}},"loc":{"start":{"line":110,"column":48},"end":{"line":110,"column":76}},"line":110},"18":{"name":"(anonymous_18)","decl":{"start":{"line":112,"column":4},"end":{"line":112,"column":5}},"loc":{"start":{"line":112,"column":18},"end":{"line":116,"column":5}},"line":112},"19":{"name":"(anonymous_19)","decl":{"start":{"line":117,"column":4},"end":{"line":117,"column":5}},"loc":{"start":{"line":117,"column":21},"end":{"line":124,"column":5}},"line":117}},"branchMap":{"0":{"loc":{"start":{"line":12,"column":8},"end":{"line":17,"column":9}},"type":"if","locations":[{"start":{"line":12,"column":8},"end":{"line":17,"column":9}},{"start":{"line":12,"column":8},"end":{"line":17,"column":9}}],"line":12},"1":{"loc":{"start":{"line":21,"column":8},"end":{"line":26,"column":9}},"type":"if","locations":[{"start":{"line":21,"column":8},"end":{"line":26,"column":9}},{"start":{"line":21,"column":8},"end":{"line":26,"column":9}}],"line":21},"2":{"loc":{"start":{"line":29,"column":8},"end":{"line":51,"column":9}},"type":"if","locations":[{"start":{"line":29,"column":8},"end":{"line":51,"column":9}},{"start":{"line":29,"column":8},"end":{"line":51,"column":9}}],"line":29},"3":{"loc":{"start":{"line":38,"column":24},"end":{"line":46,"column":25}},"type":"if","locations":[{"start":{"line":38,"column":24},"end":{"line":46,"column":25}},{"start":{"line":38,"column":24},"end":{"line":46,"column":25}}],"line":38},"4":{"loc":{"start":{"line":38,"column":28},"end":{"line":38,"column":84}},"type":"binary-expr","locations":[{"start":{"line":38,"column":28},"end":{"line":38,"column":54}},{"start":{"line":38,"column":58},"end":{"line":38,"column":84}}],"line":38},"5":{"loc":{"start":{"line":41,"column":29},"end":{"line":46,"column":25}},"type":"if","locations":[{"start":{"line":41,"column":29},"end":{"line":46,"column":25}},{"start":{"line":41,"column":29},"end":{"line":46,"column":25}}],"line":41},"6":{"loc":{"start":{"line":41,"column":33},"end":{"line":41,"column":89}},"type":"binary-expr","locations":[{"start":{"line":41,"column":33},"end":{"line":41,"column":59}},{"start":{"line":41,"column":63},"end":{"line":41,"column":89}}],"line":41},"7":{"loc":{"start":{"line":58,"column":16},"end":{"line":65,"column":17}},"type":"if","locations":[{"start":{"line":58,"column":16},"end":{"line":65,"column":17}},{"start":{"line":58,"column":16},"end":{"line":65,"column":17}}],"line":58},"8":{"loc":{"start":{"line":73,"column":8},"end":{"line":75,"column":9}},"type":"if","locations":[{"start":{"line":73,"column":8},"end":{"line":75,"column":9}},{"start":{"line":73,"column":8},"end":{"line":75,"column":9}}],"line":73},"9":{"loc":{"start":{"line":76,"column":8},"end":{"line":87,"column":9}},"type":"if","locations":[{"start":{"line":76,"column":8},"end":{"line":87,"column":9}},{"start":{"line":76,"column":8},"end":{"line":87,"column":9}}],"line":76},"10":{"loc":{"start":{"line":79,"column":13},"end":{"line":87,"column":9}},"type":"if","locations":[{"start":{"line":79,"column":13},"end":{"line":87,"column":9}},{"start":{"line":79,"column":13},"end":{"line":87,"column":9}}],"line":79},"11":{"loc":{"start":{"line":82,"column":13},"end":{"line":87,"column":9}},"type":"if","locations":[{"start":{"line":82,"column":13},"end":{"line":87,"column":9}},{"start":{"line":82,"column":13},"end":{"line":87,"column":9}}],"line":82},"12":{"loc":{"start":{"line":93,"column":19},"end":{"line":93,"column":76}},"type":"cond-expr","locations":[{"start":{"line":93,"column":56},"end":{"line":93,"column":65}},{"start":{"line":93,"column":68},"end":{"line":93,"column":76}}],"line":93},"13":{"loc":{"start":{"line":97,"column":42},"end":{"line":97,"column":75}},"type":"binary-expr","locations":[{"start":{"line":97,"column":42},"end":{"line":97,"column":70}},{"start":{"line":97,"column":74},"end":{"line":97,"column":75}}],"line":97},"14":{"loc":{"start":{"line":100,"column":12},"end":{"line":102,"column":13}},"type":"if","locations":[{"start":{"line":100,"column":12},"end":{"line":102,"column":13}},{"start":{"line":100,"column":12},"end":{"line":102,"column":13}}],"line":100},"15":{"loc":{"start":{"line":105,"column":16},"end":{"line":107,"column":17}},"type":"if","locations":[{"start":{"line":105,"column":16},"end":{"line":107,"column":17}},{"start":{"line":105,"column":16},"end":{"line":107,"column":17}}],"line":105},"16":{"loc":{"start":{"line":113,"column":8},"end":{"line":115,"column":9}},"type":"if","locations":[{"start":{"line":113,"column":8},"end":{"line":115,"column":9}},{"start":{"line":113,"column":8},"end":{"line":115,"column":9}}],"line":113},"17":{"loc":{"start":{"line":119,"column":8},"end":{"line":121,"column":9}},"type":"if","locations":[{"start":{"line":119,"column":8},"end":{"line":121,"column":9}},{"start":{"line":119,"column":8},"end":{"line":121,"column":9}}],"line":119}},"s":{"0":1,"1":1,"2":71,"3":71,"4":71,"5":71,"6":71,"7":71,"8":106,"9":105,"10":1,"11":41,"12":41,"13":3,"14":38,"15":38,"16":8,"17":30,"18":30,"19":30,"20":52346,"21":52346,"22":52346,"23":13990,"24":38356,"25":38356,"26":0,"27":30,"28":38,"29":6616,"30":6616,"31":19946,"32":19946,"33":7094,"34":7094,"35":12852,"36":12852,"37":6616,"38":38,"39":63,"40":0,"41":63,"42":8,"43":516896,"44":55,"45":53,"46":3424436,"47":2,"48":2,"49":129224,"50":0,"51":63,"52":31,"53":31,"54":35,"55":31,"56":31,"57":151333,"58":31,"59":66,"60":31,"61":35,"62":35,"63":154541,"64":21461,"65":31,"66":151333,"67":141,"68":3,"69":32,"70":32,"71":2,"72":30,"73":30,"74":1},"f":{"0":106,"1":41,"2":38,"3":30,"4":30,"5":52346,"6":38,"7":6616,"8":19946,"9":63,"10":516896,"11":3424436,"12":129224,"13":31,"14":35,"15":151333,"16":154541,"17":151333,"18":141,"19":32},"b":{"0":[105,1],"1":[3,38],"2":[8,30],"3":[13990,38356],"4":[52346,13990],"5":[38356,0],"6":[38356,38356],"7":[7094,12852],"8":[0,63],"9":[8,55],"10":[53,2],"11":[2,0],"12":[13,22],"13":[151333,151333],"14":[31,35],"15":[21461,133080],"16":[3,138],"17":[2,30]},"inputSourceMap":{"version":3,"file":"C:/Users/oreak/IdeaProjects/project_team059/src/controller/QueryUtils.ts","sources":["C:/Users/oreak/IdeaProjects/project_team059/src/controller/QueryUtils.ts"],"names":[],"mappings":"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","sourcesContent":["import { InsightError, InsightResult, ResultTooLargeError } from \"./IInsightFacade\";\nimport Section from \"./sections/Section\";\n\nexport default class QueryUtils {\n\tpublic logicComparator: string[] = [\"AND\", \"OR\"];\n\tpublic mComparator: string[] = [\"LT\", \"GT\", \"EQ\"];\n\tpublic sFields: string[] = [\"uuid\", \"id\", \"title\", \"instructor\", \"dept\"];\n\tpublic mFields: string[] = [\"year\", \"avg\", \"pass\", \"fail\", \"audit\"];\n\tpublic validOptions: string[] = [\"COLUMNS\", \"ORDER\"];\n\tpublic validQueryKeys: string[] = [\"WHERE\", \"OPTIONS\"];\n\n\tpublic coerceToArray(value: unknown): unknown[] {\n\t\tif (Array.isArray(value)) {\n\t\t\treturn value;\n\t\t} else {\n\t\t\tthrow new InsightError(\"Not an array.\");\n\t\t}\n\t}\n\n\tpublic checkSize(sections: Section[]): boolean {\n\t\tconst maxQuerySize = 5000;\n\t\tif (sections.length > maxQuerySize) {\n\t\t\tthrow new ResultTooLargeError(\n\t\t\t\t\"The result is too big. Only queries with a maximum of 5000 results are supported.\"\n\t\t\t);\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\tpublic async sortByOrder(results: InsightResult[], orderKey: string): Promise<InsightResult[]> {\n\t\tif (orderKey === \"\") {\n\t\t\treturn results;\n\t\t} else {\n\t\t\t// Perform the sorting asynchronously\n\t\t\treturn new Promise((resolve) => {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tresults.sort((recordA, recordB) => {\n\t\t\t\t\t\tconst valueA = recordA[orderKey];\n\t\t\t\t\t\tconst valueB = recordB[orderKey];\n\n\t\t\t\t\t\tif (typeof valueA === \"string\" && typeof valueB === \"string\") {\n\t\t\t\t\t\t\treturn valueA.localeCompare(valueB);\n\t\t\t\t\t\t} else if (typeof valueA === \"number\" && typeof valueB === \"number\") {\n\t\t\t\t\t\t\treturn valueA - valueB;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Handle mixed types (e.g., string vs number)\n\t\t\t\t\t\t\treturn String(valueA).localeCompare(String(valueB));\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\t// Resolve the promise with the sorted results\n\t\t\t\t\tresolve(results);\n\t\t\t\t}, 0);\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic async selectCOLUMNS(sections: Section[], columns: string[]): Promise<InsightResult[]> {\n\t\tconst results = sections.map((section) => {\n\t\t\tconst currRecord: InsightResult = {};\n\n\t\t\tcolumns.forEach((column) => {\n\t\t\t\tconst field = column.split(\"_\")[1];\n\n\t\t\t\tif (this.mFields.includes(field)) {\n\t\t\t\t\tconst mIndex = this.mFields.indexOf(field);\n\t\t\t\t\tcurrRecord[column] = section.getMFieldByIndex(mIndex);\n\t\t\t\t} else {\n\t\t\t\t\tconst sIndex = this.sFields.indexOf(field);\n\t\t\t\t\tcurrRecord[column] = section.getSFieldByIndex(sIndex);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn currRecord;\n\t\t});\n\t\treturn results;\n\t}\n\n\tpublic async filterMCompare(dataset: Section[], filter: string, index: number, input: number): Promise<Section[]> {\n\t\tlet results: Section[];\n\t\t//console.log(\"FILTER MCOMPARISON WORKING\");\n\t\tif (typeof input === \"string\") {\n\t\t\tthrow new InsightError(\"Invalid mkey type\");\n\t\t}\n\t\tif (filter === \"LT\") {\n\t\t\tresults = dataset.filter((section) => section.getMFieldByIndex(index) < input);\n\t\t} else if (filter === \"GT\") {\n\t\t\tresults = dataset.filter((section) => section.getMFieldByIndex(index) > input);\n\t\t} else if (filter === \"EQ\") {\n\t\t\tresults = dataset.filter((section) => section.getMFieldByIndex(index) === input);\n\t\t} else {\n\t\t\tthrow new InsightError(\"Invalid MComparator\");\n\t\t}\n\t\treturn results;\n\t}\n\n\tpublic async mergeAndList(andList: Section[][]): Promise<Section[]> {\n\t\t// make a map\n\t\tconst sectionCountMap = new Map<Section, number>();\n\n\t\t// find the shortest list\n\t\tconst shortestList = andList.reduce((shortest, currArray) => {\n\t\t\treturn currArray.length < shortest.length ? currArray : shortest;\n\t\t});\n\n\t\t// turn into a set for faster lookup\n\t\tconst shortestSet = new Set(shortestList);\n\n\t\t// add all section in shortest list to map and increment count by 1\n\t\tshortestSet.forEach((section) => {\n\t\t\tsectionCountMap.set(section, (sectionCountMap.get(section) || 0) + 1);\n\t\t});\n\n\t\t// iterate through each array of section\n\t\tfor (const currArray of andList) {\n\t\t\t// skip comparison with itself\n\t\t\tif (currArray === shortestList) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst currSet = new Set(currArray);\n\n\t\t\t// only keep sections in the shortest list that are also in the current array\n\t\t\tshortestList.forEach((section) => {\n\t\t\t\tif (!currSet.has(section)) {\n\t\t\t\t\tsectionCountMap.delete(section); // Remove sections not found in currArray\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// filter the shortest list to include only sections present in all arrays\n\t\treturn shortestList.filter((section) => sectionCountMap.has(section));\n\t}\n\n\tpublic isObject(obj: unknown): void {\n\t\tif (Array.isArray(obj)) {\n\t\t\tthrow new InsightError(\"Invalid object present\");\n\t\t}\n\t}\n\tpublic testRegex(input: string): RegExp {\n\t\tconst validInputRegex = /^[*]?[^*]*[*]?$/;\n\t\tif (!validInputRegex.test(input)) {\n\t\t\tthrow new InsightError(\" Asterisks (*) can only be the first or last characters of input strings\");\n\t\t}\n\t\t// fix this return, figure out what sfield is, how to match it, and how to access\n\t\tconst processedInput = input.replace(/\\*/g, \".*\");\n\t\treturn new RegExp(`^${processedInput}$`); // Use case-insensitive matching\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"0d6b7873aad909a60ae38dce0a1c9a1bd0ebed4c","contentHash":"29e778ec4cf86c175cbcdb6d32be29dd75bbea85d4c88e8083b14cde44aaea72"},"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\sections\\SectionDiskReader.ts":{"path":"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\sections\\SectionDiskReader.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":25},"end":{"line":6,"column":53}},"4":{"start":{"line":7,"column":25},"end":{"line":7,"column":69}},"5":{"start":{"line":8,"column":19},"end":{"line":8,"column":55}},"6":{"start":{"line":11,"column":8},"end":{"line":11,"column":16}},"7":{"start":{"line":14,"column":28},"end":{"line":14,"column":30}},"8":{"start":{"line":15,"column":8},"end":{"line":18,"column":11}},"9":{"start":{"line":16,"column":28},"end":{"line":16,"column":60}},"10":{"start":{"line":17,"column":12},"end":{"line":17,"column":38}},"11":{"start":{"line":19,"column":24},"end":{"line":19,"column":54}},"12":{"start":{"line":20,"column":8},"end":{"line":22,"column":11}},"13":{"start":{"line":21,"column":12},"end":{"line":21,"column":61}},"14":{"start":{"line":23,"column":8},"end":{"line":23,"column":32}},"15":{"start":{"line":26,"column":28},"end":{"line":37,"column":10}},"16":{"start":{"line":27,"column":25},"end":{"line":27,"column":96}},"17":{"start":{"line":28,"column":24},"end":{"line":28,"column":40}},"18":{"start":{"line":29,"column":28},"end":{"line":29,"column":48}},"19":{"start":{"line":30,"column":25},"end":{"line":30,"column":42}},"20":{"start":{"line":31,"column":38},"end":{"line":35,"column":13}},"21":{"start":{"line":36,"column":12},"end":{"line":36,"column":37}},"22":{"start":{"line":38,"column":23},"end":{"line":38,"column":53}},"23":{"start":{"line":39,"column":8},"end":{"line":39,"column":22}},"24":{"start":{"line":42,"column":27},"end":{"line":42,"column":62}},"25":{"start":{"line":43,"column":24},"end":{"line":43,"column":50}},"26":{"start":{"line":44,"column":8},"end":{"line":46,"column":9}},"27":{"start":{"line":45,"column":12},"end":{"line":45,"column":72}},"28":{"start":{"line":47,"column":8},"end":{"line":47,"column":65}},"29":{"start":{"line":50,"column":0},"end":{"line":50,"column":36}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":10,"column":4},"end":{"line":10,"column":5}},"loc":{"start":{"line":10,"column":18},"end":{"line":12,"column":5}},"line":10},"2":{"name":"(anonymous_2)","decl":{"start":{"line":13,"column":4},"end":{"line":13,"column":5}},"loc":{"start":{"line":13,"column":56},"end":{"line":24,"column":5}},"line":13},"3":{"name":"(anonymous_3)","decl":{"start":{"line":15,"column":24},"end":{"line":15,"column":25}},"loc":{"start":{"line":15,"column":35},"end":{"line":18,"column":9}},"line":15},"4":{"name":"(anonymous_4)","decl":{"start":{"line":20,"column":24},"end":{"line":20,"column":25}},"loc":{"start":{"line":20,"column":36},"end":{"line":22,"column":9}},"line":20},"5":{"name":"(anonymous_5)","decl":{"start":{"line":25,"column":4},"end":{"line":25,"column":5}},"loc":{"start":{"line":25,"column":38},"end":{"line":40,"column":5}},"line":25},"6":{"name":"(anonymous_6)","decl":{"start":{"line":26,"column":36},"end":{"line":26,"column":37}},"loc":{"start":{"line":26,"column":50},"end":{"line":37,"column":9}},"line":26},"7":{"name":"(anonymous_7)","decl":{"start":{"line":41,"column":4},"end":{"line":41,"column":5}},"loc":{"start":{"line":41,"column":59},"end":{"line":48,"column":5}},"line":41}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":44,"column":8},"end":{"line":46,"column":9}},"type":"if","locations":[{"start":{"line":44,"column":8},"end":{"line":46,"column":9}},{"start":{"line":44,"column":8},"end":{"line":46,"column":9}}],"line":44}},"s":{"0":1,"1":2,"2":1,"3":1,"4":1,"5":1,"6":142,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":25,"16":36,"17":36,"18":36,"19":36,"20":36,"21":36,"22":25,"23":25,"24":38,"25":35,"26":35,"27":1,"28":34,"29":1},"f":{"0":2,"1":142,"2":0,"3":0,"4":0,"5":25,"6":36,"7":38},"b":{"0":[1,1,1],"1":[1,1],"2":[2,2],"3":[1,34]},"inputSourceMap":{"version":3,"file":"C:/Users/oreak/IdeaProjects/project_team059/src/controller/sections/SectionDiskReader.ts","sources":["C:/Users/oreak/IdeaProjects/project_team059/src/controller/sections/SectionDiskReader.ts"],"names":[],"mappings":";;;;;AAAA,sDAAqF;AACrF,sEAAiE;AACjE,wDAA0B;AAK1B,MAAqB,iBAAkB,SAAQ,wBAAc;IAC5D;QACC,KAAK,EAAE,CAAC;IACT,CAAC;IAOM,KAAK,CAAC,kBAAkB,CAC9B,OAAiB,EACjB,gBAAwC;QAExC,MAAM,WAAW,GAA6B,EAAE,CAAC;QAGjD,OAAO,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;YAGzB,MAAM,OAAO,GAAG,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;YACjD,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAC;QAEH,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QAE/C,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;YAC1B,gBAAgB,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,OAAO,gBAAgB,CAAC;IACzB,CAAC;IAGM,KAAK,CAAC,sBAAsB,CAAC,GAAa;QAChD,MAAM,WAAW,GAAG,GAAG,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,EAAE,EAAE;YACxC,MAAM,IAAI,GAAG,MAAM,kBAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,UAAU,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;YACrE,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAE7B,MAAM,OAAO,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAiB,CAAC;YAC/C,MAAM,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAA0B,CAAC;YAErD,MAAM,iBAAiB,GAAmB;gBACzC,EAAE,EAAE,EAAE;gBACN,IAAI,EAAE,IAAI;gBACV,OAAO,EAAE,OAAO;aAChB,CAAC;YAEF,OAAO,iBAAiB,CAAC;QAC1B,CAAC,CAAC,CAAC;QAEH,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QAC9C,OAAO,MAAM,CAAC;IACf,CAAC;IAOM,KAAK,CAAC,0BAA0B,CAAC,EAAU,EAAE,gBAAwC;QAC3F,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,EAAE,CAAC,CAAC;QACvD,MAAM,OAAO,GAAG,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC;QAE3C,IAAI,OAAO,KAAK,CAAC,EAAE;YAClB,MAAM,IAAI,6BAAY,CAAC,kBAAkB,CAAC,CAAC;SAC3C;QAED,gBAAgB,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,EAAE,UAAU,CAAC,QAAQ,CAAC,CAAC;IAC1D,CAAC;CACD;AAtED,oCAsEC","sourcesContent":["import { InsightDataset, InsightDatasetKind, InsightError } from \"../IInsightFacade\";\nimport SectionsParser, { DatasetRecord } from \"./SectionsParser\";\nimport fs from \"fs-extra\";\nimport Section from \"./Section\";\n\n// Any information about Sections that need to read from the disk\n\nexport default class SectionDiskReader extends SectionsParser {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\t// REQUIRES: currIDs - array of all the dataset ids currently added in InsightFacade instance\n\t//\t\t\t sectionsDatabase - map of all added datasets and their associated sections\n\t// EFFECTS: finds all sections datasets in disks not in current datasets and returns a map of the datasets with their id (dataset name)\n\t// and associated sections\n\t// datasetsIds = all currently added datasets (refer to currIDs),\n\tpublic async mapMissingSections(\n\t\tcurrIDs: string[],\n\t\tsectionsDatabase: Map<string, Section[]>\n\t): Promise<Map<string, Section[]>> {\n\t\tconst allPromises: Promise<DatasetRecord>[] = [];\n\t\t// the id of all datasets not currently added\n\n\t\tcurrIDs.forEach((setId) => {\n\t\t\t// all ids for missing datasets are returned as a Record\n\t\t\t// with all the sections associated with the id\n\t\t\tconst promise = this.turnDatasetToSection(setId);\n\t\t\tallPromises.push(promise);\n\t\t});\n\n\t\tconst records = await Promise.all(allPromises);\n\t\t// add all records collected to Map\n\t\trecords.forEach((record) => {\n\t\t\tsectionsDatabase.set(record.id, record.sections);\n\t\t});\n\n\t\treturn sectionsDatabase;\n\t}\n\n\t// Writes InsightDataset info about a dataset from disk\n\tpublic async logInsightKindFromDisk(ids: string[]): Promise<InsightDataset[]> {\n\t\tconst allPromises = ids.map(async (id) => {\n\t\t\tconst file = await fs.promises.readFile(`./data/${id}/kind`, \"utf8\");\n\t\t\tconst obj = JSON.parse(file);\n\n\t\t\tconst numRows = obj.table[0].numRows as number;\n\t\t\tconst kind = obj.table[0].kind as InsightDatasetKind;\n\n\t\t\tconst newInsightDataset: InsightDataset = {\n\t\t\t\tid: id,\n\t\t\t\tkind: kind,\n\t\t\t\tnumRows: numRows,\n\t\t\t};\n\n\t\t\treturn newInsightDataset;\n\t\t});\n\n\t\tconst result = await Promise.all(allPromises);\n\t\treturn result;\n\t}\n\n\t// REQUIRES: id - name of dataset to be retrieved from disk (id IS NOT IN datasets ALREADY!!!!)\n\t//           datasets - sets you'll be mapping new DatasetRecord to\n\t// EFFECTS: Retrieves the sections associated with the dataset id on disk and turned into Sections objects and maps\n\t//          them to sectionsDatabase with their associated id.\n\t// OUTPUT: VOID\n\tpublic async logNewDatasetFromDiskToMap(id: string, sectionsDatabase: Map<string, Section[]>): Promise<void> {\n\t\tconst newDataset = await this.turnDatasetToSection(id);\n\t\tconst numRows = newDataset.sections.length;\n\n\t\tif (numRows === 0) {\n\t\t\tthrow new InsightError(\"No valid Section\");\n\t\t}\n\t\t// update member variables\n\t\tsectionsDatabase.set(newDataset.id, newDataset.sections);\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"30de2ed22663c6bc36d4215b60fd1000684c6a7c","contentHash":"13a7fd2428f34f5e616b5212cd1a76d4780c3ad1735cfab7c7d6f46e6c5fa897"},"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\sections\\SectionsParser.ts":{"path":"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\sections\\SectionsParser.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":19},"end":{"line":6,"column":55}},"4":{"start":{"line":7,"column":18},"end":{"line":7,"column":55}},"5":{"start":{"line":9,"column":19},"end":{"line":20,"column":5}},"6":{"start":{"line":21,"column":14},"end":{"line":21,"column":54}},"7":{"start":{"line":22,"column":14},"end":{"line":22,"column":63}},"8":{"start":{"line":23,"column":34},"end":{"line":23,"column":38}},"9":{"start":{"line":25,"column":34},"end":{"line":28,"column":9}},"10":{"start":{"line":26,"column":30},"end":{"line":26,"column":50}},"11":{"start":{"line":27,"column":12},"end":{"line":27,"column":75}},"12":{"start":{"line":27,"column":48},"end":{"line":27,"column":73}},"13":{"start":{"line":29,"column":38},"end":{"line":29,"column":120}},"14":{"start":{"line":29,"column":74},"end":{"line":29,"column":119}},"15":{"start":{"line":30,"column":8},"end":{"line":30,"column":37}},"16":{"start":{"line":33,"column":28},"end":{"line":33,"column":30}},"17":{"start":{"line":34,"column":25},"end":{"line":34,"column":27}},"18":{"start":{"line":35,"column":21},"end":{"line":35,"column":78}},"19":{"start":{"line":36,"column":8},"end":{"line":61,"column":9}},"20":{"start":{"line":37,"column":28},"end":{"line":59,"column":14}},"21":{"start":{"line":40,"column":16},"end":{"line":42,"column":17}},"22":{"start":{"line":41,"column":20},"end":{"line":41,"column":32}},"23":{"start":{"line":43,"column":46},"end":{"line":43,"column":76}},"24":{"start":{"line":44,"column":16},"end":{"line":44,"column":52}},"25":{"start":{"line":45,"column":16},"end":{"line":54,"column":19}},"26":{"start":{"line":46,"column":20},"end":{"line":53,"column":21}},"27":{"start":{"line":47,"column":43},"end":{"line":47,"column":74}},"28":{"start":{"line":48,"column":24},"end":{"line":48,"column":117}},"29":{"start":{"line":49,"column":24},"end":{"line":49,"column":50}},"30":{"start":{"line":52,"column":24},"end":{"line":52,"column":71}},"31":{"start":{"line":55,"column":16},"end":{"line":55,"column":36}},"32":{"start":{"line":58,"column":16},"end":{"line":58,"column":26}},"33":{"start":{"line":60,"column":12},"end":{"line":60,"column":38}},"34":{"start":{"line":62,"column":8},"end":{"line":62,"column":39}},"35":{"start":{"line":63,"column":30},"end":{"line":63,"column":60}},"36":{"start":{"line":64,"column":8},"end":{"line":64,"column":29}},"37":{"start":{"line":67,"column":23},"end":{"line":67,"column":31}},"38":{"start":{"line":68,"column":52},"end":{"line":71,"column":10}},"39":{"start":{"line":69,"column":26},"end":{"line":69,"column":40}},"40":{"start":{"line":70,"column":12},"end":{"line":70,"column":25}},"41":{"start":{"line":72,"column":31},"end":{"line":78,"column":9}},"42":{"start":{"line":79,"column":47},"end":{"line":79,"column":91}},"43":{"start":{"line":79,"column":76},"end":{"line":79,"column":90}},"44":{"start":{"line":80,"column":31},"end":{"line":86,"column":9}},"45":{"start":{"line":87,"column":27},"end":{"line":87,"column":87}},"46":{"start":{"line":88,"column":8},"end":{"line":88,"column":26}},"47":{"start":{"line":91,"column":0},"end":{"line":91,"column":33}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":24,"column":4},"end":{"line":24,"column":5}},"loc":{"start":{"line":24,"column":34},"end":{"line":31,"column":5}},"line":24},"2":{"name":"(anonymous_2)","decl":{"start":{"line":25,"column":34},"end":{"line":25,"column":35}},"loc":{"start":{"line":25,"column":60},"end":{"line":28,"column":9}},"line":25},"3":{"name":"(anonymous_3)","decl":{"start":{"line":27,"column":37},"end":{"line":27,"column":38}},"loc":{"start":{"line":27,"column":48},"end":{"line":27,"column":73}},"line":27},"4":{"name":"(anonymous_4)","decl":{"start":{"line":29,"column":61},"end":{"line":29,"column":62}},"loc":{"start":{"line":29,"column":74},"end":{"line":29,"column":119}},"line":29},"5":{"name":"(anonymous_5)","decl":{"start":{"line":32,"column":4},"end":{"line":32,"column":5}},"loc":{"start":{"line":32,"column":35},"end":{"line":65,"column":5}},"line":32},"6":{"name":"(anonymous_6)","decl":{"start":{"line":39,"column":22},"end":{"line":39,"column":23}},"loc":{"start":{"line":39,"column":38},"end":{"line":56,"column":13}},"line":39},"7":{"name":"(anonymous_7)","decl":{"start":{"line":45,"column":46},"end":{"line":45,"column":47}},"loc":{"start":{"line":45,"column":59},"end":{"line":54,"column":17}},"line":45},"8":{"name":"(anonymous_8)","decl":{"start":{"line":57,"column":23},"end":{"line":57,"column":24}},"loc":{"start":{"line":57,"column":32},"end":{"line":59,"column":13}},"line":57},"9":{"name":"(anonymous_9)","decl":{"start":{"line":66,"column":4},"end":{"line":66,"column":5}},"loc":{"start":{"line":66,"column":35},"end":{"line":89,"column":5}},"line":66},"10":{"name":"(anonymous_10)","decl":{"start":{"line":68,"column":69},"end":{"line":68,"column":70}},"loc":{"start":{"line":68,"column":81},"end":{"line":71,"column":9}},"line":68},"11":{"name":"(anonymous_11)","decl":{"start":{"line":79,"column":64},"end":{"line":79,"column":65}},"loc":{"start":{"line":79,"column":76},"end":{"line":79,"column":90}},"line":79}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":40,"column":16},"end":{"line":42,"column":17}},"type":"if","locations":[{"start":{"line":40,"column":16},"end":{"line":42,"column":17}},{"start":{"line":40,"column":16},"end":{"line":42,"column":17}}],"line":40},"4":{"loc":{"start":{"line":46,"column":20},"end":{"line":53,"column":21}},"type":"if","locations":[{"start":{"line":46,"column":20},"end":{"line":53,"column":21}},{"start":{"line":46,"column":20},"end":{"line":53,"column":21}}],"line":46}},"s":{"0":1,"1":2,"2":1,"3":1,"4":1,"5":284,"6":284,"7":284,"8":1,"9":14621,"10":262769,"11":262769,"12":2627634,"13":14621,"14":262769,"15":14621,"16":38,"17":38,"18":38,"19":35,"20":7311,"21":7311,"22":1,"23":7310,"24":7310,"25":7310,"26":131378,"27":50060,"28":50060,"29":50060,"30":81318,"31":7310,"32":0,"33":7311,"34":35,"35":35,"36":35,"37":131378,"38":131378,"39":656890,"40":656890,"41":131378,"42":131378,"43":656890,"44":131378,"45":131378,"46":131378,"47":1},"f":{"0":2,"1":14621,"2":262769,"3":2627634,"4":262769,"5":38,"6":7311,"7":131378,"8":0,"9":131378,"10":656890,"11":656890},"b":{"0":[1,1,1],"1":[1,1],"2":[2,2],"3":[1,7310],"4":[50060,81318]},"inputSourceMap":{"version":3,"file":"C:/Users/oreak/IdeaProjects/project_team059/src/controller/sections/SectionsParser.ts","sources":["C:/Users/oreak/IdeaProjects/project_team059/src/controller/sections/SectionsParser.ts"],"names":[],"mappings":"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","sourcesContent":["import fs from \"fs-extra\";\nimport Section, { Mfield, Sfield } from \"./Section\";\n\nexport interface DatasetRecord {\n\tid: string;\n\tsections: Section[];\n}\n\nexport default class SectionsParser {\n\tprivate valid_fields: string[] = [\n\t\t\"Year\",\n\t\t\"Course\",\n\t\t\"Title\",\n\t\t\"Professor\",\n\t\t\"Subject\",\n\t\t\"id\",\n\t\t\"Avg\",\n\t\t\"Pass\",\n\t\t\"Fail\",\n\t\t\"Audit\",\n\t];\n\n\t// Keep order of mFields and sFields according to chart found in Section Specification sheet\n\t// for consistency\n\tpublic mFields: string[] = [\"Year\", \"Avg\", \"Pass\", \"Fail\", \"Audit\"];\n\n\tpublic sFields: string[] = [\"id\", \"Course\", \"Title\", \"Professor\", \"Subject\"];\n\n\tprivate static OVERALL_SECTION_YEAR = 1900;\n\n\t// REQUIRES: jsonData - parsed JSON Object of the result key in a given course file\n\t//\n\t// EFFECTS: Iterate through each section in a given course file and for each section obtain all the sfields and mfields\n\t// \t\t\tand checks that each section contains all the fields in the variable valid_fields, else filter out.\n\t//\n\t// OUTPUT: returns all the valid sections as a JSONObject.\n\tpublic filterValidSections(jsonData: any): any {\n\t\tconst hasAllValidFields = (section: any, validFields: string[]): boolean => {\n\t\t\tconst fieldKeys = Object.keys(section);\n\t\t\treturn validFields.every((field) => fieldKeys.includes(field));\n\t\t};\n\n\t\tconst validSectionsInCourse = jsonData.result.filter((section: any) =>\n\t\t\thasAllValidFields(section, this.valid_fields)\n\t\t);\n\t\treturn validSectionsInCourse;\n\t}\n\n\t// REQUIRES: id - name of dataset\n\t// EFFECTS: A helper function that can be used by performQuery to turn a dataset written in the disk into a\n\t// \t\t\tDatasetRecord  -> a key value pair of the all the valid sections associated with the given dataset id.\n\t// OUTPUT:  DatasetRecord, mapping the list of Sections to its associated dataset id\n\tpublic async turnDatasetToSection(id: string): Promise<DatasetRecord> {\n\t\t// tracks number of sections in a given dataset and is initialized to 0\n\n\t\t// where each promise is appended to for each course object\n\t\tconst allPromises: any[] = [];\n\t\tconst sections: Section[] = [];\n\n\t\t// list of all courses under the dataset file\n\t\tconst path = await fs.readdir(`./data/${id}/courses/`);\n\t\tfor (const course of path) {\n\t\t\tconst promise = fs\n\t\t\t\t.readJson(`./data/${id}/courses/${course}`)\n\t\t\t\t.then(async (file) => {\n\t\t\t\t\tif (file.result.length === 0) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\tconst validSectionsInCourse = this.filterValidSections(file);\n\t\t\t\t\tfile.result = validSectionsInCourse;\n\t\t\t\t\t// turn all valid sections to Sections objects\n\t\t\t\t\tvalidSectionsInCourse.forEach((section: any) => {\n\t\t\t\t\t\tif (section.Section === \"overall\") {\n\t\t\t\t\t\t\tconst newSection = this.createSection(section, id);\n\t\t\t\t\t\t\tnewSection.setMfield(newSection.getMFieldIndex(\"year\"), SectionsParser.OVERALL_SECTION_YEAR);\n\t\t\t\t\t\t\tsections.push(newSection);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsections.push(this.createSection(section, id));\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\treturn { id, file };\n\t\t\t\t})\n\t\t\t\t.catch((err) => {\n\t\t\t\t\tthrow err;\n\t\t\t\t});\n\n\t\t\tallPromises.push(promise);\n\t\t}\n\n\t\tawait Promise.all(allPromises);\n\t\tconst datasetRecord: DatasetRecord = { id: id, sections: sections };\n\t\treturn datasetRecord;\n\t}\n\n\t// REQUIRES: jsonData - parsed JSON Object of a valid section from the result key in a given course file\n\t// EFFECTS: Retrieves the fields of the section and populate the values of the sfields and mfields into a Section object\n\t// OUTPUT: newly populated and created Section object\n\tprivate createSection(jsonData: any, setId: string): Section {\n\t\tconst result = jsonData;\n\n\t\tconst [uuid, id, title, instructor, dept]: string[] = this.sFields.map((sfield) => {\n\t\t\tconst value = result[sfield] as string;\n\t\t\treturn value;\n\t\t});\n\n\t\tconst sectionSfields: Sfield = {\n\t\t\tuuid: String(uuid),\n\t\t\tid: String(id),\n\t\t\ttitle: String(title),\n\t\t\tinstructor: String(instructor),\n\t\t\tdept: String(dept),\n\t\t};\n\n\t\t//console.log(typeof sectionSfields.uuid)\n\n\t\tconst [year, avg, pass, fail, audit] = this.mFields.map((mfield) => result[mfield]);\n\n\t\tconst sectionMfields: Mfield = {\n\t\t\tyear: Number(year),\n\t\t\tavg: Number(avg),\n\t\t\tpass: Number(pass),\n\t\t\tfail: Number(fail),\n\t\t\taudit: Number(audit),\n\t\t};\n\n\t\tconst newSection: Section = new Section(setId, sectionMfields, sectionSfields);\n\t\t//console.log(typeof newSection.getSfields().id)\n\t\treturn newSection;\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"0fbc5a3f4686eb2e4e4a6804ff1a7ae353e0ccaa","contentHash":"259e66f608894ba574a0bf1d27eaa71847f679d02c17f2a03018ce045ba2819a"},"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\sections\\Section.ts":{"path":"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\sections\\Section.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":16,"column":8},"end":{"line":16,"column":29}},"2":{"start":{"line":19,"column":8},"end":{"line":19,"column":30}},"3":{"start":{"line":22,"column":21},"end":{"line":22,"column":61}},"4":{"start":{"line":23,"column":8},"end":{"line":25,"column":9}},"5":{"start":{"line":24,"column":12},"end":{"line":24,"column":45}},"6":{"start":{"line":26,"column":8},"end":{"line":26,"column":44}},"7":{"start":{"line":29,"column":21},"end":{"line":29,"column":66}},"8":{"start":{"line":30,"column":8},"end":{"line":32,"column":9}},"9":{"start":{"line":31,"column":12},"end":{"line":31,"column":45}},"10":{"start":{"line":33,"column":8},"end":{"line":33,"column":44}},"11":{"start":{"line":36,"column":21},"end":{"line":36,"column":61}},"12":{"start":{"line":37,"column":8},"end":{"line":39,"column":9}},"13":{"start":{"line":38,"column":12},"end":{"line":38,"column":45}},"14":{"start":{"line":40,"column":8},"end":{"line":40,"column":42}},"15":{"start":{"line":43,"column":21},"end":{"line":43,"column":66}},"16":{"start":{"line":44,"column":8},"end":{"line":46,"column":9}},"17":{"start":{"line":45,"column":12},"end":{"line":45,"column":45}},"18":{"start":{"line":47,"column":8},"end":{"line":47,"column":42}},"19":{"start":{"line":50,"column":21},"end":{"line":50,"column":66}},"20":{"start":{"line":51,"column":8},"end":{"line":51,"column":36}},"21":{"start":{"line":54,"column":21},"end":{"line":54,"column":61}},"22":{"start":{"line":55,"column":8},"end":{"line":55,"column":36}},"23":{"start":{"line":58,"column":8},"end":{"line":58,"column":31}},"24":{"start":{"line":61,"column":8},"end":{"line":61,"column":28}},"25":{"start":{"line":62,"column":8},"end":{"line":62,"column":37}},"26":{"start":{"line":65,"column":8},"end":{"line":65,"column":24}},"27":{"start":{"line":66,"column":8},"end":{"line":66,"column":33}},"28":{"start":{"line":69,"column":8},"end":{"line":69,"column":29}},"29":{"start":{"line":70,"column":8},"end":{"line":70,"column":39}},"30":{"start":{"line":73,"column":8},"end":{"line":73,"column":40}},"31":{"start":{"line":74,"column":8},"end":{"line":74,"column":49}},"32":{"start":{"line":77,"column":8},"end":{"line":77,"column":28}},"33":{"start":{"line":78,"column":8},"end":{"line":78,"column":37}},"34":{"start":{"line":81,"column":8},"end":{"line":81,"column":28}},"35":{"start":{"line":82,"column":8},"end":{"line":82,"column":37}},"36":{"start":{"line":85,"column":8},"end":{"line":85,"column":26}},"37":{"start":{"line":86,"column":8},"end":{"line":86,"column":35}},"38":{"start":{"line":89,"column":8},"end":{"line":89,"column":28}},"39":{"start":{"line":90,"column":8},"end":{"line":90,"column":37}},"40":{"start":{"line":93,"column":8},"end":{"line":93,"column":28}},"41":{"start":{"line":94,"column":8},"end":{"line":94,"column":37}},"42":{"start":{"line":97,"column":8},"end":{"line":97,"column":30}},"43":{"start":{"line":98,"column":8},"end":{"line":98,"column":39}},"44":{"start":{"line":101,"column":8},"end":{"line":101,"column":30}},"45":{"start":{"line":104,"column":8},"end":{"line":104,"column":25}},"46":{"start":{"line":107,"column":8},"end":{"line":107,"column":23}},"47":{"start":{"line":110,"column":8},"end":{"line":110,"column":26}},"48":{"start":{"line":113,"column":8},"end":{"line":113,"column":31}},"49":{"start":{"line":116,"column":8},"end":{"line":116,"column":25}},"50":{"start":{"line":119,"column":8},"end":{"line":119,"column":25}},"51":{"start":{"line":122,"column":8},"end":{"line":122,"column":24}},"52":{"start":{"line":125,"column":8},"end":{"line":125,"column":25}},"53":{"start":{"line":128,"column":8},"end":{"line":128,"column":25}},"54":{"start":{"line":131,"column":8},"end":{"line":131,"column":26}},"55":{"start":{"line":136,"column":8},"end":{"line":152,"column":10}},"56":{"start":{"line":155,"column":8},"end":{"line":155,"column":31}},"57":{"start":{"line":156,"column":8},"end":{"line":156,"column":32}},"58":{"start":{"line":157,"column":8},"end":{"line":157,"column":32}},"59":{"start":{"line":158,"column":8},"end":{"line":158,"column":33}},"60":{"start":{"line":159,"column":8},"end":{"line":159,"column":33}},"61":{"start":{"line":160,"column":8},"end":{"line":160,"column":35}},"62":{"start":{"line":161,"column":8},"end":{"line":161,"column":31}},"63":{"start":{"line":162,"column":8},"end":{"line":162,"column":33}},"64":{"start":{"line":163,"column":8},"end":{"line":163,"column":33}},"65":{"start":{"line":164,"column":8},"end":{"line":164,"column":29}},"66":{"start":{"line":165,"column":8},"end":{"line":165,"column":35}},"67":{"start":{"line":166,"column":8},"end":{"line":166,"column":45}},"68":{"start":{"line":167,"column":8},"end":{"line":167,"column":33}},"69":{"start":{"line":170,"column":0},"end":{"line":170,"column":26}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":15,"column":4},"end":{"line":15,"column":5}},"loc":{"start":{"line":15,"column":17},"end":{"line":17,"column":5}},"line":15},"1":{"name":"(anonymous_1)","decl":{"start":{"line":18,"column":4},"end":{"line":18,"column":5}},"loc":{"start":{"line":18,"column":22},"end":{"line":20,"column":5}},"line":18},"2":{"name":"(anonymous_2)","decl":{"start":{"line":21,"column":4},"end":{"line":21,"column":5}},"loc":{"start":{"line":21,"column":29},"end":{"line":27,"column":5}},"line":21},"3":{"name":"(anonymous_3)","decl":{"start":{"line":28,"column":4},"end":{"line":28,"column":5}},"loc":{"start":{"line":28,"column":29},"end":{"line":34,"column":5}},"line":28},"4":{"name":"(anonymous_4)","decl":{"start":{"line":35,"column":4},"end":{"line":35,"column":5}},"loc":{"start":{"line":35,"column":28},"end":{"line":41,"column":5}},"line":35},"5":{"name":"(anonymous_5)","decl":{"start":{"line":42,"column":4},"end":{"line":42,"column":5}},"loc":{"start":{"line":42,"column":28},"end":{"line":48,"column":5}},"line":42},"6":{"name":"(anonymous_6)","decl":{"start":{"line":49,"column":4},"end":{"line":49,"column":5}},"loc":{"start":{"line":49,"column":27},"end":{"line":52,"column":5}},"line":49},"7":{"name":"(anonymous_7)","decl":{"start":{"line":53,"column":4},"end":{"line":53,"column":5}},"loc":{"start":{"line":53,"column":27},"end":{"line":56,"column":5}},"line":53},"8":{"name":"(anonymous_8)","decl":{"start":{"line":57,"column":4},"end":{"line":57,"column":5}},"loc":{"start":{"line":57,"column":20},"end":{"line":59,"column":5}},"line":57},"9":{"name":"(anonymous_9)","decl":{"start":{"line":60,"column":4},"end":{"line":60,"column":5}},"loc":{"start":{"line":60,"column":21},"end":{"line":63,"column":5}},"line":60},"10":{"name":"(anonymous_10)","decl":{"start":{"line":64,"column":4},"end":{"line":64,"column":5}},"loc":{"start":{"line":64,"column":17},"end":{"line":67,"column":5}},"line":64},"11":{"name":"(anonymous_11)","decl":{"start":{"line":68,"column":4},"end":{"line":68,"column":5}},"loc":{"start":{"line":68,"column":23},"end":{"line":71,"column":5}},"line":68},"12":{"name":"(anonymous_12)","decl":{"start":{"line":72,"column":4},"end":{"line":72,"column":5}},"loc":{"start":{"line":72,"column":33},"end":{"line":75,"column":5}},"line":72},"13":{"name":"(anonymous_13)","decl":{"start":{"line":76,"column":4},"end":{"line":76,"column":5}},"loc":{"start":{"line":76,"column":21},"end":{"line":79,"column":5}},"line":76},"14":{"name":"(anonymous_14)","decl":{"start":{"line":80,"column":4},"end":{"line":80,"column":5}},"loc":{"start":{"line":80,"column":21},"end":{"line":83,"column":5}},"line":80},"15":{"name":"(anonymous_15)","decl":{"start":{"line":84,"column":4},"end":{"line":84,"column":5}},"loc":{"start":{"line":84,"column":19},"end":{"line":87,"column":5}},"line":84},"16":{"name":"(anonymous_16)","decl":{"start":{"line":88,"column":4},"end":{"line":88,"column":5}},"loc":{"start":{"line":88,"column":21},"end":{"line":91,"column":5}},"line":88},"17":{"name":"(anonymous_17)","decl":{"start":{"line":92,"column":4},"end":{"line":92,"column":5}},"loc":{"start":{"line":92,"column":21},"end":{"line":95,"column":5}},"line":92},"18":{"name":"(anonymous_18)","decl":{"start":{"line":96,"column":4},"end":{"line":96,"column":5}},"loc":{"start":{"line":96,"column":23},"end":{"line":99,"column":5}},"line":96},"19":{"name":"(anonymous_19)","decl":{"start":{"line":100,"column":4},"end":{"line":100,"column":5}},"loc":{"start":{"line":100,"column":15},"end":{"line":102,"column":5}},"line":100},"20":{"name":"(anonymous_20)","decl":{"start":{"line":103,"column":4},"end":{"line":103,"column":5}},"loc":{"start":{"line":103,"column":14},"end":{"line":105,"column":5}},"line":103},"21":{"name":"(anonymous_21)","decl":{"start":{"line":106,"column":4},"end":{"line":106,"column":5}},"loc":{"start":{"line":106,"column":12},"end":{"line":108,"column":5}},"line":106},"22":{"name":"(anonymous_22)","decl":{"start":{"line":109,"column":4},"end":{"line":109,"column":5}},"loc":{"start":{"line":109,"column":15},"end":{"line":111,"column":5}},"line":109},"23":{"name":"(anonymous_23)","decl":{"start":{"line":112,"column":4},"end":{"line":112,"column":5}},"loc":{"start":{"line":112,"column":20},"end":{"line":114,"column":5}},"line":112},"24":{"name":"(anonymous_24)","decl":{"start":{"line":115,"column":4},"end":{"line":115,"column":5}},"loc":{"start":{"line":115,"column":14},"end":{"line":117,"column":5}},"line":115},"25":{"name":"(anonymous_25)","decl":{"start":{"line":118,"column":4},"end":{"line":118,"column":5}},"loc":{"start":{"line":118,"column":14},"end":{"line":120,"column":5}},"line":118},"26":{"name":"(anonymous_26)","decl":{"start":{"line":121,"column":4},"end":{"line":121,"column":5}},"loc":{"start":{"line":121,"column":13},"end":{"line":123,"column":5}},"line":121},"27":{"name":"(anonymous_27)","decl":{"start":{"line":124,"column":4},"end":{"line":124,"column":5}},"loc":{"start":{"line":124,"column":14},"end":{"line":126,"column":5}},"line":124},"28":{"name":"(anonymous_28)","decl":{"start":{"line":127,"column":4},"end":{"line":127,"column":5}},"loc":{"start":{"line":127,"column":14},"end":{"line":129,"column":5}},"line":127},"29":{"name":"(anonymous_29)","decl":{"start":{"line":130,"column":4},"end":{"line":130,"column":5}},"loc":{"start":{"line":130,"column":15},"end":{"line":132,"column":5}},"line":130},"30":{"name":"(anonymous_30)","decl":{"start":{"line":135,"column":4},"end":{"line":135,"column":5}},"loc":{"start":{"line":135,"column":20},"end":{"line":153,"column":5}},"line":135},"31":{"name":"(anonymous_31)","decl":{"start":{"line":154,"column":4},"end":{"line":154,"column":5}},"loc":{"start":{"line":154,"column":41},"end":{"line":168,"column":5}},"line":154}},"branchMap":{"0":{"loc":{"start":{"line":23,"column":8},"end":{"line":25,"column":9}},"type":"if","locations":[{"start":{"line":23,"column":8},"end":{"line":25,"column":9}},{"start":{"line":23,"column":8},"end":{"line":25,"column":9}}],"line":23},"1":{"loc":{"start":{"line":23,"column":12},"end":{"line":23,"column":44}},"type":"binary-expr","locations":[{"start":{"line":23,"column":12},"end":{"line":23,"column":21}},{"start":{"line":23,"column":25},"end":{"line":23,"column":44}}],"line":23},"2":{"loc":{"start":{"line":30,"column":8},"end":{"line":32,"column":9}},"type":"if","locations":[{"start":{"line":30,"column":8},"end":{"line":32,"column":9}},{"start":{"line":30,"column":8},"end":{"line":32,"column":9}}],"line":30},"3":{"loc":{"start":{"line":30,"column":12},"end":{"line":30,"column":44}},"type":"binary-expr","locations":[{"start":{"line":30,"column":12},"end":{"line":30,"column":21}},{"start":{"line":30,"column":25},"end":{"line":30,"column":44}}],"line":30},"4":{"loc":{"start":{"line":37,"column":8},"end":{"line":39,"column":9}},"type":"if","locations":[{"start":{"line":37,"column":8},"end":{"line":39,"column":9}},{"start":{"line":37,"column":8},"end":{"line":39,"column":9}}],"line":37},"5":{"loc":{"start":{"line":37,"column":12},"end":{"line":37,"column":44}},"type":"binary-expr","locations":[{"start":{"line":37,"column":12},"end":{"line":37,"column":21}},{"start":{"line":37,"column":25},"end":{"line":37,"column":44}}],"line":37},"6":{"loc":{"start":{"line":44,"column":8},"end":{"line":46,"column":9}},"type":"if","locations":[{"start":{"line":44,"column":8},"end":{"line":46,"column":9}},{"start":{"line":44,"column":8},"end":{"line":46,"column":9}}],"line":44},"7":{"loc":{"start":{"line":44,"column":12},"end":{"line":44,"column":44}},"type":"binary-expr","locations":[{"start":{"line":44,"column":12},"end":{"line":44,"column":21}},{"start":{"line":44,"column":25},"end":{"line":44,"column":44}}],"line":44}},"s":{"0":1,"1":0,"2":0,"3":50060,"4":50060,"5":0,"6":50060,"7":0,"8":0,"9":0,"10":0,"11":4077650,"12":4077650,"13":0,"14":4077650,"15":1951212,"16":1951212,"17":0,"18":1951212,"19":0,"20":0,"21":50060,"22":50060,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":131378,"57":131378,"58":131378,"59":131378,"60":131378,"61":131378,"62":131378,"63":131378,"64":131378,"65":131378,"66":131378,"67":131378,"68":131378,"69":1},"f":{"0":0,"1":0,"2":50060,"3":0,"4":4077650,"5":1951212,"6":0,"7":50060,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":131378},"b":{"0":[0,50060],"1":[50060,50060],"2":[0,0],"3":[0,0],"4":[0,4077650],"5":[4077650,4077650],"6":[0,1951212],"7":[1951212,1951212]},"inputSourceMap":{"version":3,"file":"C:/Users/oreak/IdeaProjects/project_team059/src/controller/sections/Section.ts","sources":["C:/Users/oreak/IdeaProjects/project_team059/src/controller/sections/Section.ts"],"names":[],"mappings":";;AAgBA,MAAqB,OAAO;IACnB,SAAS,CAAS;IAClB,IAAI,CAAS;IACb,EAAE,CAAS;IACX,KAAK,CAAS;IACd,UAAU,CAAS;IACnB,IAAI,CAAS;IAEb,IAAI,CAAS;IACb,GAAG,CAAS;IACZ,IAAI,CAAS;IACb,IAAI,CAAS;IACb,KAAK,CAAS;IAEf,UAAU;QAChB,OAAO,IAAI,CAAC,QAAQ,CAAC;IACtB,CAAC;IAEM,UAAU,CAAC,KAAa;QAC9B,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;IACvB,CAAC;IAEM,SAAS,CAAC,KAAa,EAAE,MAAc;QAC7C,MAAM,IAAI,GAAqB,CAAC,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;QACxE,IAAI,KAAK,GAAG,CAAC,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,EAAE;YACrC,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;SACjC;QACD,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,MAAM,CAAC;IACrC,CAAC;IAEM,SAAS,CAAC,KAAa,EAAE,MAAc;QAC7C,MAAM,IAAI,GAAqB,CAAC,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,YAAY,EAAE,MAAM,CAAC,CAAC;QAC7E,IAAI,KAAK,GAAG,CAAC,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,EAAE;YACrC,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;SACjC;QACD,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,MAAM,CAAC;IACrC,CAAC;IAUM,gBAAgB,CAAC,KAAa;QACpC,MAAM,IAAI,GAAqB,CAAC,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;QACxE,IAAI,KAAK,GAAG,CAAC,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,EAAE;YACrC,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;SACjC;QACD,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;IACnC,CAAC;IAEM,gBAAgB,CAAC,KAAa;QACpC,MAAM,IAAI,GAAqB,CAAC,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,YAAY,EAAE,MAAM,CAAC,CAAC;QAC7E,IAAI,KAAK,GAAG,CAAC,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,EAAE;YACrC,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;SACjC;QACD,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;IACnC,CAAC;IAEM,cAAc,CAAC,MAAc;QACnC,MAAM,IAAI,GAAqB,CAAC,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,YAAY,EAAE,MAAM,CAAC,CAAC;QAC7E,OAAO,IAAI,CAAC,OAAO,CAAC,MAAsB,CAAC,CAAC;IAE7C,CAAC;IAEM,cAAc,CAAC,MAAc;QACnC,MAAM,IAAI,GAAqB,CAAC,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;QACxE,OAAO,IAAI,CAAC,OAAO,CAAC,MAAsB,CAAC,CAAC;IAE7C,CAAC;IAEM,QAAQ,CAAC,KAAa;QAC5B,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;IACxB,CAAC;IAEM,OAAO,CAAC,OAAe;QAC7B,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC;QACpB,IAAI,CAAC,QAAQ,CAAC,IAAI,GAAG,OAAO,CAAC;IAC9B,CAAC;IAEM,KAAK,CAAC,KAAa;QACzB,IAAI,CAAC,EAAE,GAAG,KAAK,CAAC;QAChB,IAAI,CAAC,QAAQ,CAAC,EAAE,GAAG,KAAK,CAAC;IAC1B,CAAC;IAEM,QAAQ,CAAC,QAAgB;QAC/B,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC;QACrB,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,QAAQ,CAAC;IAChC,CAAC;IAEM,aAAa,CAAC,aAAqB;QACzC,IAAI,CAAC,UAAU,GAAG,aAAa,CAAC;QAChC,IAAI,CAAC,QAAQ,CAAC,UAAU,GAAG,aAAa,CAAC;IAC1C,CAAC;IAEM,OAAO,CAAC,OAAe;QAC7B,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC;QACpB,IAAI,CAAC,QAAQ,CAAC,IAAI,GAAG,OAAO,CAAC;IAC9B,CAAC;IAEM,OAAO,CAAC,OAAe;QAC7B,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC;QACpB,IAAI,CAAC,QAAQ,CAAC,IAAI,GAAG,OAAO,CAAC;IAC9B,CAAC;IAEM,MAAM,CAAC,MAAc;QAC3B,IAAI,CAAC,GAAG,GAAG,MAAM,CAAC;QAClB,IAAI,CAAC,QAAQ,CAAC,GAAG,GAAG,MAAM,CAAC;IAC5B,CAAC;IAEM,OAAO,CAAC,OAAe;QAC7B,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC;QACpB,IAAI,CAAC,QAAQ,CAAC,IAAI,GAAG,OAAO,CAAC;IAC9B,CAAC;IAEM,OAAO,CAAC,OAAe;QAC7B,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC;QACpB,IAAI,CAAC,QAAQ,CAAC,IAAI,GAAG,OAAO,CAAC;IAC9B,CAAC;IAEM,QAAQ,CAAC,QAAgB;QAC/B,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC;QACtB,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,QAAQ,CAAC;IAChC,CAAC;IAEM,QAAQ;QACd,OAAO,IAAI,CAAC,SAAS,CAAC;IACvB,CAAC;IAEM,OAAO;QACb,OAAO,IAAI,CAAC,IAAI,CAAC;IAClB,CAAC;IAEM,KAAK;QACX,OAAO,IAAI,CAAC,EAAE,CAAC;IAChB,CAAC;IAEM,QAAQ;QACd,OAAO,IAAI,CAAC,KAAK,CAAC;IACnB,CAAC;IAEM,aAAa;QACnB,OAAO,IAAI,CAAC,UAAU,CAAC;IACxB,CAAC;IAEM,OAAO;QACb,OAAO,IAAI,CAAC,IAAI,CAAC;IAClB,CAAC;IAEM,OAAO;QACb,OAAO,IAAI,CAAC,IAAI,CAAC;IAClB,CAAC;IAEM,MAAM;QACZ,OAAO,IAAI,CAAC,GAAG,CAAC;IACjB,CAAC;IAEM,OAAO;QACb,OAAO,IAAI,CAAC,IAAI,CAAC;IAClB,CAAC;IAEM,OAAO;QACb,OAAO,IAAI,CAAC,IAAI,CAAC;IAClB,CAAC;IAEM,QAAQ;QACd,OAAO,IAAI,CAAC,KAAK,CAAC;IACnB,CAAC;IAEO,QAAQ,CAAS;IACjB,QAAQ,CAAS;IAEjB,aAAa;QACpB,OAAO;YACN,KAAK,EAAE,IAAI,CAAC,QAAQ,EAAE;YACtB,OAAO,EAAE;gBACR,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI;gBACxB,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE;gBACpB,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK;gBAC1B,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,UAAU;gBACpC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI;aACxB;YACD,OAAO,EAAE;gBACR,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI;gBACxB,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,GAAG;gBACtB,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI;gBACxB,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI;gBACxB,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK;aAC1B;SACD,CAAC;IACH,CAAC;IAED,YAAY,KAAa,EAAE,OAAe,EAAE,OAAe;QAC1D,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QAExB,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;QACzB,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;QACzB,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;QAC3B,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC;QACvB,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;QAEzB,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;QACzB,IAAI,CAAC,EAAE,GAAG,OAAO,CAAC,EAAE,CAAC;QACrB,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;QAC3B,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;QACrC,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;IAC1B,CAAC;CACD;AApND,0BAoNC","sourcesContent":["export interface Sfield {\n\tuuid: string;\n\tid: string;\n\ttitle: string;\n\tinstructor: string;\n\tdept: string;\n}\n\nexport interface Mfield {\n\tyear: number;\n\tavg: number;\n\tpass: number;\n\tfail: number;\n\taudit: number;\n}\n\nexport default class Section {\n\tprivate datasetId: string;\n\tprivate uuid: string;\n\tprivate id: string;\n\tprivate title: string;\n\tprivate instructor: string;\n\tprivate dept: string;\n\n\tprivate year: number;\n\tprivate avg: number;\n\tprivate pass: number;\n\tprivate fail: number;\n\tprivate audit: number;\n\n\tpublic getMfields(): Mfield {\n\t\treturn this._mfields;\n\t}\n\n\tpublic setMfields(value: Mfield): void {\n\t\tthis._mfields = value;\n\t}\n\n\tpublic setMfield(index: number, newVal: number): void {\n\t\tconst keys: (keyof Mfield)[] = [\"year\", \"avg\", \"pass\", \"fail\", \"audit\"];\n\t\tif (index < 0 || index > keys.length) {\n\t\t\tthrow new Error(\"Out of bounds\");\n\t\t}\n\t\tthis._mfields[keys[index]] = newVal;\n\t}\n\n\tpublic setSField(index: number, newVal: string): void {\n\t\tconst keys: (keyof Sfield)[] = [\"uuid\", \"id\", \"title\", \"instructor\", \"dept\"];\n\t\tif (index < 0 || index > keys.length) {\n\t\t\tthrow new Error(\"Out of bounds\");\n\t\t}\n\t\tthis._sfields[keys[index]] = newVal;\n\t}\n\t//\n\t// public getSfields(): Sfield {\n\t// \treturn this._sfields;\n\t// }\n\t//\n\t// public setSfields(value: Sfield): void {\n\t// \tthis._sfields = value;\n\t// }\n\n\tpublic getMFieldByIndex(index: number): number {\n\t\tconst keys: (keyof Mfield)[] = [\"year\", \"avg\", \"pass\", \"fail\", \"audit\"];\n\t\tif (index < 0 || index > keys.length) {\n\t\t\tthrow new Error(\"Out of bounds\");\n\t\t}\n\t\treturn this._mfields[keys[index]];\n\t}\n\n\tpublic getSFieldByIndex(index: number): string {\n\t\tconst keys: (keyof Sfield)[] = [\"uuid\", \"id\", \"title\", \"instructor\", \"dept\"];\n\t\tif (index < 0 || index > keys.length) {\n\t\t\tthrow new Error(\"Out of bounds\");\n\t\t}\n\t\treturn this._sfields[keys[index]];\n\t}\n\n\tpublic getSFieldIndex(sfield: string): number {\n\t\tconst keys: (keyof Sfield)[] = [\"uuid\", \"id\", \"title\", \"instructor\", \"dept\"];\n\t\treturn keys.indexOf(sfield as keyof Sfield);\n\t\t// -1 if index is not found\n\t}\n\n\tpublic getMFieldIndex(mfield: string): number {\n\t\tconst keys: (keyof Mfield)[] = [\"year\", \"avg\", \"pass\", \"fail\", \"audit\"];\n\t\treturn keys.indexOf(mfield as keyof Mfield);\n\t\t// -1 if index is not found\n\t}\n\n\tpublic setSetID(newId: string): void {\n\t\tthis.datasetId = newId;\n\t}\n\n\tpublic setUuid(newUuid: string): void {\n\t\tthis.uuid = newUuid;\n\t\tthis._sfields.uuid = newUuid;\n\t}\n\n\tpublic setId(newId: string): void {\n\t\tthis.id = newId;\n\t\tthis._sfields.id = newId;\n\t}\n\n\tpublic setTitle(newTitle: string): void {\n\t\tthis.uuid = newTitle;\n\t\tthis._sfields.title = newTitle;\n\t}\n\n\tpublic setInstructor(newInstructor: string): void {\n\t\tthis.instructor = newInstructor;\n\t\tthis._sfields.instructor = newInstructor;\n\t}\n\n\tpublic setDept(newDept: string): void {\n\t\tthis.dept = newDept;\n\t\tthis._sfields.dept = newDept;\n\t}\n\n\tpublic setYear(newYear: number): void {\n\t\tthis.year = newYear;\n\t\tthis._mfields.year = newYear;\n\t}\n\n\tpublic setAvg(newAvg: number): void {\n\t\tthis.avg = newAvg;\n\t\tthis._mfields.avg = newAvg;\n\t}\n\n\tpublic setPass(newPass: number): void {\n\t\tthis.pass = newPass;\n\t\tthis._mfields.pass = newPass;\n\t}\n\n\tpublic setFail(newFail: number): void {\n\t\tthis.fail = newFail;\n\t\tthis._mfields.fail = newFail;\n\t}\n\n\tpublic setAudit(newAudit: number): void {\n\t\tthis.audit = newAudit;\n\t\tthis._mfields.audit = newAudit;\n\t}\n\n\tpublic getSetID(): string {\n\t\treturn this.datasetId;\n\t}\n\n\tpublic getUuid(): string {\n\t\treturn this.uuid;\n\t}\n\n\tpublic getId(): string {\n\t\treturn this.id;\n\t}\n\n\tpublic getTitle(): string {\n\t\treturn this.title;\n\t}\n\n\tpublic getInstructor(): string {\n\t\treturn this.instructor;\n\t}\n\n\tpublic getDept(): string {\n\t\treturn this.dept;\n\t}\n\n\tpublic getYear(): number {\n\t\treturn this.year;\n\t}\n\n\tpublic getAvg(): number {\n\t\treturn this.avg;\n\t}\n\n\tpublic getPass(): number {\n\t\treturn this.pass;\n\t}\n\n\tpublic getFail(): number {\n\t\treturn this.fail;\n\t}\n\n\tpublic getAudit(): number {\n\t\treturn this.audit;\n\t}\n\n\tprivate _mfields: Mfield;\n\tprivate _sfields: Sfield;\n\n\tprivate convertToJSON(): { setID: string; sFields: Sfield; mFields: Mfield } {\n\t\treturn {\n\t\t\tsetID: this.getSetID(),\n\t\t\tsFields: {\n\t\t\t\tuuid: this._sfields.uuid,\n\t\t\t\tid: this._sfields.id,\n\t\t\t\ttitle: this._sfields.title,\n\t\t\t\tinstructor: this._sfields.instructor,\n\t\t\t\tdept: this._sfields.dept,\n\t\t\t},\n\t\t\tmFields: {\n\t\t\t\tyear: this._mfields.year,\n\t\t\t\tavg: this._mfields.avg,\n\t\t\t\tpass: this._mfields.pass,\n\t\t\t\tfail: this._mfields.fail,\n\t\t\t\taudit: this._mfields.audit,\n\t\t\t},\n\t\t};\n\t}\n\n\tconstructor(setId: string, mfields: Mfield, sfields: Sfield) {\n\t\tthis.datasetId = setId;\n\t\tthis._mfields = mfields;\n\t\tthis._sfields = sfields;\n\n\t\tthis.fail = mfields.fail;\n\t\tthis.pass = mfields.pass;\n\t\tthis.audit = mfields.audit;\n\t\tthis.avg = mfields.avg;\n\t\tthis.year = mfields.year;\n\n\t\tthis.uuid = sfields.uuid;\n\t\tthis.id = sfields.id;\n\t\tthis.title = sfields.title;\n\t\tthis.instructor = sfields.instructor;\n\t\tthis.dept = sfields.dept;\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"007c9e87ba461256aaa14a4c9482764f1b0acb91","contentHash":"21b0943c8caea9cecb6c213f583e70fc3f60f3dffb2a5286277d3f468fb4c268"},"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\sections\\SectionDiskWriter.ts":{"path":"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\sections\\SectionDiskWriter.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":19},"end":{"line":6,"column":55}},"4":{"start":{"line":7,"column":16},"end":{"line":7,"column":49}},"5":{"start":{"line":8,"column":25},"end":{"line":8,"column":69}},"6":{"start":{"line":11,"column":8},"end":{"line":11,"column":16}},"7":{"start":{"line":14,"column":23},"end":{"line":14,"column":53}},"8":{"start":{"line":15,"column":20},"end":{"line":15,"column":59}},"9":{"start":{"line":16,"column":8},"end":{"line":16,"column":46}},"10":{"start":{"line":19,"column":28},"end":{"line":19,"column":30}},"11":{"start":{"line":20,"column":8},"end":{"line":34,"column":9}},"12":{"start":{"line":21,"column":25},"end":{"line":21,"column":28}},"13":{"start":{"line":22,"column":12},"end":{"line":33,"column":13}},"14":{"start":{"line":23,"column":39},"end":{"line":31,"column":18}},"15":{"start":{"line":24,"column":37},"end":{"line":24,"column":57}},"16":{"start":{"line":25,"column":20},"end":{"line":27,"column":21}},"17":{"start":{"line":26,"column":24},"end":{"line":26,"column":36}},"18":{"start":{"line":28,"column":50},"end":{"line":28,"column":84}},"19":{"start":{"line":29,"column":20},"end":{"line":29,"column":60}},"20":{"start":{"line":30,"column":20},"end":{"line":30,"column":46}},"21":{"start":{"line":32,"column":16},"end":{"line":32,"column":49}},"22":{"start":{"line":35,"column":31},"end":{"line":35,"column":61}},"23":{"start":{"line":36,"column":8},"end":{"line":36,"column":58}},"24":{"start":{"line":39,"column":20},"end":{"line":41,"column":9}},"25":{"start":{"line":42,"column":21},"end":{"line":42,"column":40}},"26":{"start":{"line":43,"column":8},"end":{"line":43,"column":71}},"27":{"start":{"line":46,"column":34},"end":{"line":46,"column":36}},"28":{"start":{"line":47,"column":8},"end":{"line":52,"column":9}},"29":{"start":{"line":48,"column":12},"end":{"line":51,"column":13}},"30":{"start":{"line":49,"column":35},"end":{"line":49,"column":117}},"31":{"start":{"line":50,"column":16},"end":{"line":50,"column":51}},"32":{"start":{"line":53,"column":8},"end":{"line":53,"column":45}},"33":{"start":{"line":56,"column":0},"end":{"line":56,"column":36}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":10,"column":4},"end":{"line":10,"column":5}},"loc":{"start":{"line":10,"column":18},"end":{"line":12,"column":5}},"line":10},"2":{"name":"(anonymous_2)","decl":{"start":{"line":13,"column":4},"end":{"line":13,"column":5}},"loc":{"start":{"line":13,"column":48},"end":{"line":17,"column":5}},"line":13},"3":{"name":"(anonymous_3)","decl":{"start":{"line":18,"column":4},"end":{"line":18,"column":5}},"loc":{"start":{"line":18,"column":37},"end":{"line":37,"column":5}},"line":18},"4":{"name":"(anonymous_4)","decl":{"start":{"line":23,"column":75},"end":{"line":23,"column":76}},"loc":{"start":{"line":23,"column":95},"end":{"line":31,"column":17}},"line":23},"5":{"name":"(anonymous_5)","decl":{"start":{"line":38,"column":4},"end":{"line":38,"column":5}},"loc":{"start":{"line":38,"column":50},"end":{"line":44,"column":5}},"line":38},"6":{"name":"(anonymous_6)","decl":{"start":{"line":45,"column":4},"end":{"line":45,"column":5}},"loc":{"start":{"line":45,"column":49},"end":{"line":54,"column":5}},"line":45}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":22,"column":12},"end":{"line":33,"column":13}},"type":"if","locations":[{"start":{"line":22,"column":12},"end":{"line":33,"column":13}},{"start":{"line":22,"column":12},"end":{"line":33,"column":13}}],"line":22},"4":{"loc":{"start":{"line":22,"column":16},"end":{"line":22,"column":67}},"type":"binary-expr","locations":[{"start":{"line":22,"column":16},"end":{"line":22,"column":42}},{"start":{"line":22,"column":46},"end":{"line":22,"column":67}}],"line":22},"5":{"loc":{"start":{"line":25,"column":20},"end":{"line":27,"column":21}},"type":"if","locations":[{"start":{"line":25,"column":20},"end":{"line":27,"column":21}},{"start":{"line":25,"column":20},"end":{"line":27,"column":21}}],"line":25},"6":{"loc":{"start":{"line":48,"column":12},"end":{"line":51,"column":13}},"type":"if","locations":[{"start":{"line":48,"column":12},"end":{"line":51,"column":13}},{"start":{"line":48,"column":12},"end":{"line":51,"column":13}}],"line":48}},"s":{"0":1,"1":3,"2":1,"3":1,"4":1,"5":1,"6":142,"7":41,"8":41,"9":39,"10":39,"11":39,"12":12076,"13":12076,"14":12069,"15":12069,"16":12068,"17":4757,"18":7311,"19":7311,"20":7311,"21":12069,"22":39,"23":38,"24":34,"25":34,"26":34,"27":38,"28":38,"29":12068,"30":7311,"31":7311,"32":38,"33":1},"f":{"0":3,"1":142,"2":41,"3":39,"4":12069,"5":34,"6":38},"b":{"0":[1,1,1],"1":[1,2],"2":[3,3],"3":[12069,7],"4":[12076,12069],"5":[4757,7311],"6":[7311,4757]},"inputSourceMap":{"version":3,"file":"C:/Users/oreak/IdeaProjects/project_team059/src/controller/sections/SectionDiskWriter.ts","sources":["C:/Users/oreak/IdeaProjects/project_team059/src/controller/sections/SectionDiskWriter.ts"],"names":[],"mappings":";;;;;AAAA,wDAA0B;AAC1B,kDAA0B;AAC1B,sEAA8C;AAG9C,MAAqB,iBAAkB,SAAQ,wBAAc;IAG5D;QACC,KAAK,EAAE,CAAC;IACT,CAAC;IAEM,KAAK,CAAC,wBAAwB,CAAC,OAAe,EAAE,EAAU;QAChE,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;QAC9C,MAAM,GAAG,GAAG,MAAM,eAAK,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QAC1C,MAAM,IAAI,CAAC,iBAAiB,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;IACvC,CAAC;IASO,KAAK,CAAC,iBAAiB,CAAC,GAAU,EAAE,EAAU;QACrD,MAAM,WAAW,GAAG,EAAE,CAAC;QAEvB,KAAK,MAAM,GAAG,IAAI,GAAG,CAAC,KAAK,EAAE;YAC5B,MAAM,IAAI,GAAG,GAAG,CAAC;YAEjB,IAAI,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE;gBACxD,MAAM,cAAc,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,QAAQ,EAAE,EAAE;oBAC7E,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;oBAEtC,IAAI,QAAQ,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;wBACjC,OAAO,IAAI,CAAC;qBACZ;oBAED,MAAM,qBAAqB,GAAG,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC;oBACjE,QAAQ,CAAC,MAAM,GAAG,qBAAqB,CAAC;oBAExC,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;gBAC3B,CAAC,CAAC,CAAC;gBAEH,WAAW,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;aACjC;SACD;QAED,MAAM,cAAc,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QACtD,MAAM,IAAI,CAAC,kBAAkB,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC;IACnD,CAAC;IAGM,KAAK,CAAC,oBAAoB,CAAC,EAAU,EAAE,IAAwB,EAAE,OAAe;QACtF,MAAM,GAAG,GAAG;YACX,KAAK,EAAE,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;SAC9B,CAAC;QAEF,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;QACjC,MAAM,kBAAE,CAAC,UAAU,CAAC,UAAU,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;IAChD,CAAC;IAQM,KAAK,CAAC,kBAAkB,CAC9B,cAAiE,EACjE,EAAU;QAEV,MAAM,iBAAiB,GAAG,EAAE,CAAC;QAC7B,KAAK,MAAM,MAAM,IAAI,cAAc,EAAE;YACpC,IAAI,MAAM,EAAE;gBACX,MAAM,UAAU,GAAG,kBAAE,CAAC,UAAU,CAAC,UAAU,EAAE,IAAI,MAAM,CAAC,IAAI,OAAO,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC;gBACtF,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;aACnC;SACD;QACD,MAAM,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;IACtC,CAAC;CACD;AA7ED,oCA6EC","sourcesContent":["import fs from \"fs-extra\";\nimport JSZip from \"jszip\";\nimport SectionsParser from \"./SectionsParser\";\nimport { InsightDatasetKind } from \"../IInsightFacade\";\n\nexport default class SectionDiskWriter extends SectionsParser {\n\t// Every SectionDiskWriter needs to be able to parse sections using SectionsParser\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tpublic async logSectionsDatasetOnDisk(content: string, id: string): Promise<void> {\n\t\tconst buffer = Buffer.from(content, \"base64\");\n\t\tconst zip = await JSZip.loadAsync(buffer);\n\t\tawait this.logSectionDataset(zip, id);\n\t}\n\n\t// REQUIRES: zip - current dataset content as a JSZIP\n\t// \t\t\t  id - name of dataset\n\t// EFFECTS: parses the JSZIP files in the dataset and sorts through each JSON file containing each course, then\n\t// \t\t\tparses the JSON object to obtain the 'result' object and finds all sections,\n\t//          filters only valid sections,\n\t//          write the valid sections with the associated dataset id onto the disk\n\t// OUTPUT: void\n\tprivate async logSectionDataset(zip: JSZip, id: string): Promise<void> {\n\t\tconst allPromises = [];\n\n\t\tfor (const key in zip.files) {\n\t\t\tconst name = key;\n\n\t\t\tif (name.match(/^courses\\/\\w/) && name.match(/^[^.]+$/)) {\n\t\t\t\tconst promiseContent = zip.files[key].async(\"string\").then(async (content0) => {\n\t\t\t\t\tconst jsonData = JSON.parse(content0);\n\n\t\t\t\t\tif (jsonData.result.length === 0) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst validSectionsInCourse = this.filterValidSections(jsonData);\n\t\t\t\t\tjsonData.result = validSectionsInCourse;\n\n\t\t\t\t\treturn { name, jsonData };\n\t\t\t\t});\n\n\t\t\t\tallPromises.push(promiseContent);\n\t\t\t}\n\t\t}\n\n\t\tconst courseDataList = await Promise.all(allPromises);\n\t\tawait this.storeCoursesOnDisk(courseDataList, id);\n\t}\n\n\t// Writes InsightDataset info about a dataset\n\tpublic async logInsightKindToDisk(id: string, kind: InsightDatasetKind, numRows: number): Promise<void> {\n\t\tconst obj = {\n\t\t\ttable: [{ id, kind, numRows }],\n\t\t};\n\t\t//obj.table.push({id: id, kind: kind, numRows: numRows} as never);\n\t\tconst json = JSON.stringify(obj);\n\t\tawait fs.outputFile(`./data/${id}/kind`, json);\n\t}\n\n\t// REQUIRES: courseDataList: list of JSON files associated with course files and their accompanied name in a dataset\n\t// \t\t\t\t\t\t\tex - dataset 'test3' containing the courses CPSC 110 --> {jSON FILE CPSC110, \"CPSC 110\"}\n\t//\t\t\t id: dataset id name\n\t// EFFECTS: takes the list of courses and writes them as a JSON file to be stored on to disk with the following directory:\n\t//\t\t\t\"./data/${id}/${ course name}.json\"\n\t// OUTPUT: void\n\tpublic async storeCoursesOnDisk(\n\t\tcourseDataList: Awaited<null | { jsonData: any; name: string }>[],\n\t\tid: string\n\t): Promise<void> {\n\t\tconst allCoursePromises = [];\n\t\tfor (const course of courseDataList) {\n\t\t\tif (course) {\n\t\t\t\tconst courseData = fs.outputJson(`./data/${id}/${course.name}.json`, course.jsonData);\n\t\t\t\tallCoursePromises.push(courseData);\n\t\t\t}\n\t\t}\n\t\tawait Promise.all(allCoursePromises);\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"dc3d7d4cb02591bb0d1d872827401e3c874e1d5e","contentHash":"a02bc9423c21abce4292a0c66232ae38c6cbffd73ea0c57b5b09047472710008"},"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\rooms\\RoomDiskReader.ts":{"path":"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\rooms\\RoomDiskReader.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":22},"end":{"line":6,"column":63}},"4":{"start":{"line":7,"column":25},"end":{"line":7,"column":53}},"5":{"start":{"line":8,"column":19},"end":{"line":8,"column":55}},"6":{"start":{"line":9,"column":15},"end":{"line":9,"column":49}},"7":{"start":{"line":12,"column":8},"end":{"line":12,"column":16}},"8":{"start":{"line":15,"column":27},"end":{"line":15,"column":59}},"9":{"start":{"line":16,"column":24},"end":{"line":16,"column":47}},"10":{"start":{"line":17,"column":8},"end":{"line":19,"column":9}},"11":{"start":{"line":18,"column":12},"end":{"line":18,"column":72}},"12":{"start":{"line":20,"column":8},"end":{"line":20,"column":59}},"13":{"start":{"line":23,"column":28},"end":{"line":23,"column":30}},"14":{"start":{"line":24,"column":22},"end":{"line":24,"column":24}},"15":{"start":{"line":25,"column":21},"end":{"line":25,"column":76}},"16":{"start":{"line":26,"column":8},"end":{"line":38,"column":9}},"17":{"start":{"line":27,"column":28},"end":{"line":36,"column":14}},"18":{"start":{"line":30,"column":32},"end":{"line":30,"column":61}},"19":{"start":{"line":31,"column":16},"end":{"line":31,"column":36}},"20":{"start":{"line":32,"column":16},"end":{"line":32,"column":36}},"21":{"start":{"line":35,"column":16},"end":{"line":35,"column":26}},"22":{"start":{"line":37,"column":12},"end":{"line":37,"column":38}},"23":{"start":{"line":39,"column":8},"end":{"line":39,"column":39}},"24":{"start":{"line":40,"column":30},"end":{"line":40,"column":54}},"25":{"start":{"line":41,"column":8},"end":{"line":41,"column":29}},"26":{"start":{"line":44,"column":28},"end":{"line":44,"column":30}},"27":{"start":{"line":45,"column":8},"end":{"line":48,"column":11}},"28":{"start":{"line":46,"column":28},"end":{"line":46,"column":57}},"29":{"start":{"line":47,"column":12},"end":{"line":47,"column":38}},"30":{"start":{"line":49,"column":24},"end":{"line":49,"column":54}},"31":{"start":{"line":50,"column":8},"end":{"line":52,"column":11}},"32":{"start":{"line":51,"column":12},"end":{"line":51,"column":55}},"33":{"start":{"line":53,"column":8},"end":{"line":53,"column":29}},"34":{"start":{"line":56,"column":0},"end":{"line":56,"column":33}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":11,"column":4},"end":{"line":11,"column":5}},"loc":{"start":{"line":11,"column":18},"end":{"line":13,"column":5}},"line":11},"2":{"name":"(anonymous_2)","decl":{"start":{"line":14,"column":4},"end":{"line":14,"column":5}},"loc":{"start":{"line":14,"column":56},"end":{"line":21,"column":5}},"line":14},"3":{"name":"(anonymous_3)","decl":{"start":{"line":22,"column":4},"end":{"line":22,"column":5}},"loc":{"start":{"line":22,"column":32},"end":{"line":42,"column":5}},"line":22},"4":{"name":"(anonymous_4)","decl":{"start":{"line":29,"column":22},"end":{"line":29,"column":23}},"loc":{"start":{"line":29,"column":38},"end":{"line":33,"column":13}},"line":29},"5":{"name":"(anonymous_5)","decl":{"start":{"line":34,"column":23},"end":{"line":34,"column":24}},"loc":{"start":{"line":34,"column":32},"end":{"line":36,"column":13}},"line":34},"6":{"name":"(anonymous_6)","decl":{"start":{"line":43,"column":4},"end":{"line":43,"column":5}},"loc":{"start":{"line":43,"column":50},"end":{"line":54,"column":5}},"line":43},"7":{"name":"(anonymous_7)","decl":{"start":{"line":45,"column":24},"end":{"line":45,"column":25}},"loc":{"start":{"line":45,"column":35},"end":{"line":48,"column":9}},"line":45},"8":{"name":"(anonymous_8)","decl":{"start":{"line":50,"column":24},"end":{"line":50,"column":25}},"loc":{"start":{"line":50,"column":36},"end":{"line":52,"column":9}},"line":50}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":17,"column":8},"end":{"line":19,"column":9}},"type":"if","locations":[{"start":{"line":17,"column":8},"end":{"line":19,"column":9}},{"start":{"line":17,"column":8},"end":{"line":19,"column":9}}],"line":17}},"s":{"0":1,"1":3,"2":1,"3":1,"4":1,"5":1,"6":1,"7":71,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":1},"f":{"0":3,"1":71,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"b":{"0":[1,1,1],"1":[2,1],"2":[3,3],"3":[0,0]},"inputSourceMap":{"version":3,"file":"C:/Users/oreak/IdeaProjects/project_team059/src/controller/rooms/RoomDiskReader.ts","sources":["C:/Users/oreak/IdeaProjects/project_team059/src/controller/rooms/RoomDiskReader.ts"],"names":[],"mappings":";;;;;AAAA,gEAAwC;AACxC,sDAAiD;AACjD,wDAA0B;AAC1B,kDAA0B;AAG1B,MAAqB,cAAe,SAAQ,qBAAW;IACtD;QACC,KAAK,EAAE,CAAC;IACT,CAAC;IAOM,KAAK,CAAC,0BAA0B,CAAC,EAAU,EAAE,aAAkC;QACrF,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;QACpD,MAAM,OAAO,GAAG,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC;QAExC,IAAI,OAAO,KAAK,CAAC,EAAE;YAClB,MAAM,IAAI,6BAAY,CAAC,kBAAkB,CAAC,CAAC;SAC3C;QAED,aAAa,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,EAAE,UAAU,CAAC,KAAK,CAAC,CAAC;IACpD,CAAC;IAEM,KAAK,CAAC,iBAAiB,CAAC,EAAU;QAIxC,MAAM,WAAW,GAAU,EAAE,CAAC;QAC9B,MAAM,KAAK,GAAW,EAAE,CAAC;QAGzB,MAAM,IAAI,GAAG,MAAM,kBAAE,CAAC,OAAO,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;QACrD,KAAK,MAAM,IAAI,IAAI,IAAI,EAAE;YACxB,MAAM,OAAO,GAAG,kBAAE;iBAChB,QAAQ,CAAC,UAAU,EAAE,UAAU,IAAI,EAAE,CAAC;iBACtC,IAAI,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE;gBAEpB,MAAM,OAAO,GAAS,cAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;gBAC1C,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBAGpB,OAAO,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC;YACrB,CAAC,CAAC;iBACD,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;gBACd,MAAM,GAAG,CAAC;YACX,CAAC,CAAC,CAAC;YAEJ,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SAC1B;QAED,MAAM,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QAC/B,MAAM,aAAa,GAAkB,EAAE,EAAE,EAAE,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;QAC9D,OAAO,aAAa,CAAC;IACtB,CAAC;IAEM,KAAK,CAAC,eAAe,CAAC,OAAiB,EAAE,aAAkC;QACjF,MAAM,WAAW,GAA6B,EAAE,CAAC;QAGjD,OAAO,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;YAGzB,MAAM,OAAO,GAAG,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;YAC9C,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAC;QAEH,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QAE/C,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;YAC1B,aAAa,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;QAEH,OAAO,aAAa,CAAC;IACtB,CAAC;CACD;AAxED,iCAwEC","sourcesContent":["import RoomsParser from \"./RoomsParser\";\nimport { InsightError } from \"../IInsightFacade\";\nimport fs from \"fs-extra\";\nimport Room from \"./Room\";\nimport { DatasetRecord } from \"../rooms/RoomsParser\";\n\nexport default class RoomDiskReader extends RoomsParser {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\t// REQUIRES: id - name of dataset to be retrieved from disk (id IS NOT IN datasets ALREADY!!!!)\n\t//           datasets - sets you'll be mapping new DatasetRecord to\n\t// EFFECTS: Retrieves the sections associated with the dataset id on disk and turned into Sections objects and maps\n\t//          them to sectionsDatabase with their associated id.\n\t// OUTPUT: VOID\n\tpublic async logNewDatasetFromDiskToMap(id: string, roomsDatabase: Map<string, Room[]>): Promise<void> {\n\t\tconst newDataset = await this.turnDatasetToRoom(id);\n\t\tconst numRows = newDataset.rooms.length;\n\n\t\tif (numRows === 0) {\n\t\t\tthrow new InsightError(\"No valid Section\");\n\t\t}\n\t\t// update member variables\n\t\troomsDatabase.set(newDataset.id, newDataset.rooms);\n\t}\n\n\tpublic async turnDatasetToRoom(id: string): Promise<DatasetRecord> {\n\t\t// tracks number of sections in a given dataset and is initialized to 0\n\n\t\t// where each promise is appended to for each course object\n\t\tconst allPromises: any[] = [];\n\t\tconst rooms: Room[] = [];\n\n\t\t// list of all courses under the dataset file\n\t\tconst path = await fs.readdir(`./data/${id}/rooms/`);\n\t\tfor (const room of path) {\n\t\t\tconst promise = fs\n\t\t\t\t.readJson(`./data/${id}/rooms/${room}`)\n\t\t\t\t.then(async (file) => {\n\t\t\t\t\t// turn room JSON file to Room objects\n\t\t\t\t\tconst newRoom: Room = Room.fromJSON(file);\n\t\t\t\t\trooms.push(newRoom);\n\t\t\t\t\t//console.log(newRoom.getID());\n\n\t\t\t\t\treturn { id, file };\n\t\t\t\t})\n\t\t\t\t.catch((err) => {\n\t\t\t\t\tthrow err;\n\t\t\t\t});\n\n\t\t\tallPromises.push(promise);\n\t\t}\n\n\t\tawait Promise.all(allPromises);\n\t\tconst datasetRecord: DatasetRecord = { id: id, rooms: rooms };\n\t\treturn datasetRecord;\n\t}\n\n\tpublic async mapMissingRooms(roomIDs: string[], roomsDatabase: Map<string, Room[]>): Promise<Map<string, Room[]>> {\n\t\tconst allPromises: Promise<DatasetRecord>[] = [];\n\t\t// the id of all datasets not currently added\n\n\t\troomIDs.forEach((setId) => {\n\t\t\t// all ids for missing datasets are returned as a Record\n\t\t\t// with all the sections associated with the id\n\t\t\tconst promise = this.turnDatasetToRoom(setId);\n\t\t\tallPromises.push(promise);\n\t\t});\n\n\t\tconst records = await Promise.all(allPromises);\n\t\t// add all records collected to Map\n\t\trecords.forEach((record) => {\n\t\t\troomsDatabase.set(record.id, record.rooms);\n\t\t});\n\n\t\treturn roomsDatabase;\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"94f44ff5557f21824cad89e461892a6644875362","contentHash":"fd418c90c0c202fa7b4c7bbbaff99f0287791263f14aa785bc26abfe67f6ade0"},"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\rooms\\RoomsParser.ts":{"path":"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\rooms\\RoomsParser.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":12,"column":3}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},"2":{"start":{"line":3,"column":26},"end":{"line":3,"column":33}},"3":{"start":{"line":4,"column":15},"end":{"line":4,"column":52}},"4":{"start":{"line":5,"column":4},"end":{"line":7,"column":5}},"5":{"start":{"line":6,"column":6},"end":{"line":6,"column":68}},"6":{"start":{"line":6,"column":51},"end":{"line":6,"column":63}},"7":{"start":{"line":8,"column":4},"end":{"line":8,"column":39}},"8":{"start":{"line":10,"column":4},"end":{"line":10,"column":33}},"9":{"start":{"line":10,"column":26},"end":{"line":10,"column":33}},"10":{"start":{"line":11,"column":4},"end":{"line":11,"column":17}},"11":{"start":{"line":13,"column":25},"end":{"line":17,"column":2}},"12":{"start":{"line":14,"column":4},"end":{"line":14,"column":72}},"13":{"start":{"line":16,"column":4},"end":{"line":16,"column":21}},"14":{"start":{"line":18,"column":19},"end":{"line":24,"column":1}},"15":{"start":{"line":19,"column":4},"end":{"line":19,"column":42}},"16":{"start":{"line":19,"column":31},"end":{"line":19,"column":42}},"17":{"start":{"line":20,"column":17},"end":{"line":20,"column":19}},"18":{"start":{"line":21,"column":4},"end":{"line":21,"column":141}},"19":{"start":{"line":21,"column":21},"end":{"line":21,"column":141}},"20":{"start":{"line":21,"column":40},"end":{"line":21,"column":141}},"21":{"start":{"line":21,"column":109},"end":{"line":21,"column":141}},"22":{"start":{"line":22,"column":4},"end":{"line":22,"column":36}},"23":{"start":{"line":23,"column":4},"end":{"line":23,"column":18}},"24":{"start":{"line":25,"column":22},"end":{"line":27,"column":1}},"25":{"start":{"line":26,"column":4},"end":{"line":26,"column":62}},"26":{"start":{"line":28,"column":0},"end":{"line":28,"column":62}},"27":{"start":{"line":29,"column":15},"end":{"line":29,"column":56}},"28":{"start":{"line":30,"column":19},"end":{"line":30,"column":57}},"29":{"start":{"line":31,"column":15},"end":{"line":31,"column":46}},"30":{"start":{"line":32,"column":25},"end":{"line":32,"column":53}},"31":{"start":{"line":33,"column":13},"end":{"line":33,"column":47}},"32":{"start":{"line":35,"column":18},"end":{"line":35,"column":20}},"33":{"start":{"line":36,"column":27},"end":{"line":41,"column":5}},"34":{"start":{"line":43,"column":28},"end":{"line":43,"column":30}},"35":{"start":{"line":44,"column":8},"end":{"line":50,"column":9}},"36":{"start":{"line":45,"column":35},"end":{"line":48,"column":14}},"37":{"start":{"line":46,"column":33},"end":{"line":46,"column":55}},"38":{"start":{"line":47,"column":16},"end":{"line":47,"column":61}},"39":{"start":{"line":49,"column":12},"end":{"line":49,"column":45}},"40":{"start":{"line":51,"column":24},"end":{"line":51,"column":54}},"41":{"start":{"line":52,"column":28},"end":{"line":52,"column":37}},"42":{"start":{"line":53,"column":8},"end":{"line":57,"column":11}},"43":{"start":{"line":54,"column":12},"end":{"line":56,"column":15}},"44":{"start":{"line":55,"column":16},"end":{"line":55,"column":53}},"45":{"start":{"line":58,"column":8},"end":{"line":58,"column":27}},"46":{"start":{"line":61,"column":23},"end":{"line":61,"column":25}},"47":{"start":{"line":62,"column":25},"end":{"line":69,"column":9}},"48":{"start":{"line":63,"column":12},"end":{"line":65,"column":13}},"49":{"start":{"line":64,"column":16},"end":{"line":64,"column":34}},"50":{"start":{"line":66,"column":12},"end":{"line":68,"column":13}},"51":{"start":{"line":67,"column":16},"end":{"line":67,"column":68}},"52":{"start":{"line":67,"column":51},"end":{"line":67,"column":66}},"53":{"start":{"line":70,"column":8},"end":{"line":70,"column":22}},"54":{"start":{"line":71,"column":8},"end":{"line":71,"column":22}},"55":{"start":{"line":74,"column":29},"end":{"line":74,"column":38}},"56":{"start":{"line":75,"column":23},"end":{"line":75,"column":51}},"57":{"start":{"line":76,"column":25},"end":{"line":76,"column":30}},"58":{"start":{"line":77,"column":30},"end":{"line":88,"column":10}},"59":{"start":{"line":78,"column":12},"end":{"line":80,"column":13}},"60":{"start":{"line":79,"column":16},"end":{"line":79,"column":23}},"61":{"start":{"line":81,"column":26},"end":{"line":81,"column":54}},"62":{"start":{"line":82,"column":12},"end":{"line":87,"column":13}},"63":{"start":{"line":83,"column":31},"end":{"line":83,"column":79}},"64":{"start":{"line":84,"column":16},"end":{"line":86,"column":17}},"65":{"start":{"line":85,"column":20},"end":{"line":85,"column":38}},"66":{"start":{"line":89,"column":8},"end":{"line":89,"column":41}},"67":{"start":{"line":90,"column":8},"end":{"line":92,"column":9}},"68":{"start":{"line":91,"column":12},"end":{"line":91,"column":107}},"69":{"start":{"line":93,"column":8},"end":{"line":93,"column":28}},"70":{"start":{"line":96,"column":8},"end":{"line":96,"column":76}},"71":{"start":{"line":96,"column":48},"end":{"line":96,"column":74}},"72":{"start":{"line":99,"column":25},"end":{"line":99,"column":30}},"73":{"start":{"line":100,"column":8},"end":{"line":108,"column":9}},"74":{"start":{"line":101,"column":12},"end":{"line":107,"column":13}},"75":{"start":{"line":102,"column":38},"end":{"line":102,"column":65}},"76":{"start":{"line":103,"column":16},"end":{"line":106,"column":17}},"77":{"start":{"line":104,"column":20},"end":{"line":104,"column":81}},"78":{"start":{"line":105,"column":20},"end":{"line":105,"column":38}},"79":{"start":{"line":109,"column":8},"end":{"line":109,"column":26}},"80":{"start":{"line":112,"column":31},"end":{"line":112,"column":33}},"81":{"start":{"line":113,"column":24},"end":{"line":113,"column":91}},"82":{"start":{"line":113,"column":62},"end":{"line":113,"column":90}},"83":{"start":{"line":114,"column":8},"end":{"line":118,"column":11}},"84":{"start":{"line":115,"column":30},"end":{"line":115,"column":80}},"85":{"start":{"line":115,"column":58},"end":{"line":115,"column":79}},"86":{"start":{"line":116,"column":30},"end":{"line":116,"column":62}},"87":{"start":{"line":117,"column":12},"end":{"line":117,"column":43}},"88":{"start":{"line":119,"column":8},"end":{"line":124,"column":9}},"89":{"start":{"line":120,"column":32},"end":{"line":120,"column":63}},"90":{"start":{"line":121,"column":28},"end":{"line":121,"column":61}},"91":{"start":{"line":122,"column":33},"end":{"line":122,"column":74}},"92":{"start":{"line":123,"column":12},"end":{"line":123,"column":65}},"93":{"start":{"line":125,"column":8},"end":{"line":125,"column":20}},"94":{"start":{"line":128,"column":21},"end":{"line":128,"column":23}},"95":{"start":{"line":129,"column":20},"end":{"line":129,"column":21}},"96":{"start":{"line":130,"column":19},"end":{"line":130,"column":21}},"97":{"start":{"line":131,"column":24},"end":{"line":131,"column":26}},"98":{"start":{"line":132,"column":19},"end":{"line":132,"column":21}},"99":{"start":{"line":133,"column":25},"end":{"line":133,"column":92}},"100":{"start":{"line":134,"column":8},"end":{"line":134,"column":62}},"101":{"start":{"line":135,"column":21},"end":{"line":135,"column":59}},"102":{"start":{"line":136,"column":8},"end":{"line":160,"column":9}},"103":{"start":{"line":137,"column":27},"end":{"line":137,"column":77}},"104":{"start":{"line":138,"column":12},"end":{"line":152,"column":13}},"105":{"start":{"line":139,"column":36},"end":{"line":143,"column":17}},"106":{"start":{"line":144,"column":36},"end":{"line":150,"column":17}},"107":{"start":{"line":151,"column":16},"end":{"line":151,"column":82}},"108":{"start":{"line":153,"column":12},"end":{"line":153,"column":24}},"109":{"start":{"line":156,"column":12},"end":{"line":158,"column":13}},"110":{"start":{"line":157,"column":16},"end":{"line":157,"column":28}},"111":{"start":{"line":159,"column":12},"end":{"line":159,"column":24}},"112":{"start":{"line":163,"column":8},"end":{"line":186,"column":11}},"113":{"start":{"line":164,"column":30},"end":{"line":164,"column":80}},"114":{"start":{"line":164,"column":58},"end":{"line":164,"column":79}},"115":{"start":{"line":165,"column":30},"end":{"line":165,"column":62}},"116":{"start":{"line":166,"column":27},"end":{"line":166,"column":82}},"117":{"start":{"line":166,"column":60},"end":{"line":166,"column":81}},"118":{"start":{"line":167,"column":12},"end":{"line":185,"column":13}},"119":{"start":{"line":169,"column":20},"end":{"line":169,"column":59}},"120":{"start":{"line":170,"column":20},"end":{"line":170,"column":26}},"121":{"start":{"line":172,"column":20},"end":{"line":172,"column":58}},"122":{"start":{"line":173,"column":20},"end":{"line":173,"column":26}},"123":{"start":{"line":175,"column":20},"end":{"line":175,"column":62}},"124":{"start":{"line":176,"column":20},"end":{"line":176,"column":26}},"125":{"start":{"line":178,"column":20},"end":{"line":178,"column":57}},"126":{"start":{"line":179,"column":20},"end":{"line":179,"column":26}},"127":{"start":{"line":181,"column":20},"end":{"line":181,"column":90}},"128":{"start":{"line":181,"column":55},"end":{"line":181,"column":75}},"129":{"start":{"line":182,"column":20},"end":{"line":182,"column":26}},"130":{"start":{"line":184,"column":20},"end":{"line":184,"column":95}},"131":{"start":{"line":187,"column":8},"end":{"line":187,"column":56}},"132":{"start":{"line":190,"column":8},"end":{"line":190,"column":59}},"133":{"start":{"line":190,"column":37},"end":{"line":190,"column":57}},"134":{"start":{"line":193,"column":8},"end":{"line":196,"column":20}},"135":{"start":{"line":194,"column":27},"end":{"line":194,"column":37}},"136":{"start":{"line":199,"column":23},"end":{"line":199,"column":25}},"137":{"start":{"line":200,"column":24},"end":{"line":200,"column":26}},"138":{"start":{"line":201,"column":22},"end":{"line":201,"column":24}},"139":{"start":{"line":202,"column":19},"end":{"line":202,"column":21}},"140":{"start":{"line":203,"column":8},"end":{"line":226,"column":11}},"141":{"start":{"line":204,"column":30},"end":{"line":204,"column":80}},"142":{"start":{"line":204,"column":58},"end":{"line":204,"column":79}},"143":{"start":{"line":205,"column":30},"end":{"line":205,"column":62}},"144":{"start":{"line":206,"column":12},"end":{"line":208,"column":13}},"145":{"start":{"line":207,"column":16},"end":{"line":207,"column":23}},"146":{"start":{"line":209,"column":27},"end":{"line":209,"column":82}},"147":{"start":{"line":209,"column":60},"end":{"line":209,"column":81}},"148":{"start":{"line":210,"column":12},"end":{"line":225,"column":13}},"149":{"start":{"line":212,"column":20},"end":{"line":212,"column":62}},"150":{"start":{"line":213,"column":20},"end":{"line":213,"column":26}},"151":{"start":{"line":215,"column":20},"end":{"line":215,"column":61}},"152":{"start":{"line":216,"column":20},"end":{"line":216,"column":90}},"153":{"start":{"line":216,"column":55},"end":{"line":216,"column":75}},"154":{"start":{"line":217,"column":20},"end":{"line":217,"column":26}},"155":{"start":{"line":219,"column":20},"end":{"line":219,"column":60}},"156":{"start":{"line":220,"column":20},"end":{"line":220,"column":26}},"157":{"start":{"line":222,"column":20},"end":{"line":222,"column":26}},"158":{"start":{"line":224,"column":20},"end":{"line":224,"column":95}},"159":{"start":{"line":227,"column":8},"end":{"line":227,"column":78}},"160":{"start":{"line":230,"column":31},"end":{"line":230,"column":58}},"161":{"start":{"line":231,"column":20},"end":{"line":231,"column":116}},"162":{"start":{"line":232,"column":8},"end":{"line":255,"column":11}},"163":{"start":{"line":233,"column":12},"end":{"line":254,"column":15}},"164":{"start":{"line":236,"column":34},"end":{"line":236,"column":37}},"165":{"start":{"line":237,"column":16},"end":{"line":239,"column":17}},"166":{"start":{"line":238,"column":20},"end":{"line":238,"column":89}},"167":{"start":{"line":240,"column":16},"end":{"line":243,"column":17}},"168":{"start":{"line":241,"column":20},"end":{"line":241,"column":33}},"169":{"start":{"line":242,"column":20},"end":{"line":242,"column":34}},"170":{"start":{"line":244,"column":30},"end":{"line":244,"column":32}},"171":{"start":{"line":245,"column":16},"end":{"line":247,"column":19}},"172":{"start":{"line":246,"column":20},"end":{"line":246,"column":37}},"173":{"start":{"line":248,"column":16},"end":{"line":250,"column":19}},"174":{"start":{"line":249,"column":20},"end":{"line":249,"column":65}},"175":{"start":{"line":253,"column":16},"end":{"line":253,"column":26}},"176":{"start":{"line":258,"column":8},"end":{"line":269,"column":9}},"177":{"start":{"line":259,"column":29},"end":{"line":259,"column":48}},"178":{"start":{"line":260,"column":12},"end":{"line":265,"column":13}},"179":{"start":{"line":261,"column":16},"end":{"line":261,"column":66}},"180":{"start":{"line":264,"column":16},"end":{"line":264,"column":36}},"181":{"start":{"line":268,"column":12},"end":{"line":268,"column":24}},"182":{"start":{"line":272,"column":0},"end":{"line":272,"column":30}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":74},"end":{"line":2,"column":75}},"loc":{"start":{"line":2,"column":96},"end":{"line":9,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":6,"column":38},"end":{"line":6,"column":39}},"loc":{"start":{"line":6,"column":49},"end":{"line":6,"column":65}},"line":6},"2":{"name":"(anonymous_2)","decl":{"start":{"line":9,"column":6},"end":{"line":9,"column":7}},"loc":{"start":{"line":9,"column":28},"end":{"line":12,"column":1}},"line":9},"3":{"name":"(anonymous_3)","decl":{"start":{"line":13,"column":80},"end":{"line":13,"column":81}},"loc":{"start":{"line":13,"column":95},"end":{"line":15,"column":1}},"line":13},"4":{"name":"(anonymous_4)","decl":{"start":{"line":15,"column":5},"end":{"line":15,"column":6}},"loc":{"start":{"line":15,"column":20},"end":{"line":17,"column":1}},"line":15},"5":{"name":"(anonymous_5)","decl":{"start":{"line":18,"column":50},"end":{"line":18,"column":51}},"loc":{"start":{"line":18,"column":65},"end":{"line":24,"column":1}},"line":18},"6":{"name":"(anonymous_6)","decl":{"start":{"line":25,"column":56},"end":{"line":25,"column":57}},"loc":{"start":{"line":25,"column":71},"end":{"line":27,"column":1}},"line":25},"7":{"name":"(anonymous_7)","decl":{"start":{"line":42,"column":4},"end":{"line":42,"column":5}},"loc":{"start":{"line":42,"column":30},"end":{"line":59,"column":5}},"line":42},"8":{"name":"(anonymous_8)","decl":{"start":{"line":45,"column":79},"end":{"line":45,"column":80}},"loc":{"start":{"line":45,"column":99},"end":{"line":48,"column":13}},"line":45},"9":{"name":"(anonymous_9)","decl":{"start":{"line":53,"column":24},"end":{"line":53,"column":25}},"loc":{"start":{"line":53,"column":41},"end":{"line":57,"column":9}},"line":53},"10":{"name":"(anonymous_10)","decl":{"start":{"line":54,"column":32},"end":{"line":54,"column":33}},"loc":{"start":{"line":54,"column":57},"end":{"line":56,"column":13}},"line":54},"11":{"name":"(anonymous_11)","decl":{"start":{"line":60,"column":4},"end":{"line":60,"column":5}},"loc":{"start":{"line":60,"column":28},"end":{"line":72,"column":5}},"line":60},"12":{"name":"(anonymous_12)","decl":{"start":{"line":62,"column":25},"end":{"line":62,"column":26}},"loc":{"start":{"line":62,"column":35},"end":{"line":69,"column":9}},"line":62},"13":{"name":"(anonymous_13)","decl":{"start":{"line":67,"column":40},"end":{"line":67,"column":41}},"loc":{"start":{"line":67,"column":51},"end":{"line":67,"column":66}},"line":67},"14":{"name":"(anonymous_14)","decl":{"start":{"line":73,"column":4},"end":{"line":73,"column":5}},"loc":{"start":{"line":73,"column":38},"end":{"line":94,"column":5}},"line":73},"15":{"name":"(anonymous_15)","decl":{"start":{"line":77,"column":41},"end":{"line":77,"column":42}},"loc":{"start":{"line":77,"column":58},"end":{"line":88,"column":9}},"line":77},"16":{"name":"(anonymous_16)","decl":{"start":{"line":95,"column":4},"end":{"line":95,"column":5}},"loc":{"start":{"line":95,"column":28},"end":{"line":97,"column":5}},"line":95},"17":{"name":"(anonymous_17)","decl":{"start":{"line":96,"column":37},"end":{"line":96,"column":38}},"loc":{"start":{"line":96,"column":48},"end":{"line":96,"column":74}},"line":96},"18":{"name":"(anonymous_18)","decl":{"start":{"line":98,"column":4},"end":{"line":98,"column":5}},"loc":{"start":{"line":98,"column":48},"end":{"line":110,"column":5}},"line":98},"19":{"name":"(anonymous_19)","decl":{"start":{"line":111,"column":4},"end":{"line":111,"column":5}},"loc":{"start":{"line":111,"column":25},"end":{"line":126,"column":5}},"line":111},"20":{"name":"(anonymous_20)","decl":{"start":{"line":113,"column":46},"end":{"line":113,"column":47}},"loc":{"start":{"line":113,"column":62},"end":{"line":113,"column":90}},"line":113},"21":{"name":"(anonymous_21)","decl":{"start":{"line":114,"column":24},"end":{"line":114,"column":25}},"loc":{"start":{"line":114,"column":36},"end":{"line":118,"column":9}},"line":114},"22":{"name":"(anonymous_22)","decl":{"start":{"line":115,"column":48},"end":{"line":115,"column":49}},"loc":{"start":{"line":115,"column":58},"end":{"line":115,"column":79}},"line":115},"23":{"name":"(anonymous_23)","decl":{"start":{"line":127,"column":4},"end":{"line":127,"column":5}},"loc":{"start":{"line":127,"column":47},"end":{"line":161,"column":5}},"line":127},"24":{"name":"(anonymous_24)","decl":{"start":{"line":162,"column":4},"end":{"line":162,"column":5}},"loc":{"start":{"line":162,"column":67},"end":{"line":188,"column":5}},"line":162},"25":{"name":"(anonymous_25)","decl":{"start":{"line":163,"column":24},"end":{"line":163,"column":25}},"loc":{"start":{"line":163,"column":36},"end":{"line":186,"column":9}},"line":163},"26":{"name":"(anonymous_26)","decl":{"start":{"line":164,"column":48},"end":{"line":164,"column":49}},"loc":{"start":{"line":164,"column":58},"end":{"line":164,"column":79}},"line":164},"27":{"name":"(anonymous_27)","decl":{"start":{"line":166,"column":50},"end":{"line":166,"column":51}},"loc":{"start":{"line":166,"column":60},"end":{"line":166,"column":81}},"line":166},"28":{"name":"(anonymous_28)","decl":{"start":{"line":181,"column":45},"end":{"line":181,"column":46}},"loc":{"start":{"line":181,"column":55},"end":{"line":181,"column":75}},"line":181},"29":{"name":"(anonymous_29)","decl":{"start":{"line":189,"column":4},"end":{"line":189,"column":5}},"loc":{"start":{"line":189,"column":34},"end":{"line":191,"column":5}},"line":189},"30":{"name":"(anonymous_30)","decl":{"start":{"line":190,"column":26},"end":{"line":190,"column":27}},"loc":{"start":{"line":190,"column":37},"end":{"line":190,"column":57}},"line":190},"31":{"name":"(anonymous_31)","decl":{"start":{"line":192,"column":4},"end":{"line":192,"column":5}},"loc":{"start":{"line":192,"column":29},"end":{"line":197,"column":5}},"line":192},"32":{"name":"(anonymous_32)","decl":{"start":{"line":194,"column":17},"end":{"line":194,"column":18}},"loc":{"start":{"line":194,"column":27},"end":{"line":194,"column":37}},"line":194},"33":{"name":"(anonymous_33)","decl":{"start":{"line":198,"column":4},"end":{"line":198,"column":5}},"loc":{"start":{"line":198,"column":31},"end":{"line":228,"column":5}},"line":198},"34":{"name":"(anonymous_34)","decl":{"start":{"line":203,"column":24},"end":{"line":203,"column":25}},"loc":{"start":{"line":203,"column":36},"end":{"line":226,"column":9}},"line":203},"35":{"name":"(anonymous_35)","decl":{"start":{"line":204,"column":48},"end":{"line":204,"column":49}},"loc":{"start":{"line":204,"column":58},"end":{"line":204,"column":79}},"line":204},"36":{"name":"(anonymous_36)","decl":{"start":{"line":209,"column":50},"end":{"line":209,"column":51}},"loc":{"start":{"line":209,"column":60},"end":{"line":209,"column":81}},"line":209},"37":{"name":"(anonymous_37)","decl":{"start":{"line":216,"column":45},"end":{"line":216,"column":46}},"loc":{"start":{"line":216,"column":55},"end":{"line":216,"column":75}},"line":216},"38":{"name":"(anonymous_38)","decl":{"start":{"line":229,"column":4},"end":{"line":229,"column":5}},"loc":{"start":{"line":229,"column":36},"end":{"line":256,"column":5}},"line":229},"39":{"name":"(anonymous_39)","decl":{"start":{"line":232,"column":27},"end":{"line":232,"column":28}},"loc":{"start":{"line":232,"column":48},"end":{"line":255,"column":9}},"line":232},"40":{"name":"(anonymous_40)","decl":{"start":{"line":234,"column":26},"end":{"line":234,"column":27}},"loc":{"start":{"line":234,"column":35},"end":{"line":251,"column":13}},"line":234},"41":{"name":"(anonymous_41)","decl":{"start":{"line":245,"column":31},"end":{"line":245,"column":32}},"loc":{"start":{"line":245,"column":42},"end":{"line":247,"column":17}},"line":245},"42":{"name":"(anonymous_42)","decl":{"start":{"line":248,"column":30},"end":{"line":248,"column":31}},"loc":{"start":{"line":248,"column":36},"end":{"line":250,"column":17}},"line":248},"43":{"name":"(anonymous_43)","decl":{"start":{"line":252,"column":29},"end":{"line":252,"column":30}},"loc":{"start":{"line":252,"column":36},"end":{"line":254,"column":13}},"line":252},"44":{"name":"(anonymous_44)","decl":{"start":{"line":257,"column":4},"end":{"line":257,"column":5}},"loc":{"start":{"line":257,"column":44},"end":{"line":270,"column":5}},"line":257}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":12,"column":3}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":57},"end":{"line":12,"column":2}}],"line":2},"1":{"loc":{"start":{"line":2,"column":57},"end":{"line":12,"column":2}},"type":"cond-expr","locations":[{"start":{"line":2,"column":74},"end":{"line":9,"column":1}},{"start":{"line":9,"column":6},"end":{"line":12,"column":1}}],"line":2},"2":{"loc":{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},"type":"if","locations":[{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},{"start":{"line":3,"column":4},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":5,"column":4},"end":{"line":7,"column":5}},"type":"if","locations":[{"start":{"line":5,"column":4},"end":{"line":7,"column":5}},{"start":{"line":5,"column":4},"end":{"line":7,"column":5}}],"line":5},"4":{"loc":{"start":{"line":5,"column":8},"end":{"line":5,"column":85}},"type":"binary-expr","locations":[{"start":{"line":5,"column":8},"end":{"line":5,"column":13}},{"start":{"line":5,"column":18},"end":{"line":5,"column":84}}],"line":5},"5":{"loc":{"start":{"line":5,"column":18},"end":{"line":5,"column":84}},"type":"cond-expr","locations":[{"start":{"line":5,"column":34},"end":{"line":5,"column":47}},{"start":{"line":5,"column":50},"end":{"line":5,"column":84}}],"line":5},"6":{"loc":{"start":{"line":5,"column":50},"end":{"line":5,"column":84}},"type":"binary-expr","locations":[{"start":{"line":5,"column":50},"end":{"line":5,"column":63}},{"start":{"line":5,"column":67},"end":{"line":5,"column":84}}],"line":5},"7":{"loc":{"start":{"line":10,"column":4},"end":{"line":10,"column":33}},"type":"if","locations":[{"start":{"line":10,"column":4},"end":{"line":10,"column":33}},{"start":{"line":10,"column":4},"end":{"line":10,"column":33}}],"line":10},"8":{"loc":{"start":{"line":13,"column":25},"end":{"line":17,"column":2}},"type":"binary-expr","locations":[{"start":{"line":13,"column":26},"end":{"line":13,"column":30}},{"start":{"line":13,"column":34},"end":{"line":13,"column":57}},{"start":{"line":13,"column":63},"end":{"line":17,"column":1}}],"line":13},"9":{"loc":{"start":{"line":13,"column":63},"end":{"line":17,"column":1}},"type":"cond-expr","locations":[{"start":{"line":13,"column":80},"end":{"line":15,"column":1}},{"start":{"line":15,"column":5},"end":{"line":17,"column":1}}],"line":13},"10":{"loc":{"start":{"line":18,"column":19},"end":{"line":24,"column":1}},"type":"binary-expr","locations":[{"start":{"line":18,"column":20},"end":{"line":18,"column":24}},{"start":{"line":18,"column":28},"end":{"line":18,"column":45}},{"start":{"line":18,"column":50},"end":{"line":24,"column":1}}],"line":18},"11":{"loc":{"start":{"line":19,"column":4},"end":{"line":19,"column":42}},"type":"if","locations":[{"start":{"line":19,"column":4},"end":{"line":19,"column":42}},{"start":{"line":19,"column":4},"end":{"line":19,"column":42}}],"line":19},"12":{"loc":{"start":{"line":19,"column":8},"end":{"line":19,"column":29}},"type":"binary-expr","locations":[{"start":{"line":19,"column":8},"end":{"line":19,"column":11}},{"start":{"line":19,"column":15},"end":{"line":19,"column":29}}],"line":19},"13":{"loc":{"start":{"line":21,"column":4},"end":{"line":21,"column":141}},"type":"if","locations":[{"start":{"line":21,"column":4},"end":{"line":21,"column":141}},{"start":{"line":21,"column":4},"end":{"line":21,"column":141}}],"line":21},"14":{"loc":{"start":{"line":21,"column":40},"end":{"line":21,"column":141}},"type":"if","locations":[{"start":{"line":21,"column":40},"end":{"line":21,"column":141}},{"start":{"line":21,"column":40},"end":{"line":21,"column":141}}],"line":21},"15":{"loc":{"start":{"line":21,"column":44},"end":{"line":21,"column":107}},"type":"binary-expr","locations":[{"start":{"line":21,"column":44},"end":{"line":21,"column":59}},{"start":{"line":21,"column":63},"end":{"line":21,"column":107}}],"line":21},"16":{"loc":{"start":{"line":25,"column":22},"end":{"line":27,"column":1}},"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":27}},{"start":{"line":25,"column":31},"end":{"line":25,"column":51}},{"start":{"line":25,"column":56},"end":{"line":27,"column":1}}],"line":25},"17":{"loc":{"start":{"line":26,"column":11},"end":{"line":26,"column":61}},"type":"cond-expr","locations":[{"start":{"line":26,"column":37},"end":{"line":26,"column":40}},{"start":{"line":26,"column":43},"end":{"line":26,"column":61}}],"line":26},"18":{"loc":{"start":{"line":26,"column":12},"end":{"line":26,"column":33}},"type":"binary-expr","locations":[{"start":{"line":26,"column":12},"end":{"line":26,"column":15}},{"start":{"line":26,"column":19},"end":{"line":26,"column":33}}],"line":26},"19":{"loc":{"start":{"line":44,"column":8},"end":{"line":50,"column":9}},"type":"if","locations":[{"start":{"line":44,"column":8},"end":{"line":50,"column":9}},{"start":{"line":44,"column":8},"end":{"line":50,"column":9}}],"line":44},"20":{"loc":{"start":{"line":63,"column":12},"end":{"line":65,"column":13}},"type":"if","locations":[{"start":{"line":63,"column":12},"end":{"line":65,"column":13}},{"start":{"line":63,"column":12},"end":{"line":65,"column":13}}],"line":63},"21":{"loc":{"start":{"line":66,"column":12},"end":{"line":68,"column":13}},"type":"if","locations":[{"start":{"line":66,"column":12},"end":{"line":68,"column":13}},{"start":{"line":66,"column":12},"end":{"line":68,"column":13}}],"line":66},"22":{"loc":{"start":{"line":78,"column":12},"end":{"line":80,"column":13}},"type":"if","locations":[{"start":{"line":78,"column":12},"end":{"line":80,"column":13}},{"start":{"line":78,"column":12},"end":{"line":80,"column":13}}],"line":78},"23":{"loc":{"start":{"line":82,"column":12},"end":{"line":87,"column":13}},"type":"if","locations":[{"start":{"line":82,"column":12},"end":{"line":87,"column":13}},{"start":{"line":82,"column":12},"end":{"line":87,"column":13}}],"line":82},"24":{"loc":{"start":{"line":84,"column":16},"end":{"line":86,"column":17}},"type":"if","locations":[{"start":{"line":84,"column":16},"end":{"line":86,"column":17}},{"start":{"line":84,"column":16},"end":{"line":86,"column":17}}],"line":84},"25":{"loc":{"start":{"line":90,"column":8},"end":{"line":92,"column":9}},"type":"if","locations":[{"start":{"line":90,"column":8},"end":{"line":92,"column":9}},{"start":{"line":90,"column":8},"end":{"line":92,"column":9}}],"line":90},"26":{"loc":{"start":{"line":101,"column":12},"end":{"line":107,"column":13}},"type":"if","locations":[{"start":{"line":101,"column":12},"end":{"line":107,"column":13}},{"start":{"line":101,"column":12},"end":{"line":107,"column":13}}],"line":101},"27":{"loc":{"start":{"line":103,"column":16},"end":{"line":106,"column":17}},"type":"if","locations":[{"start":{"line":103,"column":16},"end":{"line":106,"column":17}},{"start":{"line":103,"column":16},"end":{"line":106,"column":17}}],"line":103},"28":{"loc":{"start":{"line":116,"column":30},"end":{"line":116,"column":62}},"type":"cond-expr","locations":[{"start":{"line":116,"column":42},"end":{"line":116,"column":57}},{"start":{"line":116,"column":60},"end":{"line":116,"column":62}}],"line":116},"29":{"loc":{"start":{"line":119,"column":8},"end":{"line":124,"column":9}},"type":"if","locations":[{"start":{"line":119,"column":8},"end":{"line":124,"column":9}},{"start":{"line":119,"column":8},"end":{"line":124,"column":9}}],"line":119},"30":{"loc":{"start":{"line":138,"column":12},"end":{"line":152,"column":13}},"type":"if","locations":[{"start":{"line":138,"column":12},"end":{"line":152,"column":13}},{"start":{"line":138,"column":12},"end":{"line":152,"column":13}}],"line":138},"31":{"loc":{"start":{"line":138,"column":16},"end":{"line":138,"column":90}},"type":"binary-expr","locations":[{"start":{"line":138,"column":16},"end":{"line":138,"column":22}},{"start":{"line":138,"column":26},"end":{"line":138,"column":56}},{"start":{"line":138,"column":60},"end":{"line":138,"column":90}}],"line":138},"32":{"loc":{"start":{"line":156,"column":12},"end":{"line":158,"column":13}},"type":"if","locations":[{"start":{"line":156,"column":12},"end":{"line":158,"column":13}},{"start":{"line":156,"column":12},"end":{"line":158,"column":13}}],"line":156},"33":{"loc":{"start":{"line":165,"column":30},"end":{"line":165,"column":62}},"type":"cond-expr","locations":[{"start":{"line":165,"column":42},"end":{"line":165,"column":57}},{"start":{"line":165,"column":60},"end":{"line":165,"column":62}}],"line":165},"34":{"loc":{"start":{"line":167,"column":12},"end":{"line":185,"column":13}},"type":"switch","locations":[{"start":{"line":168,"column":16},"end":{"line":170,"column":26}},{"start":{"line":171,"column":16},"end":{"line":173,"column":26}},{"start":{"line":174,"column":16},"end":{"line":176,"column":26}},{"start":{"line":177,"column":16},"end":{"line":179,"column":26}},{"start":{"line":180,"column":16},"end":{"line":182,"column":26}},{"start":{"line":183,"column":16},"end":{"line":184,"column":95}}],"line":167},"35":{"loc":{"start":{"line":181,"column":27},"end":{"line":181,"column":89}},"type":"binary-expr","locations":[{"start":{"line":181,"column":27},"end":{"line":181,"column":83}},{"start":{"line":181,"column":87},"end":{"line":181,"column":89}}],"line":181},"36":{"loc":{"start":{"line":205,"column":30},"end":{"line":205,"column":62}},"type":"cond-expr","locations":[{"start":{"line":205,"column":42},"end":{"line":205,"column":57}},{"start":{"line":205,"column":60},"end":{"line":205,"column":62}}],"line":205},"37":{"loc":{"start":{"line":206,"column":12},"end":{"line":208,"column":13}},"type":"if","locations":[{"start":{"line":206,"column":12},"end":{"line":208,"column":13}},{"start":{"line":206,"column":12},"end":{"line":208,"column":13}}],"line":206},"38":{"loc":{"start":{"line":210,"column":12},"end":{"line":225,"column":13}},"type":"switch","locations":[{"start":{"line":211,"column":16},"end":{"line":213,"column":26}},{"start":{"line":214,"column":16},"end":{"line":217,"column":26}},{"start":{"line":218,"column":16},"end":{"line":220,"column":26}},{"start":{"line":221,"column":16},"end":{"line":222,"column":26}},{"start":{"line":223,"column":16},"end":{"line":224,"column":95}}],"line":210},"39":{"loc":{"start":{"line":216,"column":27},"end":{"line":216,"column":89}},"type":"binary-expr","locations":[{"start":{"line":216,"column":27},"end":{"line":216,"column":83}},{"start":{"line":216,"column":87},"end":{"line":216,"column":89}}],"line":216},"40":{"loc":{"start":{"line":237,"column":16},"end":{"line":239,"column":17}},"type":"if","locations":[{"start":{"line":237,"column":16},"end":{"line":239,"column":17}},{"start":{"line":237,"column":16},"end":{"line":239,"column":17}}],"line":237},"41":{"loc":{"start":{"line":240,"column":16},"end":{"line":243,"column":17}},"type":"if","locations":[{"start":{"line":240,"column":16},"end":{"line":243,"column":17}},{"start":{"line":240,"column":16},"end":{"line":243,"column":17}}],"line":240},"42":{"loc":{"start":{"line":260,"column":12},"end":{"line":265,"column":13}},"type":"if","locations":[{"start":{"line":260,"column":12},"end":{"line":265,"column":13}},{"start":{"line":260,"column":12},"end":{"line":265,"column":13}}],"line":260},"43":{"loc":{"start":{"line":260,"column":16},"end":{"line":260,"column":72}},"type":"binary-expr","locations":[{"start":{"line":260,"column":16},"end":{"line":260,"column":42}},{"start":{"line":260,"column":46},"end":{"line":260,"column":72}}],"line":260}},"s":{"0":1,"1":17,"2":17,"3":17,"4":17,"5":17,"6":3806,"7":17,"8":0,"9":0,"10":0,"11":1,"12":1,"13":0,"14":1,"15":2,"16":1,"17":1,"18":1,"19":1,"20":17,"21":17,"22":1,"23":1,"24":1,"25":2,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":142,"33":142,"34":25,"35":25,"36":24,"37":24,"38":24,"39":24,"40":25,"41":25,"42":25,"43":24,"44":1775,"45":25,"46":24,"47":24,"48":90667,"49":24,"50":90667,"51":39713,"52":90643,"53":24,"54":24,"55":24,"56":24,"57":24,"58":24,"59":24,"60":0,"61":24,"62":24,"63":24,"64":24,"65":24,"66":24,"67":24,"68":0,"69":24,"70":24,"71":96,"72":24,"73":24,"74":3574,"75":1775,"76":1775,"77":1775,"78":1775,"79":24,"80":1775,"81":1775,"82":19525,"83":1775,"84":8875,"85":8875,"86":8875,"87":8875,"88":1775,"89":1775,"90":1775,"91":1775,"92":1775,"93":0,"94":3806,"95":3806,"96":3806,"97":3806,"98":3806,"99":3806,"100":3806,"101":3806,"102":3806,"103":3806,"104":3806,"105":3806,"106":3806,"107":3806,"108":0,"109":0,"110":0,"111":0,"112":3806,"113":19030,"114":19030,"115":19030,"116":19030,"117":26642,"118":19030,"119":3806,"120":3806,"121":3806,"122":3806,"123":3806,"124":3806,"125":3806,"126":3806,"127":3806,"128":3806,"129":3806,"130":0,"131":3806,"132":5821,"133":22564,"134":20549,"135":20549,"136":1775,"137":1775,"138":1775,"139":1775,"140":1775,"141":8875,"142":8875,"143":8875,"144":8875,"145":1775,"146":7100,"147":10650,"148":7100,"149":1775,"150":1775,"151":1775,"152":1775,"153":1775,"154":1775,"155":1775,"156":1775,"157":1775,"158":0,"159":1775,"160":3806,"161":3806,"162":3806,"163":3806,"164":3806,"165":3806,"166":0,"167":3806,"168":0,"169":0,"170":3806,"171":3806,"172":3806,"173":3806,"174":3806,"175":0,"176":3806,"177":3806,"178":3806,"179":3806,"180":0,"181":0,"182":1},"f":{"0":17,"1":3806,"2":0,"3":1,"4":0,"5":2,"6":2,"7":25,"8":24,"9":24,"10":1775,"11":24,"12":90667,"13":90643,"14":24,"15":24,"16":24,"17":96,"18":24,"19":1775,"20":19525,"21":8875,"22":8875,"23":3806,"24":3806,"25":19030,"26":19030,"27":26642,"28":3806,"29":5821,"30":22564,"31":20549,"32":20549,"33":1775,"34":8875,"35":8875,"36":10650,"37":1775,"38":3806,"39":3806,"40":3806,"41":3806,"42":3806,"43":0,"44":3806},"b":{"0":[1,1,1],"1":[1,0],"2":[17,0],"3":[17,0],"4":[17,17],"5":[2,15],"6":[15,0],"7":[0,0],"8":[1,1,1],"9":[1,0],"10":[1,1,1],"11":[1,1],"12":[2,2],"13":[1,0],"14":[17,0],"15":[17,17],"16":[1,1,1],"17":[2,0],"18":[2,2],"19":[24,1],"20":[24,90643],"21":[39713,50954],"22":[0,24],"23":[24,0],"24":[24,0],"25":[0,24],"26":[1775,1799],"27":[1775,0],"28":[8875,0],"29":[1775,0],"30":[3806,0],"31":[3806,3806,3806],"32":[0,0],"33":[19030,0],"34":[3806,3806,3806,3806,3806,0],"35":[3806,0],"36":[8875,0],"37":[1775,7100],"38":[1775,1775,1775,1775,0],"39":[1775,0],"40":[0,3806],"41":[0,3806],"42":[3806,0],"43":[3806,3806]},"inputSourceMap":{"version":3,"file":"C:/Users/oreak/IdeaProjects/project_team059/src/controller/rooms/RoomsParser.ts","sources":["C:/Users/oreak/IdeaProjects/project_team059/src/controller/rooms/RoomsParser.ts"],"names":[],"mappings":"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","sourcesContent":["import Room, { Mfield, Sfield } from \"../rooms/Room\";\nimport JSZip from \"jszip\";\nimport Building from \"./Building\";\nimport * as parse5 from \"parse5\";\nimport { InsightError } from \"../IInsightFacade\";\nimport * as http from \"node:http\";\n\nexport default interface GeoResponse {\n\tlat?: number;\n\tlon?: number;\n\terror?: string;\n}\n\nexport interface DatasetRecord {\n\tid: string;\n\trooms: Room[];\n}\n\ninterface Geolocation {\n\tlat: number;\n\tlon: number;\n}\n\nexport default class RoomsParser {\n\tprivate TEAM_NUMBER = 59;\n\tprivate buildingTdClassNames: string[] = [\n\t\t\"views-field views-field-field-building-code\",\n\t\t\"views-field views-field-title\",\n\t\t\"views-field views-field-field-building-address\",\n\t\t\"views-field views-field-nothing\",\n\t];\n\t// parses through index.htm file to return a map with associated populated fields of all buildings in the file\n\tprotected async parseIndexFile(zip: JSZip): Promise<Map<string, Building>> {\n\t\tconst allPromises: Promise<Map<string, Building>>[] = [];\n\n\t\tif (zip.files[\"index.htm\"]) {\n\t\t\tconst promiseContent = zip.files[\"index.htm\"].async(\"string\").then(async (content0) => {\n\t\t\t\tconst document = parse5.parse(content0);\n\t\t\t\treturn this.findTdElemsInIndexFile(document);\n\t\t\t});\n\t\t\tallPromises.push(promiseContent);\n\t\t}\n\n\t\t// wait for all promises\n\t\tconst results = await Promise.all(allPromises);\n\t\tconst combinedMap = new Map<string, Building>();\n\n\t\t// combine all maps\n\t\tresults.forEach((buildingMap) => {\n\t\t\tbuildingMap.forEach((building, shortname) => {\n\t\t\t\tcombinedMap.set(shortname, building);\n\t\t\t});\n\t\t});\n\n\t\treturn combinedMap;\n\t}\n\n\tprivate async getAllTables(doc: any): Promise<any[]> {\n\t\tconst tables: any[] = [];\n\t\tconst traverse = (node: any): void => {\n\t\t\t// Check if the current node is a <table>\n\t\t\tif (node.nodeName === \"table\") {\n\t\t\t\ttables.push(node); // Add the table to the list\n\t\t\t}\n\n\t\t\tif (node.childNodes) {\n\t\t\t\tnode.childNodes.forEach((child: any) => traverse(child));\n\t\t\t}\n\t\t};\n\n\t\ttraverse(doc);\n\t\treturn tables;\n\t}\n\n\tprotected async findTdElemsInIndexFile(doc: any): Promise<Map<string, Building>> {\n\t\tconst buildingsMap = new Map<string, Building>();\n\t\tconst tables = await this.getAllTables(doc);\n\t\tlet foundTable = false;\n\n\t\tconst tablePromises = tables.map(async (table: any) => {\n\t\t\tif (foundTable) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst tbody = this.findTbodyInTable(table);\n\t\t\tif (tbody) {\n\t\t\t\tconst result = await this.processTableBody(tbody, buildingsMap);\n\t\t\t\tif (result) {\n\t\t\t\t\tfoundTable = true; // Update foundTable if a valid building was found\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tawait Promise.all(tablePromises);\n\t\tif (buildingsMap.size === 0) {\n\t\t\tthrow new InsightError(\"No <td> elements found or valid buildings detected.\");\n\t\t}\n\n\t\treturn buildingsMap;\n\t}\n\n\tprivate findTbodyInTable(table: any): any | undefined {\n\t\treturn table.childNodes.find((child: any) => child.nodeName === \"tbody\");\n\t}\n\n\tprivate async processTableBody(tbody: any, buildingsMap: Map<string, Building>): Promise<boolean> {\n\t\tlet validTable = false;\n\t\tfor (const child of tbody.childNodes) {\n\t\t\tif (child.nodeName === \"tr\") {\n\t\t\t\tconst validBuilding = this.processTableRow(child);\n\t\t\t\tif (validBuilding) {\n\t\t\t\t\tbuildingsMap.set(validBuilding.code, validBuilding.building);\n\t\t\t\t\tvalidTable = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn validTable; // no valid building found in this tbody -> not a valid table\n\t}\n\n\tprivate processTableRow(row: any): { code: string; building: Building } | null {\n\t\tconst currClassNames: string[] = [];\n\t\tconst tdElems = row.childNodes.filter((grandchild: any) => grandchild.nodeName === \"td\");\n\n\t\ttdElems.forEach((tdElem: any) => {\n\t\t\tconst classAttr = tdElem.attrs.find((attr: any) => attr.name === \"class\");\n\t\t\tconst classList = classAttr ? classAttr.value : \"\";\n\t\t\tcurrClassNames.push(classList);\n\t\t});\n\n\t\tif (this.compareClassNames(this.buildingTdClassNames, currClassNames)) {\n\t\t\t// console.log(\"reqClass: \", this.buildingTdClassNames)\n\t\t\t// console.log(\"currClass: \", currClassNames)\n\n\t\t\tconst newBuilding: Building = this.parseBuildingInfo(tdElems);\n\t\t\tconst codeKey: string[] = newBuilding.getbHref().split(\"/\");\n\n\t\t\tconst buildingCode: string = codeKey[codeKey.length - 1].split(\".\")[0];\n\t\t\t//console.log(buildingCode)\n\n\t\t\treturn { code: buildingCode, building: newBuilding };\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t// protected async findTdElemsInIndexFile(doc: any): Promise<Map<string, Building>> {\n\t// \tconst buildingsMap = new Map<string, Building>();\n\t// \tlet foundTable = false;\n\t//\n\t// \tconst tables = await this.getAllTables(doc);\n\t//\n\t// \t// Process each table\n\t// \ttables.forEach((table: any) => {\n\t// \t\t// Find the <tbody> in the <table>\n\t// \t\tif (foundTable) {\n\t// \t\t\treturn buildingsMap;\n\t// \t\t}\n\t// \t\tconst tbody = table.childNodes.find((child: any) => child.nodeName === \"tbody\");\n\t//\n\t// \t\t// if <tbody> exists, process its <tr> elements\n\t// \t\tif (tbody) {\n\t// \t\t\ttbody.childNodes.forEach((child: any) => {\n\t// \t\t\t\tif (child.nodeName === \"tr\") {\n\t// \t\t\t\t\tconst currClassNames: string[] = [];\n\t// \t\t\t\t\tconst tdElems = child.childNodes.filter((grandchild: any) => grandchild.nodeName === \"td\");\n\t//\n\t// \t\t\t\t\t// process each <td> element\n\t// \t\t\t\t\ttdElems.forEach((tdElem: any) => {\n\t// \t\t\t\t\t\tconst classAttr = tdElem.attrs.find((attr: any) => attr.name === \"class\");\n\t// \t\t\t\t\t\tconst classList = classAttr ? classAttr.value : \"\";\n\t// \t\t\t\t\t\tcurrClassNames.push(classList);\n\t// \t\t\t\t\t});\n\t//\n\t// \t\t\t\t\tif (this.compareClassNames(this.buildingTdClassNames, currClassNames)) {\n\t// \t\t\t\t\t\tfoundTable = true;\n\t// \t\t\t\t\t\tconst newBuilding: Building = this.parseBuildingInfo(tdElems);\n\t// \t\t\t\t\t\tconst codeKey: string[] = newBuilding.getHref().split(\"/\");\n\t// \t\t\t\t\t\tconst buildingCode: string = codeKey[codeKey.length - 1].split(\".\")[0];\n\t//\n\t// \t\t\t\t\t\tbuildingsMap.set(buildingCode, newBuilding);\n\t// \t\t\t\t\t}\n\t// \t\t\t\t}\n\t// \t\t\t});\n\t// \t\t}\n\t// \t});\n\t//\n\t// \tif (buildingsMap.size === 0) {\n\t// \t\tthrow new InsightError(\"No <td> elements found or valid buildings detected.\");\n\t// \t}\n\t//\n\t// \treturn buildingsMap;\n\t// }\n\n\t// // finds all the td elems associated with the index table of\n\t// protected findTdElemsInIndexFile(doc: any): Map<string, Building> {\n\t// \tconst buildingsMap = new Map<string, Building>();\n\t// \t// Function to traverse the parsed tree\n\t// \tconst traverse = (node: any): any => {\n\t// \t\t// Check if the current node is a <tr> element\n\t// \t\tconst currClassNames: string[] = [];\n\t// \t\tif (node.nodeName === \"tr\" && node.childNodes) {\n\t// \t\t\t// Gather all <td> elements within this <tr>\n\t// \t\t\tconst tdElems = node.childNodes.filter((child: any) => child.nodeName === \"td\");\n\t// \t\t\t//console.log(tdElems)\n\t//\n\t// \t\t\t// Process each <td> element\n\t// \t\t\ttdElems.forEach((tdElem: any) => {\n\t// \t\t\t\tconst classAttr = tdElem.attrs.find((attr: any) => attr.name === \"class\");\n\t// \t\t\t\t//console.log(classAttr)\n\t// \t\t\t\tconst classList = classAttr.value;\n\t// \t\t\t\tcurrClassNames.push(classList);\n\t// \t\t\t});\n\t//\n\t// \t\t\tif (this.compareClassNames(this.buildingTdClassNames, currClassNames)) {\n\t// \t\t\t\tconst newBuilding: Building = this.parseBuildingInfo(tdElems);\n\t// \t\t\t\tconst codeKey: string[] = newBuilding.getHref().split(\"/\");\n\t// \t\t\t\t// get from href in the case shortname on index file is empty string\n\t// \t\t\t\tconst buildingCode: string = codeKey[codeKey.length - 1].split(\".\")[0];\n\t// \t\t\t\t//console.log(buildingCode)\n\t//\n\t// \t\t\t\tbuildingsMap.set(buildingCode, newBuilding);\n\t// \t\t\t}\n\t// \t\t}\n\t//\n\t// \t\t// Recursively traverse child nodes\n\t// \t\tif (node.childNodes) {\n\t// \t\t\tnode.childNodes.forEach((child: any) => traverse(child));\n\t// \t\t}\n\t// \t};\n\t//\n\t// \ttraverse(doc); // Start traversing from the root document\n\t//\n\t// \t//console.log(buildingsMap.size)\n\t//\n\t// \tif (buildingsMap.size === 0) {\n\t// \t\tthrow new InsightError(\"No <td> elements found or valid buildings detected.\");\n\t// \t}\n\t//\n\t// \treturn buildingsMap;\n\t// }\n\n\tprotected async parseRoomInfo(tdElems: any, building: Building, id: string): Promise<Room | null> {\n\t\tlet number = \"\";\n\t\tlet seats = 0;\n\t\tlet type = \"\";\n\t\tlet furniture = \"\";\n\t\tlet href = \"\";\n\t\t// Extract room information from tdElems\n\t\tconst roomInfo = this.findElementInfo(tdElems, number, seats, href, furniture, type);\n\t\t({ href, number, seats, furniture, type } = roomInfo);\n\t\tconst name = `${building.getShortname()}_${number}`;\n\t\ttry {\n\t\t\t// Fetch geolocation data\n\t\t\tconst geoLoc = await this.fetchGeoLocation(building.getAddress());\n\t\t\t// Ensure both lat and lon are present\n\t\t\tif (geoLoc && typeof geoLoc.lat === \"number\" && typeof geoLoc.lon === \"number\") {\n\t\t\t\tconst roomMfields: Mfield = {\n\t\t\t\t\tlat: geoLoc.lat,\n\t\t\t\t\tlon: geoLoc.lon,\n\t\t\t\t\tseats: seats,\n\t\t\t\t};\n\n\t\t\t\t// Define the Sfield object\n\t\t\t\tconst roomSfields: Partial<Sfield> = {\n\t\t\t\t\tnumber: number,\n\t\t\t\t\tname: name,\n\t\t\t\t\ttype: type,\n\t\t\t\t\tfurniture: furniture,\n\t\t\t\t\thref: href,\n\t\t\t\t};\n\n\t\t\t\treturn new Room(id, roomMfields, roomSfields, building);\n\t\t\t}\n\t\t\treturn null;\n\t\t} catch (error) {\n\t\t\tif (error) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tprivate findElementInfo(\n\t\ttdElems: any,\n\t\tnumber: string,\n\t\tseats: number,\n\t\thref: string,\n\t\tfurniture: string,\n\t\ttype: string\n\t): { number: string; seats: number; href: string; furniture: string; type: string } {\n\t\ttdElems.forEach((tdElem: any): any => {\n\t\t\tconst classAttr = tdElem.attrs.find((attr: any) => attr.name === \"class\");\n\t\t\tconst className = classAttr ? classAttr.value : \"\";\n\n\t\t\tconst anchor = tdElem.childNodes.find((node: any) => node.nodeName === \"a\");\n\t\t\tswitch (className) {\n\t\t\t\tcase \"views-field views-field-field-room-number\":\n\t\t\t\t\tnumber = this.processNodeValue(anchor);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"views-field views-field-field-room-capacity\":\n\t\t\t\t\tseats = this.processNodeValue(tdElem);\n\t\t\t\t\t//console.log(seats)\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"views-field views-field-field-room-furniture\":\n\t\t\t\t\tfurniture = this.processNodeValue(tdElem);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"views-field views-field-field-room-type\":\n\t\t\t\t\ttype = this.processNodeValue(tdElem);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"views-field views-field-nothing\":\n\t\t\t\t\thref = anchor.attrs.find((attr: any) => attr.name === \"href\")?.value || \"\";\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new InsightError(\"Not a valid building table cell\");\n\t\t\t}\n\t\t});\n\t\treturn { number, seats, href, furniture, type };\n\t}\n\n\tprotected compareClassNames(arr1: any[], arr2: any[]): boolean {\n\t\treturn arr1.every((value) => arr2.includes(value));\n\t}\n\n\tprotected processNodeValue(tdElem: any): any {\n\t\treturn tdElem.childNodes\n\t\t\t.map((node: any) => node.value)\n\t\t\t.join(\"\")\n\t\t\t.trim();\n\t}\n\n\tprotected parseBuildingInfo(tdElems: any): Building {\n\t\t// Extract the anchor element within the <td>\n\t\t//console.log(tdElems[0].attr)\n\t\tlet fullname = \"\";\n\t\tlet shortname = \"\";\n\t\tlet address = \"\";\n\t\tlet href = \"\";\n\n\t\ttdElems.forEach((tdElem: any) => {\n\t\t\tconst classAttr = tdElem.attrs.find((attr: any) => attr.name === \"class\");\n\t\t\tconst className = classAttr ? classAttr.value : \"\";\n\n\t\t\tif (className === \"views-field views-field-field-building-image\") {\n\t\t\t\treturn; // SKIP\n\t\t\t}\n\t\t\tconst anchor = tdElem.childNodes.find((node: any) => node.nodeName === \"a\");\n\n\t\t\tswitch (className) {\n\t\t\t\tcase \"views-field views-field-field-building-code\":\n\t\t\t\t\tshortname = this.processNodeValue(tdElem);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"views-field views-field-title\":\n\t\t\t\t\tfullname = this.processNodeValue(anchor);\n\t\t\t\t\thref = anchor.attrs.find((attr: any) => attr.name === \"href\")?.value || \"\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"views-field views-field-field-building-address\":\n\t\t\t\t\taddress = this.processNodeValue(tdElem);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"views-field views-field-nothing\":\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new InsightError(\"Not a valid building table cell\");\n\t\t\t}\n\t\t});\n\n\t\t// Create and return a new Building instance\n\t\treturn new Building({ fullname, shortname, address, href });\n\t}\n\n\tprotected async fetchGeoLocation(address: string): Promise<Geolocation> {\n\t\tconst encodedAddress = encodeURIComponent(address);\n\t\tconst url = `http://cs310.students.cs.ubc.ca:11316/api/v1/project_team${this.TEAM_NUMBER}/${encodedAddress}`;\n\t\t// based on https://nodejs.org/api/http.html#http_http implementation of 'http.get(url[, options][, callback])'\n\t\treturn new Promise<Geolocation>((resolve, reject) => {\n\t\t\thttp\n\t\t\t\t.get(url, (res) => {\n\t\t\t\t\tlet error;\n\t\t\t\t\tconst errorCode = 200;\n\t\t\t\t\tif (res.statusCode !== errorCode) {\n\t\t\t\t\t\terror = new Error(`Request Failed.\\nStatus Code: ${res.statusCode}`);\n\t\t\t\t\t}\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\tres.resume();\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t}\n\n\t\t\t\t\tlet rawData = \"\";\n\t\t\t\t\tres.on(\"data\", (chunk) => {\n\t\t\t\t\t\trawData += chunk;\n\t\t\t\t\t});\n\t\t\t\t\tres.on(\"end\", () => {\n\t\t\t\t\t\tthis.fetchResponse(rawData, resolve, reject);\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.on(\"error\", (e) => {\n\t\t\t\t\treject(e);\n\t\t\t\t});\n\t\t});\n\t}\n\n\tprivate fetchResponse(\n\t\trawData: string,\n\t\tresolve: (value: PromiseLike<Geolocation> | Geolocation) => void,\n\t\treject: (reason?: any) => void\n\t): any {\n\t\ttry {\n\t\t\tconst response: GeoResponse = JSON.parse(rawData);\n\t\t\tif (response.lat !== undefined && response.lon !== undefined) {\n\t\t\t\tresolve({ lat: response.lat, lon: response.lon });\n\t\t\t} else {\n\t\t\t\treject(new Error());\n\t\t\t}\n\t\t} catch (err) {\n\t\t\treject(err);\n\t\t}\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"e318e04af032bb4e1ff4a30f0a4a47c67ebf529c","contentHash":"396130ca7c88e06cb920cc498ea056f8d421b91b8645180e6c0b5664513e9d48"},"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\rooms\\Room.ts":{"path":"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\rooms\\Room.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":19},"end":{"line":6,"column":57}},"4":{"start":{"line":14,"column":8},"end":{"line":19,"column":11}},"5":{"start":{"line":20,"column":8},"end":{"line":20,"column":21}},"6":{"start":{"line":21,"column":8},"end":{"line":21,"column":44}},"7":{"start":{"line":22,"column":8},"end":{"line":28,"column":10}},"8":{"start":{"line":29,"column":8},"end":{"line":29,"column":23}},"9":{"start":{"line":30,"column":8},"end":{"line":30,"column":23}},"10":{"start":{"line":31,"column":8},"end":{"line":31,"column":27}},"11":{"start":{"line":32,"column":8},"end":{"line":32,"column":39}},"12":{"start":{"line":35,"column":8},"end":{"line":35,"column":29}},"13":{"start":{"line":38,"column":8},"end":{"line":38,"column":30}},"14":{"start":{"line":41,"column":8},"end":{"line":41,"column":37}},"15":{"start":{"line":42,"column":8},"end":{"line":42,"column":28}},"16":{"start":{"line":45,"column":21},"end":{"line":45,"column":44}},"17":{"start":{"line":46,"column":8},"end":{"line":48,"column":9}},"18":{"start":{"line":47,"column":12},"end":{"line":47,"column":45}},"19":{"start":{"line":49,"column":8},"end":{"line":49,"column":44}},"20":{"start":{"line":52,"column":21},"end":{"line":52,"column":104}},"21":{"start":{"line":53,"column":8},"end":{"line":55,"column":9}},"22":{"start":{"line":54,"column":12},"end":{"line":54,"column":45}},"23":{"start":{"line":56,"column":8},"end":{"line":56,"column":44}},"24":{"start":{"line":59,"column":8},"end":{"line":59,"column":29}},"25":{"start":{"line":62,"column":8},"end":{"line":62,"column":30}},"26":{"start":{"line":65,"column":21},"end":{"line":65,"column":44}},"27":{"start":{"line":66,"column":8},"end":{"line":68,"column":9}},"28":{"start":{"line":67,"column":12},"end":{"line":67,"column":45}},"29":{"start":{"line":69,"column":8},"end":{"line":69,"column":42}},"30":{"start":{"line":72,"column":21},"end":{"line":72,"column":104}},"31":{"start":{"line":73,"column":8},"end":{"line":75,"column":9}},"32":{"start":{"line":74,"column":12},"end":{"line":74,"column":45}},"33":{"start":{"line":76,"column":8},"end":{"line":76,"column":42}},"34":{"start":{"line":79,"column":21},"end":{"line":79,"column":104}},"35":{"start":{"line":80,"column":8},"end":{"line":80,"column":36}},"36":{"start":{"line":83,"column":21},"end":{"line":83,"column":44}},"37":{"start":{"line":84,"column":8},"end":{"line":84,"column":36}},"38":{"start":{"line":87,"column":8},"end":{"line":87,"column":23}},"39":{"start":{"line":90,"column":8},"end":{"line":90,"column":24}},"40":{"start":{"line":93,"column":8},"end":{"line":93,"column":24}},"41":{"start":{"line":96,"column":8},"end":{"line":96,"column":26}},"42":{"start":{"line":99,"column":8},"end":{"line":99,"column":25}},"43":{"start":{"line":102,"column":8},"end":{"line":106,"column":10}},"44":{"start":{"line":109,"column":44},"end":{"line":109,"column":48}},"45":{"start":{"line":110,"column":8},"end":{"line":112,"column":9}},"46":{"start":{"line":111,"column":12},"end":{"line":111,"column":59}},"47":{"start":{"line":113,"column":55},"end":{"line":113,"column":62}},"48":{"start":{"line":114,"column":25},"end":{"line":114,"column":87}},"49":{"start":{"line":115,"column":50},"end":{"line":115,"column":57}},"50":{"start":{"line":117,"column":8},"end":{"line":122,"column":9}},"51":{"start":{"line":118,"column":12},"end":{"line":118,"column":34}},"52":{"start":{"line":121,"column":12},"end":{"line":121,"column":54}},"53":{"start":{"line":123,"column":24},"end":{"line":127,"column":9}},"54":{"start":{"line":128,"column":24},"end":{"line":137,"column":9}},"55":{"start":{"line":138,"column":8},"end":{"line":138,"column":59}},"56":{"start":{"line":141,"column":0},"end":{"line":141,"column":23}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":13,"column":4},"end":{"line":13,"column":5}},"loc":{"start":{"line":13,"column":60},"end":{"line":33,"column":5}},"line":13},"2":{"name":"(anonymous_2)","decl":{"start":{"line":34,"column":4},"end":{"line":34,"column":5}},"loc":{"start":{"line":34,"column":17},"end":{"line":36,"column":5}},"line":34},"3":{"name":"(anonymous_3)","decl":{"start":{"line":37,"column":4},"end":{"line":37,"column":5}},"loc":{"start":{"line":37,"column":22},"end":{"line":39,"column":5}},"line":37},"4":{"name":"(anonymous_4)","decl":{"start":{"line":40,"column":4},"end":{"line":40,"column":5}},"loc":{"start":{"line":40,"column":21},"end":{"line":43,"column":5}},"line":40},"5":{"name":"(anonymous_5)","decl":{"start":{"line":44,"column":4},"end":{"line":44,"column":5}},"loc":{"start":{"line":44,"column":29},"end":{"line":50,"column":5}},"line":44},"6":{"name":"(anonymous_6)","decl":{"start":{"line":51,"column":4},"end":{"line":51,"column":5}},"loc":{"start":{"line":51,"column":29},"end":{"line":57,"column":5}},"line":51},"7":{"name":"(anonymous_7)","decl":{"start":{"line":58,"column":4},"end":{"line":58,"column":5}},"loc":{"start":{"line":58,"column":17},"end":{"line":60,"column":5}},"line":58},"8":{"name":"(anonymous_8)","decl":{"start":{"line":61,"column":4},"end":{"line":61,"column":5}},"loc":{"start":{"line":61,"column":22},"end":{"line":63,"column":5}},"line":61},"9":{"name":"(anonymous_9)","decl":{"start":{"line":64,"column":4},"end":{"line":64,"column":5}},"loc":{"start":{"line":64,"column":28},"end":{"line":70,"column":5}},"line":64},"10":{"name":"(anonymous_10)","decl":{"start":{"line":71,"column":4},"end":{"line":71,"column":5}},"loc":{"start":{"line":71,"column":28},"end":{"line":77,"column":5}},"line":71},"11":{"name":"(anonymous_11)","decl":{"start":{"line":78,"column":4},"end":{"line":78,"column":5}},"loc":{"start":{"line":78,"column":27},"end":{"line":81,"column":5}},"line":78},"12":{"name":"(anonymous_12)","decl":{"start":{"line":82,"column":4},"end":{"line":82,"column":5}},"loc":{"start":{"line":82,"column":27},"end":{"line":85,"column":5}},"line":82},"13":{"name":"(anonymous_13)","decl":{"start":{"line":86,"column":4},"end":{"line":86,"column":5}},"loc":{"start":{"line":86,"column":12},"end":{"line":88,"column":5}},"line":86},"14":{"name":"(anonymous_14)","decl":{"start":{"line":89,"column":4},"end":{"line":89,"column":5}},"loc":{"start":{"line":89,"column":13},"end":{"line":91,"column":5}},"line":89},"15":{"name":"(anonymous_15)","decl":{"start":{"line":92,"column":4},"end":{"line":92,"column":5}},"loc":{"start":{"line":92,"column":13},"end":{"line":94,"column":5}},"line":92},"16":{"name":"(anonymous_16)","decl":{"start":{"line":95,"column":4},"end":{"line":95,"column":5}},"loc":{"start":{"line":95,"column":15},"end":{"line":97,"column":5}},"line":95},"17":{"name":"(anonymous_17)","decl":{"start":{"line":98,"column":4},"end":{"line":98,"column":5}},"loc":{"start":{"line":98,"column":14},"end":{"line":100,"column":5}},"line":98},"18":{"name":"(anonymous_18)","decl":{"start":{"line":101,"column":4},"end":{"line":101,"column":5}},"loc":{"start":{"line":101,"column":20},"end":{"line":107,"column":5}},"line":101},"19":{"name":"(anonymous_19)","decl":{"start":{"line":108,"column":4},"end":{"line":108,"column":5}},"loc":{"start":{"line":108,"column":26},"end":{"line":139,"column":5}},"line":108}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":23,"column":22},"end":{"line":23,"column":64}},"type":"binary-expr","locations":[{"start":{"line":23,"column":22},"end":{"line":23,"column":38}},{"start":{"line":23,"column":42},"end":{"line":23,"column":64}}],"line":23},"4":{"loc":{"start":{"line":24,"column":23},"end":{"line":24,"column":67}},"type":"binary-expr","locations":[{"start":{"line":24,"column":23},"end":{"line":24,"column":40}},{"start":{"line":24,"column":44},"end":{"line":24,"column":67}}],"line":24},"5":{"loc":{"start":{"line":25,"column":21},"end":{"line":25,"column":61}},"type":"binary-expr","locations":[{"start":{"line":25,"column":21},"end":{"line":25,"column":36}},{"start":{"line":25,"column":40},"end":{"line":25,"column":61}}],"line":25},"6":{"loc":{"start":{"line":26,"column":18},"end":{"line":26,"column":53}},"type":"binary-expr","locations":[{"start":{"line":26,"column":18},"end":{"line":26,"column":30}},{"start":{"line":26,"column":34},"end":{"line":26,"column":53}}],"line":26},"7":{"loc":{"start":{"line":46,"column":8},"end":{"line":48,"column":9}},"type":"if","locations":[{"start":{"line":46,"column":8},"end":{"line":48,"column":9}},{"start":{"line":46,"column":8},"end":{"line":48,"column":9}}],"line":46},"8":{"loc":{"start":{"line":46,"column":12},"end":{"line":46,"column":44}},"type":"binary-expr","locations":[{"start":{"line":46,"column":12},"end":{"line":46,"column":21}},{"start":{"line":46,"column":25},"end":{"line":46,"column":44}}],"line":46},"9":{"loc":{"start":{"line":53,"column":8},"end":{"line":55,"column":9}},"type":"if","locations":[{"start":{"line":53,"column":8},"end":{"line":55,"column":9}},{"start":{"line":53,"column":8},"end":{"line":55,"column":9}}],"line":53},"10":{"loc":{"start":{"line":53,"column":12},"end":{"line":53,"column":44}},"type":"binary-expr","locations":[{"start":{"line":53,"column":12},"end":{"line":53,"column":21}},{"start":{"line":53,"column":25},"end":{"line":53,"column":44}}],"line":53},"11":{"loc":{"start":{"line":66,"column":8},"end":{"line":68,"column":9}},"type":"if","locations":[{"start":{"line":66,"column":8},"end":{"line":68,"column":9}},{"start":{"line":66,"column":8},"end":{"line":68,"column":9}}],"line":66},"12":{"loc":{"start":{"line":66,"column":12},"end":{"line":66,"column":44}},"type":"binary-expr","locations":[{"start":{"line":66,"column":12},"end":{"line":66,"column":21}},{"start":{"line":66,"column":25},"end":{"line":66,"column":44}}],"line":66},"13":{"loc":{"start":{"line":73,"column":8},"end":{"line":75,"column":9}},"type":"if","locations":[{"start":{"line":73,"column":8},"end":{"line":75,"column":9}},{"start":{"line":73,"column":8},"end":{"line":75,"column":9}}],"line":73},"14":{"loc":{"start":{"line":73,"column":12},"end":{"line":73,"column":44}},"type":"binary-expr","locations":[{"start":{"line":73,"column":12},"end":{"line":73,"column":21}},{"start":{"line":73,"column":25},"end":{"line":73,"column":44}}],"line":73},"15":{"loc":{"start":{"line":110,"column":8},"end":{"line":112,"column":9}},"type":"if","locations":[{"start":{"line":110,"column":8},"end":{"line":112,"column":9}},{"start":{"line":110,"column":8},"end":{"line":112,"column":9}}],"line":110},"16":{"loc":{"start":{"line":110,"column":12},"end":{"line":110,"column":42}},"type":"binary-expr","locations":[{"start":{"line":110,"column":12},"end":{"line":110,"column":18}},{"start":{"line":110,"column":22},"end":{"line":110,"column":30}},{"start":{"line":110,"column":34},"end":{"line":110,"column":42}}],"line":110},"17":{"loc":{"start":{"line":117,"column":8},"end":{"line":122,"column":9}},"type":"if","locations":[{"start":{"line":117,"column":8},"end":{"line":122,"column":9}},{"start":{"line":117,"column":8},"end":{"line":122,"column":9}}],"line":117}},"s":{"0":1,"1":1,"2":1,"3":1,"4":3806,"5":3806,"6":3806,"7":3806,"8":3806,"9":3806,"10":3806,"11":3806,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":3806,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":3806,"39":0,"40":0,"41":0,"42":0,"43":3806,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":1},"f":{"0":1,"1":3806,"2":0,"3":0,"4":0,"5":0,"6":0,"7":3806,"8":0,"9":0,"10":0,"11":0,"12":0,"13":3806,"14":0,"15":0,"16":0,"17":0,"18":3806,"19":0},"b":{"0":[1,1,1],"1":[1,0],"2":[1,1],"3":[3806,3806],"4":[3806,3806],"5":[3806,3806],"6":[3806,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0,0],"17":[0,0]},"inputSourceMap":{"version":3,"file":"C:/Users/oreak/IdeaProjects/project_team059/src/controller/rooms/Room.ts","sources":["C:/Users/oreak/IdeaProjects/project_team059/src/controller/rooms/Room.ts"],"names":[],"mappings":"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","sourcesContent":["import Building from \"./Building\";\n\nexport interface Sfield {\n\tfullname: string;\n\tshortname: string;\n\tnumber: string;\n\tname: string;\n\taddress: string;\n\ttype: string;\n\tfurniture: string;\n\thref: string;\n}\n\nexport interface Mfield {\n\tlat: number;\n\tlon: number;\n\tseats: number;\n}\n\ninterface RoomJSON {\n\tsetID: string;\n\tsFields: Sfield;\n\tmFields: {\n\t\tlat: number;\n\t\tlon: number;\n\t\tseats: number;\n\t};\n}\n\nexport default class Room extends Building {\n\tprivate id: string;\n\tprivate lat: number;\n\tprivate lon: number;\n\tprivate seats: number;\n\tprivate href: string;\n\n\tconstructor(\n\t\tid: string,\n\t\t{ lat, lon, seats }: Mfield,\n\t\tsfields: Partial<Sfield>,\n\t\tbuilding: Building // Accepting a Building instance\n\t) {\n\t\tsuper({\n\t\t\tfullname: building.getFullname(),\n\t\t\tshortname: building.getShortname(),\n\t\t\taddress: building.getAddress(),\n\t\t\thref: building.getbHref(),\n\t\t});\n\t\tthis.id = id;\n\t\tthis._mfields = { lat, lon, seats };\n\t\tthis._sfields = {\n\t\t\tfullname: sfields.fullname || building.getFullname(),\n\t\t\tshortname: sfields.shortname || building.getShortname(),\n\t\t\taddress: sfields.address || building.getAddress(),\n\t\t\thref: sfields.href || building.getbHref(),\n\t\t\t...sfields,\n\t\t} as Sfield;\n\t\tthis.lon = lon;\n\t\tthis.lat = lat;\n\t\tthis.seats = seats;\n\t\tthis.href = this._sfields.href;\n\t}\n\n\tpublic getMfields(): Mfield {\n\t\treturn this._mfields;\n\t}\n\n\tpublic setMfields(value: Mfield): void {\n\t\tthis._mfields = value;\n\t}\n\n\tpublic setHref(newHref: string): void {\n\t\tthis._sfields.href = newHref;\n\t\tthis.href = newHref;\n\t}\n\n\tpublic setMfield(index: number, newVal: number): void {\n\t\tconst keys: (keyof Mfield)[] = [\"lat\", \"lon\", \"seats\"];\n\t\tif (index < 0 || index > keys.length) {\n\t\t\tthrow new Error(\"Out of bounds\");\n\t\t}\n\t\tthis._mfields[keys[index]] = newVal;\n\t}\n\n\tpublic setSField(index: number, newVal: string): void {\n\t\tconst keys: (keyof Sfield)[] = [\"fullname\", \"shortname\", \"number\", \"name\", \"address\", \"type\", \"furniture\", \"href\"];\n\t\tif (index < 0 || index > keys.length) {\n\t\t\tthrow new Error(\"Out of bounds\");\n\t\t}\n\t\tthis._sfields[keys[index]] = newVal;\n\t}\n\n\tpublic getSfields(): Sfield {\n\t\treturn this._sfields;\n\t}\n\n\tpublic setSfields(value: Sfield): void {\n\t\tthis._sfields = value;\n\t}\n\n\tpublic getMFieldByIndex(index: number): number {\n\t\tconst keys: (keyof Mfield)[] = [\"lat\", \"lon\", \"seats\"];\n\t\tif (index < 0 || index > keys.length) {\n\t\t\tthrow new Error(\"Out of bounds\");\n\t\t}\n\t\treturn this._mfields[keys[index]];\n\t}\n\n\tpublic getSFieldByIndex(index: number): string {\n\t\tconst keys: (keyof Sfield)[] = [\"fullname\", \"shortname\", \"number\", \"name\", \"address\", \"type\", \"furniture\", \"href\"];\n\t\tif (index < 0 || index > keys.length) {\n\t\t\tthrow new Error(\"Out of bounds\");\n\t\t}\n\t\treturn this._sfields[keys[index]];\n\t}\n\n\tpublic getSFieldIndex(sfield: string): number {\n\t\tconst keys: (keyof Sfield)[] = [\"fullname\", \"shortname\", \"number\", \"name\", \"address\", \"type\", \"furniture\", \"href\"];\n\t\treturn keys.indexOf(sfield as keyof Sfield);\n\t\t// -1 if index is not found\n\t}\n\n\tpublic getMFieldIndex(mfield: string): number {\n\t\tconst keys: (keyof Mfield)[] = [\"lat\", \"lon\", \"seats\"];\n\t\treturn keys.indexOf(mfield as keyof Mfield);\n\t\t// -1 if index is not found\n\t}\n\n\tpublic getID(): string {\n\t\treturn this.id;\n\t}\n\n\tpublic getLat(): number {\n\t\treturn this.lat;\n\t}\n\n\tpublic getLon(): number {\n\t\treturn this.lon;\n\t}\n\n\tpublic getSeats(): number {\n\t\treturn this.seats;\n\t}\n\n\tpublic getHref(): string {\n\t\treturn this.href;\n\t}\n\tpublic convertToJSON(): { setID: string; sFields: Sfield; mFields: Mfield } {\n\t\treturn {\n\t\t\tsetID: this.getID(),\n\t\t\tsFields: { ...this._sfields },\n\t\t\tmFields: { ...this._mfields },\n\t\t};\n\t}\n\n\tpublic static fromJSON(json: RoomJSON): Room {\n\t\tconst { setID, sFields, mFields } = json;\n\n\t\t// validate required fields\n\t\tif (!setID || !sFields || !mFields) {\n\t\t\tthrow new Error(\"Invalid JSON data for Room.\");\n\t\t}\n\n\t\t// extract building-related fields\n\t\tconst { fullname, shortname, address, href } = sFields;\n\n\t\t// create building\n\t\tconst building = new Building({ fullname, shortname, address, href });\n\n\t\t// get room-specific fields\n\t\tconst { number, name, type, furniture } = sFields;\n\t\tlet seats: number;\n\t\tif (typeof mFields.seats === \"number\") {\n\t\t\tseats = mFields.seats;\n\t\t} else {\n\t\t\tthrow new Error(`Invalid type for seats`);\n\t\t}\n\n\t\t// create the Mfield object\n\t\tconst mfields: Mfield = {\n\t\t\tlat: mFields.lat,\n\t\t\tlon: mFields.lon,\n\t\t\tseats: seats,\n\t\t};\n\n\t\t// create the Sfield object\n\t\tconst sfields: Sfield = {\n\t\t\tfullname,\n\t\t\tshortname,\n\t\t\tnumber,\n\t\t\tname,\n\t\t\taddress,\n\t\t\ttype,\n\t\t\tfurniture,\n\t\t\thref,\n\t\t};\n\n\t\t// instantiate and return the Room object\n\t\treturn new Room(setID, mfields, sfields, building);\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"3201497a1c1b273e8358dc15de7b547edfba1797","contentHash":"cc2c153f62791824aa59c1e8659f452dbae3837cf214be0d74de5f0e28b2a03d"},"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\rooms\\Building.ts":{"path":"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\rooms\\Building.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":11,"column":8},"end":{"line":11,"column":40}},"2":{"start":{"line":12,"column":8},"end":{"line":12,"column":42}},"3":{"start":{"line":13,"column":8},"end":{"line":13,"column":38}},"4":{"start":{"line":14,"column":8},"end":{"line":14,"column":33}},"5":{"start":{"line":15,"column":8},"end":{"line":15,"column":53}},"6":{"start":{"line":16,"column":8},"end":{"line":25,"column":10}},"7":{"start":{"line":28,"column":8},"end":{"line":28,"column":29}},"8":{"start":{"line":31,"column":8},"end":{"line":31,"column":30}},"9":{"start":{"line":34,"column":8},"end":{"line":34,"column":28}},"10":{"start":{"line":37,"column":8},"end":{"line":37,"column":26}},"11":{"start":{"line":40,"column":55},"end":{"line":40,"column":59}},"12":{"start":{"line":41,"column":8},"end":{"line":41,"column":68}},"13":{"start":{"line":44,"column":0},"end":{"line":44,"column":27}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":10,"column":4},"end":{"line":10,"column":5}},"loc":{"start":{"line":10,"column":24},"end":{"line":26,"column":5}},"line":10},"1":{"name":"(anonymous_1)","decl":{"start":{"line":27,"column":4},"end":{"line":27,"column":5}},"loc":{"start":{"line":27,"column":18},"end":{"line":29,"column":5}},"line":27},"2":{"name":"(anonymous_2)","decl":{"start":{"line":30,"column":4},"end":{"line":30,"column":5}},"loc":{"start":{"line":30,"column":19},"end":{"line":32,"column":5}},"line":30},"3":{"name":"(anonymous_3)","decl":{"start":{"line":33,"column":4},"end":{"line":33,"column":5}},"loc":{"start":{"line":33,"column":17},"end":{"line":35,"column":5}},"line":33},"4":{"name":"(anonymous_4)","decl":{"start":{"line":36,"column":4},"end":{"line":36,"column":5}},"loc":{"start":{"line":36,"column":15},"end":{"line":38,"column":5}},"line":36},"5":{"name":"(anonymous_5)","decl":{"start":{"line":39,"column":4},"end":{"line":39,"column":5}},"loc":{"start":{"line":39,"column":26},"end":{"line":42,"column":5}},"line":39}},"branchMap":{},"s":{"0":1,"1":5581,"2":5581,"3":5581,"4":5581,"5":5581,"6":5581,"7":7612,"8":11418,"9":11418,"10":5581,"11":0,"12":0,"13":1},"f":{"0":5581,"1":7612,"2":11418,"3":11418,"4":5581,"5":0},"b":{},"inputSourceMap":{"version":3,"file":"C:/Users/oreak/IdeaProjects/project_team059/src/controller/rooms/Building.ts","sources":["C:/Users/oreak/IdeaProjects/project_team059/src/controller/rooms/Building.ts"],"names":[],"mappings":";;AAEA,MAAqB,QAAQ;IAClB,QAAQ,CAAS;IACjB,SAAS,CAAS;IAClB,OAAO,CAAS;IAChB,KAAK,CAAS;IACd,QAAQ,CAAS;IACjB,QAAQ,CAAS;IAE3B,YAAY,MAA+E;QAC1F,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;QAChC,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC;QAClC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAG9B,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC;QAGzB,IAAI,CAAC,QAAQ,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC;QAC7C,IAAI,CAAC,QAAQ,GAAG;YACf,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,MAAM,EAAE,EAAE;YACV,IAAI,EAAE,EAAE;YACR,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,IAAI,EAAE,EAAE;YACR,SAAS,EAAE,EAAE;YACb,IAAI,EAAE,EAAE;SACR,CAAC;IACH,CAAC;IAEM,WAAW;QACjB,OAAO,IAAI,CAAC,QAAQ,CAAC;IACtB,CAAC;IAEM,YAAY;QAClB,OAAO,IAAI,CAAC,SAAS,CAAC;IACvB,CAAC;IAEM,UAAU;QAChB,OAAO,IAAI,CAAC,OAAO,CAAC;IACrB,CAAC;IAGM,QAAQ;QACd,OAAO,IAAI,CAAC,KAAK,CAAC;IACnB,CAAC;IAEM,MAAM,CAAC,QAAQ,CAAC,IAAS;QAC/B,MAAM,EAAE,QAAQ,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC;QACpD,OAAO,IAAI,QAAQ,CAAC,EAAE,QAAQ,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;IAC7D,CAAC;CACD;AAnDD,2BAmDC","sourcesContent":["import { Mfield, Sfield } from \"./Room\";\n\nexport default class Building {\n\tprotected fullname: string;\n\tprotected shortname: string;\n\tprotected address: string;\n\tprotected bHref: string;\n\tprotected _mfields: Mfield;\n\tprotected _sfields: Sfield;\n\n\tconstructor(params: Required<Record<\"fullname\" | \"shortname\" | \"address\" | \"href\", string>>) {\n\t\tthis.fullname = params.fullname;\n\t\tthis.shortname = params.shortname;\n\t\tthis.address = params.address;\n\n\t\t// the BUILDING href link NOT the room href Link\n\t\tthis.bHref = params.href;\n\n\t\t// Initialize Mfield and Sfield with default values\n\t\tthis._mfields = { lat: 0, lon: 0, seats: 0 };\n\t\tthis._sfields = {\n\t\t\tfullname: this.fullname,\n\t\t\tshortname: this.shortname,\n\t\t\tnumber: \"\",\n\t\t\tname: \"\",\n\t\t\taddress: this.address,\n\t\t\ttype: \"\",\n\t\t\tfurniture: \"\",\n\t\t\thref: \"\",\n\t\t};\n\t}\n\n\tpublic getFullname(): string {\n\t\treturn this.fullname;\n\t}\n\n\tpublic getShortname(): string {\n\t\treturn this.shortname;\n\t}\n\n\tpublic getAddress(): string {\n\t\treturn this.address;\n\t}\n\n\t// the BUILDING href link NOT the room href Link\n\tpublic getbHref(): string {\n\t\treturn this.bHref;\n\t}\n\n\tpublic static fromJSON(json: any): Building {\n\t\tconst { fullname, shortname, address, href } = json;\n\t\treturn new Building({ fullname, shortname, address, href });\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"62abe00c21b485678d0089a7f92f8093b2f15d76","contentHash":"58693bf854bc78d9d033c224d5087be5d3872da1a4ec3dca7726c1e04e1841ff"},"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\rooms\\RoomDiskWriter.ts":{"path":"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\rooms\\RoomDiskWriter.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":12,"column":3}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},"2":{"start":{"line":3,"column":26},"end":{"line":3,"column":33}},"3":{"start":{"line":4,"column":15},"end":{"line":4,"column":52}},"4":{"start":{"line":5,"column":4},"end":{"line":7,"column":5}},"5":{"start":{"line":6,"column":6},"end":{"line":6,"column":68}},"6":{"start":{"line":6,"column":51},"end":{"line":6,"column":63}},"7":{"start":{"line":8,"column":4},"end":{"line":8,"column":39}},"8":{"start":{"line":10,"column":4},"end":{"line":10,"column":33}},"9":{"start":{"line":10,"column":26},"end":{"line":10,"column":33}},"10":{"start":{"line":11,"column":4},"end":{"line":11,"column":17}},"11":{"start":{"line":13,"column":25},"end":{"line":17,"column":2}},"12":{"start":{"line":14,"column":4},"end":{"line":14,"column":72}},"13":{"start":{"line":16,"column":4},"end":{"line":16,"column":21}},"14":{"start":{"line":18,"column":19},"end":{"line":24,"column":1}},"15":{"start":{"line":19,"column":4},"end":{"line":19,"column":42}},"16":{"start":{"line":19,"column":31},"end":{"line":19,"column":42}},"17":{"start":{"line":20,"column":17},"end":{"line":20,"column":19}},"18":{"start":{"line":21,"column":4},"end":{"line":21,"column":141}},"19":{"start":{"line":21,"column":21},"end":{"line":21,"column":141}},"20":{"start":{"line":21,"column":40},"end":{"line":21,"column":141}},"21":{"start":{"line":21,"column":109},"end":{"line":21,"column":141}},"22":{"start":{"line":22,"column":4},"end":{"line":22,"column":36}},"23":{"start":{"line":23,"column":4},"end":{"line":23,"column":18}},"24":{"start":{"line":25,"column":22},"end":{"line":27,"column":1}},"25":{"start":{"line":26,"column":4},"end":{"line":26,"column":62}},"26":{"start":{"line":28,"column":0},"end":{"line":28,"column":62}},"27":{"start":{"line":29,"column":16},"end":{"line":29,"column":49}},"28":{"start":{"line":30,"column":22},"end":{"line":30,"column":63}},"29":{"start":{"line":31,"column":15},"end":{"line":31,"column":46}},"30":{"start":{"line":32,"column":25},"end":{"line":32,"column":53}},"31":{"start":{"line":33,"column":19},"end":{"line":33,"column":55}},"32":{"start":{"line":35,"column":23},"end":{"line":40,"column":5}},"33":{"start":{"line":42,"column":8},"end":{"line":42,"column":16}},"34":{"start":{"line":45,"column":23},"end":{"line":45,"column":53}},"35":{"start":{"line":46,"column":20},"end":{"line":46,"column":59}},"36":{"start":{"line":47,"column":8},"end":{"line":47,"column":58}},"37":{"start":{"line":50,"column":26},"end":{"line":50,"column":35}},"38":{"start":{"line":51,"column":8},"end":{"line":51,"column":53}},"39":{"start":{"line":52,"column":25},"end":{"line":52,"column":79}},"40":{"start":{"line":53,"column":8},"end":{"line":53,"column":34}},"41":{"start":{"line":56,"column":28},"end":{"line":56,"column":30}},"42":{"start":{"line":57,"column":21},"end":{"line":57,"column":51}},"43":{"start":{"line":58,"column":22},"end":{"line":58,"column":23}},"44":{"start":{"line":59,"column":23},"end":{"line":59,"column":77}},"45":{"start":{"line":60,"column":8},"end":{"line":62,"column":9}},"46":{"start":{"line":61,"column":12},"end":{"line":61,"column":60}},"47":{"start":{"line":63,"column":8},"end":{"line":73,"column":11}},"48":{"start":{"line":64,"column":33},"end":{"line":64,"column":59}},"49":{"start":{"line":65,"column":12},"end":{"line":72,"column":13}},"50":{"start":{"line":66,"column":39},"end":{"line":70,"column":18}},"51":{"start":{"line":67,"column":37},"end":{"line":67,"column":59}},"52":{"start":{"line":68,"column":37},"end":{"line":68,"column":66}},"53":{"start":{"line":69,"column":20},"end":{"line":69,"column":75}},"54":{"start":{"line":71,"column":16},"end":{"line":71,"column":49}},"55":{"start":{"line":74,"column":27},"end":{"line":74,"column":57}},"56":{"start":{"line":75,"column":25},"end":{"line":75,"column":27}},"57":{"start":{"line":76,"column":8},"end":{"line":80,"column":11}},"58":{"start":{"line":77,"column":12},"end":{"line":79,"column":13}},"59":{"start":{"line":78,"column":16},"end":{"line":78,"column":40}},"60":{"start":{"line":81,"column":8},"end":{"line":81,"column":34}},"61":{"start":{"line":82,"column":8},"end":{"line":84,"column":9}},"62":{"start":{"line":83,"column":12},"end":{"line":83,"column":70}},"63":{"start":{"line":85,"column":8},"end":{"line":85,"column":50}},"64":{"start":{"line":86,"column":8},"end":{"line":86,"column":100}},"65":{"start":{"line":87,"column":8},"end":{"line":87,"column":24}},"66":{"start":{"line":90,"column":29},"end":{"line":90,"column":31}},"67":{"start":{"line":91,"column":25},"end":{"line":108,"column":9}},"68":{"start":{"line":92,"column":35},"end":{"line":92,"column":37}},"69":{"start":{"line":93,"column":12},"end":{"line":104,"column":13}},"70":{"start":{"line":94,"column":32},"end":{"line":94,"column":90}},"71":{"start":{"line":94,"column":66},"end":{"line":94,"column":89}},"72":{"start":{"line":95,"column":16},"end":{"line":99,"column":19}},"73":{"start":{"line":96,"column":38},"end":{"line":96,"column":88}},"74":{"start":{"line":96,"column":66},"end":{"line":96,"column":87}},"75":{"start":{"line":97,"column":38},"end":{"line":97,"column":53}},"76":{"start":{"line":98,"column":20},"end":{"line":98,"column":51}},"77":{"start":{"line":100,"column":16},"end":{"line":103,"column":17}},"78":{"start":{"line":101,"column":36},"end":{"line":101,"column":77}},"79":{"start":{"line":102,"column":20},"end":{"line":102,"column":47}},"80":{"start":{"line":105,"column":12},"end":{"line":107,"column":13}},"81":{"start":{"line":106,"column":16},"end":{"line":106,"column":68}},"82":{"start":{"line":106,"column":51},"end":{"line":106,"column":66}},"83":{"start":{"line":109,"column":8},"end":{"line":109,"column":22}},"84":{"start":{"line":110,"column":22},"end":{"line":110,"column":24}},"85":{"start":{"line":111,"column":8},"end":{"line":118,"column":11}},"86":{"start":{"line":112,"column":12},"end":{"line":116,"column":15}},"87":{"start":{"line":113,"column":16},"end":{"line":115,"column":17}},"88":{"start":{"line":114,"column":20},"end":{"line":114,"column":37}},"89":{"start":{"line":117,"column":12},"end":{"line":117,"column":25}},"90":{"start":{"line":121,"column":20},"end":{"line":123,"column":9}},"91":{"start":{"line":124,"column":21},"end":{"line":124,"column":40}},"92":{"start":{"line":125,"column":8},"end":{"line":125,"column":71}},"93":{"start":{"line":128,"column":33},"end":{"line":128,"column":35}},"94":{"start":{"line":129,"column":8},"end":{"line":135,"column":9}},"95":{"start":{"line":130,"column":12},"end":{"line":134,"column":13}},"96":{"start":{"line":131,"column":33},"end":{"line":131,"column":53}},"97":{"start":{"line":132,"column":33},"end":{"line":132,"column":125}},"98":{"start":{"line":133,"column":16},"end":{"line":133,"column":48}},"99":{"start":{"line":136,"column":8},"end":{"line":136,"column":44}},"100":{"start":{"line":139,"column":0},"end":{"line":139,"column":33}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":74},"end":{"line":2,"column":75}},"loc":{"start":{"line":2,"column":96},"end":{"line":9,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":6,"column":38},"end":{"line":6,"column":39}},"loc":{"start":{"line":6,"column":49},"end":{"line":6,"column":65}},"line":6},"2":{"name":"(anonymous_2)","decl":{"start":{"line":9,"column":6},"end":{"line":9,"column":7}},"loc":{"start":{"line":9,"column":28},"end":{"line":12,"column":1}},"line":9},"3":{"name":"(anonymous_3)","decl":{"start":{"line":13,"column":80},"end":{"line":13,"column":81}},"loc":{"start":{"line":13,"column":95},"end":{"line":15,"column":1}},"line":13},"4":{"name":"(anonymous_4)","decl":{"start":{"line":15,"column":5},"end":{"line":15,"column":6}},"loc":{"start":{"line":15,"column":20},"end":{"line":17,"column":1}},"line":15},"5":{"name":"(anonymous_5)","decl":{"start":{"line":18,"column":50},"end":{"line":18,"column":51}},"loc":{"start":{"line":18,"column":65},"end":{"line":24,"column":1}},"line":18},"6":{"name":"(anonymous_6)","decl":{"start":{"line":25,"column":56},"end":{"line":25,"column":57}},"loc":{"start":{"line":25,"column":71},"end":{"line":27,"column":1}},"line":25},"7":{"name":"(anonymous_7)","decl":{"start":{"line":41,"column":4},"end":{"line":41,"column":5}},"loc":{"start":{"line":41,"column":18},"end":{"line":43,"column":5}},"line":41},"8":{"name":"(anonymous_8)","decl":{"start":{"line":44,"column":4},"end":{"line":44,"column":5}},"loc":{"start":{"line":44,"column":54},"end":{"line":48,"column":5}},"line":44},"9":{"name":"(anonymous_9)","decl":{"start":{"line":49,"column":4},"end":{"line":49,"column":5}},"loc":{"start":{"line":49,"column":49},"end":{"line":54,"column":5}},"line":49},"10":{"name":"(anonymous_10)","decl":{"start":{"line":55,"column":4},"end":{"line":55,"column":5}},"loc":{"start":{"line":55,"column":54},"end":{"line":88,"column":5}},"line":55},"11":{"name":"(anonymous_11)","decl":{"start":{"line":63,"column":23},"end":{"line":63,"column":24}},"loc":{"start":{"line":63,"column":47},"end":{"line":73,"column":9}},"line":63},"12":{"name":"(anonymous_12)","decl":{"start":{"line":66,"column":63},"end":{"line":66,"column":64}},"loc":{"start":{"line":66,"column":83},"end":{"line":70,"column":17}},"line":66},"13":{"name":"(anonymous_13)","decl":{"start":{"line":76,"column":27},"end":{"line":76,"column":28}},"loc":{"start":{"line":76,"column":38},"end":{"line":80,"column":9}},"line":76},"14":{"name":"(anonymous_14)","decl":{"start":{"line":89,"column":4},"end":{"line":89,"column":5}},"loc":{"start":{"line":89,"column":48},"end":{"line":119,"column":5}},"line":89},"15":{"name":"(anonymous_15)","decl":{"start":{"line":91,"column":25},"end":{"line":91,"column":26}},"loc":{"start":{"line":91,"column":35},"end":{"line":108,"column":9}},"line":91},"16":{"name":"(anonymous_16)","decl":{"start":{"line":94,"column":55},"end":{"line":94,"column":56}},"loc":{"start":{"line":94,"column":66},"end":{"line":94,"column":89}},"line":94},"17":{"name":"(anonymous_17)","decl":{"start":{"line":95,"column":32},"end":{"line":95,"column":33}},"loc":{"start":{"line":95,"column":44},"end":{"line":99,"column":17}},"line":95},"18":{"name":"(anonymous_18)","decl":{"start":{"line":96,"column":56},"end":{"line":96,"column":57}},"loc":{"start":{"line":96,"column":66},"end":{"line":96,"column":87}},"line":96},"19":{"name":"(anonymous_19)","decl":{"start":{"line":106,"column":40},"end":{"line":106,"column":41}},"loc":{"start":{"line":106,"column":51},"end":{"line":106,"column":66}},"line":106},"20":{"name":"(anonymous_20)","decl":{"start":{"line":111,"column":46},"end":{"line":111,"column":47}},"loc":{"start":{"line":111,"column":59},"end":{"line":118,"column":9}},"line":111},"21":{"name":"(anonymous_21)","decl":{"start":{"line":112,"column":28},"end":{"line":112,"column":29}},"loc":{"start":{"line":112,"column":38},"end":{"line":116,"column":13}},"line":112},"22":{"name":"(anonymous_22)","decl":{"start":{"line":120,"column":4},"end":{"line":120,"column":5}},"loc":{"start":{"line":120,"column":54},"end":{"line":126,"column":5}},"line":120},"23":{"name":"(anonymous_23)","decl":{"start":{"line":127,"column":4},"end":{"line":127,"column":5}},"loc":{"start":{"line":127,"column":38},"end":{"line":137,"column":5}},"line":127}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":12,"column":3}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":57},"end":{"line":12,"column":2}}],"line":2},"1":{"loc":{"start":{"line":2,"column":57},"end":{"line":12,"column":2}},"type":"cond-expr","locations":[{"start":{"line":2,"column":74},"end":{"line":9,"column":1}},{"start":{"line":9,"column":6},"end":{"line":12,"column":1}}],"line":2},"2":{"loc":{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},"type":"if","locations":[{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},{"start":{"line":3,"column":4},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":5,"column":4},"end":{"line":7,"column":5}},"type":"if","locations":[{"start":{"line":5,"column":4},"end":{"line":7,"column":5}},{"start":{"line":5,"column":4},"end":{"line":7,"column":5}}],"line":5},"4":{"loc":{"start":{"line":5,"column":8},"end":{"line":5,"column":85}},"type":"binary-expr","locations":[{"start":{"line":5,"column":8},"end":{"line":5,"column":13}},{"start":{"line":5,"column":18},"end":{"line":5,"column":84}}],"line":5},"5":{"loc":{"start":{"line":5,"column":18},"end":{"line":5,"column":84}},"type":"cond-expr","locations":[{"start":{"line":5,"column":34},"end":{"line":5,"column":47}},{"start":{"line":5,"column":50},"end":{"line":5,"column":84}}],"line":5},"6":{"loc":{"start":{"line":5,"column":50},"end":{"line":5,"column":84}},"type":"binary-expr","locations":[{"start":{"line":5,"column":50},"end":{"line":5,"column":63}},{"start":{"line":5,"column":67},"end":{"line":5,"column":84}}],"line":5},"7":{"loc":{"start":{"line":10,"column":4},"end":{"line":10,"column":33}},"type":"if","locations":[{"start":{"line":10,"column":4},"end":{"line":10,"column":33}},{"start":{"line":10,"column":4},"end":{"line":10,"column":33}}],"line":10},"8":{"loc":{"start":{"line":13,"column":25},"end":{"line":17,"column":2}},"type":"binary-expr","locations":[{"start":{"line":13,"column":26},"end":{"line":13,"column":30}},{"start":{"line":13,"column":34},"end":{"line":13,"column":57}},{"start":{"line":13,"column":63},"end":{"line":17,"column":1}}],"line":13},"9":{"loc":{"start":{"line":13,"column":63},"end":{"line":17,"column":1}},"type":"cond-expr","locations":[{"start":{"line":13,"column":80},"end":{"line":15,"column":1}},{"start":{"line":15,"column":5},"end":{"line":17,"column":1}}],"line":13},"10":{"loc":{"start":{"line":18,"column":19},"end":{"line":24,"column":1}},"type":"binary-expr","locations":[{"start":{"line":18,"column":20},"end":{"line":18,"column":24}},{"start":{"line":18,"column":28},"end":{"line":18,"column":45}},{"start":{"line":18,"column":50},"end":{"line":24,"column":1}}],"line":18},"11":{"loc":{"start":{"line":19,"column":4},"end":{"line":19,"column":42}},"type":"if","locations":[{"start":{"line":19,"column":4},"end":{"line":19,"column":42}},{"start":{"line":19,"column":4},"end":{"line":19,"column":42}}],"line":19},"12":{"loc":{"start":{"line":19,"column":8},"end":{"line":19,"column":29}},"type":"binary-expr","locations":[{"start":{"line":19,"column":8},"end":{"line":19,"column":11}},{"start":{"line":19,"column":15},"end":{"line":19,"column":29}}],"line":19},"13":{"loc":{"start":{"line":21,"column":4},"end":{"line":21,"column":141}},"type":"if","locations":[{"start":{"line":21,"column":4},"end":{"line":21,"column":141}},{"start":{"line":21,"column":4},"end":{"line":21,"column":141}}],"line":21},"14":{"loc":{"start":{"line":21,"column":40},"end":{"line":21,"column":141}},"type":"if","locations":[{"start":{"line":21,"column":40},"end":{"line":21,"column":141}},{"start":{"line":21,"column":40},"end":{"line":21,"column":141}}],"line":21},"15":{"loc":{"start":{"line":21,"column":44},"end":{"line":21,"column":107}},"type":"binary-expr","locations":[{"start":{"line":21,"column":44},"end":{"line":21,"column":59}},{"start":{"line":21,"column":63},"end":{"line":21,"column":107}}],"line":21},"16":{"loc":{"start":{"line":25,"column":22},"end":{"line":27,"column":1}},"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":27}},{"start":{"line":25,"column":31},"end":{"line":25,"column":51}},{"start":{"line":25,"column":56},"end":{"line":27,"column":1}}],"line":25},"17":{"loc":{"start":{"line":26,"column":11},"end":{"line":26,"column":61}},"type":"cond-expr","locations":[{"start":{"line":26,"column":37},"end":{"line":26,"column":40}},{"start":{"line":26,"column":43},"end":{"line":26,"column":61}}],"line":26},"18":{"loc":{"start":{"line":26,"column":12},"end":{"line":26,"column":33}},"type":"binary-expr","locations":[{"start":{"line":26,"column":12},"end":{"line":26,"column":15}},{"start":{"line":26,"column":19},"end":{"line":26,"column":33}}],"line":26},"19":{"loc":{"start":{"line":60,"column":8},"end":{"line":62,"column":9}},"type":"if","locations":[{"start":{"line":60,"column":8},"end":{"line":62,"column":9}},{"start":{"line":60,"column":8},"end":{"line":62,"column":9}}],"line":60},"20":{"loc":{"start":{"line":65,"column":12},"end":{"line":72,"column":13}},"type":"if","locations":[{"start":{"line":65,"column":12},"end":{"line":72,"column":13}},{"start":{"line":65,"column":12},"end":{"line":72,"column":13}}],"line":65},"21":{"loc":{"start":{"line":77,"column":12},"end":{"line":79,"column":13}},"type":"if","locations":[{"start":{"line":77,"column":12},"end":{"line":79,"column":13}},{"start":{"line":77,"column":12},"end":{"line":79,"column":13}}],"line":77},"22":{"loc":{"start":{"line":82,"column":8},"end":{"line":84,"column":9}},"type":"if","locations":[{"start":{"line":82,"column":8},"end":{"line":84,"column":9}},{"start":{"line":82,"column":8},"end":{"line":84,"column":9}}],"line":82},"23":{"loc":{"start":{"line":93,"column":12},"end":{"line":104,"column":13}},"type":"if","locations":[{"start":{"line":93,"column":12},"end":{"line":104,"column":13}},{"start":{"line":93,"column":12},"end":{"line":104,"column":13}}],"line":93},"24":{"loc":{"start":{"line":93,"column":16},"end":{"line":93,"column":57}},"type":"binary-expr","locations":[{"start":{"line":93,"column":16},"end":{"line":93,"column":38}},{"start":{"line":93,"column":42},"end":{"line":93,"column":57}}],"line":93},"25":{"loc":{"start":{"line":100,"column":16},"end":{"line":103,"column":17}},"type":"if","locations":[{"start":{"line":100,"column":16},"end":{"line":103,"column":17}},{"start":{"line":100,"column":16},"end":{"line":103,"column":17}}],"line":100},"26":{"loc":{"start":{"line":105,"column":12},"end":{"line":107,"column":13}},"type":"if","locations":[{"start":{"line":105,"column":12},"end":{"line":107,"column":13}},{"start":{"line":105,"column":12},"end":{"line":107,"column":13}}],"line":105},"27":{"loc":{"start":{"line":113,"column":16},"end":{"line":115,"column":17}},"type":"if","locations":[{"start":{"line":113,"column":16},"end":{"line":115,"column":17}},{"start":{"line":113,"column":16},"end":{"line":115,"column":17}}],"line":113},"28":{"loc":{"start":{"line":130,"column":12},"end":{"line":134,"column":13}},"type":"if","locations":[{"start":{"line":130,"column":12},"end":{"line":134,"column":13}},{"start":{"line":130,"column":12},"end":{"line":134,"column":13}}],"line":130}},"s":{"0":1,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":1,"12":0,"13":0,"14":1,"15":1,"16":1,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":1,"25":3,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":71,"33":71,"34":27,"35":27,"36":25,"37":25,"38":25,"39":25,"40":21,"41":25,"42":25,"43":25,"44":25,"45":25,"46":0,"47":25,"48":362,"49":362,"50":321,"51":321,"52":321,"53":321,"54":321,"55":25,"56":25,"57":25,"58":321,"59":240,"60":25,"61":25,"62":4,"63":21,"64":21,"65":21,"66":321,"67":321,"68":658877,"69":658877,"70":4046,"71":44506,"72":4046,"73":19030,"74":19030,"75":19030,"76":19030,"77":4046,"78":3806,"79":3806,"80":658877,"81":323851,"82":658556,"83":321,"84":321,"85":321,"86":321,"87":3806,"88":3806,"89":321,"90":21,"91":21,"92":21,"93":21,"94":21,"95":3806,"96":3806,"97":3806,"98":3806,"99":21,"100":1},"f":{"0":0,"1":0,"2":0,"3":0,"4":0,"5":1,"6":3,"7":71,"8":27,"9":25,"10":25,"11":362,"12":321,"13":321,"14":321,"15":658877,"16":44506,"17":19030,"18":19030,"19":658556,"20":321,"21":3806,"22":21,"23":21},"b":{"0":[1,1,1],"1":[1,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[1,1,1],"9":[1,0],"10":[1,1,1],"11":[1,0],"12":[1,1],"13":[0,0],"14":[0,0],"15":[0,0],"16":[1,1,1],"17":[1,2],"18":[3,3],"19":[0,25],"20":[321,41],"21":[240,81],"22":[4,21],"23":[4046,654831],"24":[658877,4046],"25":[3806,240],"26":[323851,335026],"27":[3806,0],"28":[3806,0]},"inputSourceMap":{"version":3,"file":"C:/Users/oreak/IdeaProjects/project_team059/src/controller/rooms/RoomDiskWriter.ts","sources":["C:/Users/oreak/IdeaProjects/project_team059/src/controller/rooms/RoomDiskWriter.ts"],"names":[],"mappings":"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","sourcesContent":["import JSZip from \"jszip\";\nimport RoomsParser from \"./RoomsParser\";\nimport * as parse5 from \"parse5\";\nimport { InsightDatasetKind, InsightError } from \"../IInsightFacade\";\nimport Building from \"./Building\";\nimport Room from \"./Room\";\nimport fs from \"fs-extra\";\n\nexport default class RoomDiskWriter extends RoomsParser {\n\t//Every SectionDiskWriter needs to be able to parse sections using SectionsParser\n\n\tprivate roomTdClassNames: string[] = [\n\t\t\"views-field views-field-field-room-number\",\n\t\t\"views-field views-field-field-room-capacity\",\n\t\t\"views-field views-field-field-room-furniture\",\n\t\t\"views-field views-field-field-room-type\",\n\t\t//\"views-field views-field-nothing\",\n\t];\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tpublic async logRoomsDatasetOnDisk(content: string, id: string, roomMap: Map<string, Room[]>): Promise<void> {\n\t\tconst buffer = Buffer.from(content, \"base64\");\n\t\tconst zip = await JSZip.loadAsync(buffer);\n\t\tawait this.logRoomDatasetAndMap(zip, id, roomMap);\n\t}\n\n\t// writes room dataset info onto disk\n\tprivate async logRoomDatasetAndMap(zip: JSZip, id: string, roomMap: Map<string, Room[]>): Promise<void> {\n\t\tlet buildingMap: Map<string, Building> = new Map<string, Building>();\n\t\tbuildingMap = await this.parseIndexFile(zip);\n\t\tconst newRooms = await this.logAllRoomFilesOnDisk(zip, buildingMap, id);\n\t\troomMap.set(id, newRooms);\n\t}\n\tprotected async logAllRoomFilesOnDisk(zip: JSZip, buildingMap: Map<string, Building>, id: string): Promise<Room[]> {\n\t\tconst allPromises: Promise<Room[]>[] = [];\n\t\tconst dirs = Array.from(buildingMap.keys());\n\t\tlet numRows = 0;\n\t\t//console.log(dirs)\n\n\t\tconst folder = zip.folder(\"campus/discover/buildings-and-classrooms\");\n\t\tif (!folder) {\n\t\t\tthrow new Error(\"Folder not found in zip file\");\n\t\t}\n\t\tfolder.forEach((relativePath, file) => {\n\t\t\tconst buildingCode = relativePath.split(\".\")[0]; // Extract dir or file name\n\t\t\t//console.log(buildingCode)\n\t\t\tif (dirs.includes(buildingCode)) {\n\t\t\t\t//console.log(\"File object:\", file);\n\n\t\t\t\tconst promiseContent = file.async(\"text\").then(async (content0) => {\n\t\t\t\t\tconst document = parse5.parse(content0);\n\t\t\t\t\tconst building: Building = buildingMap.get(buildingCode) as Building;\n\t\t\t\t\treturn this.findTdElemsOfRooms(document, building, id);\n\t\t\t\t});\n\t\t\t\tallPromises.push(promiseContent);\n\t\t\t}\n\t\t});\n\t\tconst roomArrays = await Promise.all(allPromises);\n\t\tconst allRooms: Room[] = [];\n\t\troomArrays.forEach((rooms) => {\n\t\t\tif (rooms.length > 0) {\n\t\t\t\tallRooms.push(...rooms);\n\t\t\t}\n\t\t});\n\t\tnumRows = allRooms.length;\n\t\tif (numRows === 0) {\n\t\t\tthrow new InsightError(\"No valid rooms\");\n\t\t}\n\t\t//console.log(numRows)\n\t\tawait this.storeRoomsOnDisk(allRooms, id);\n\n\t\tawait this.logRoomInsightKindToDisk(id, InsightDatasetKind.Rooms, numRows);\n\t\treturn allRooms;\n\t}\n\n\tprotected async findTdElemsOfRooms(doc: any, building: Building, id: string): Promise<Room[]> {\n\t\tconst roomPromises: Promise<Room | null>[] = [];\n\t\t//  traverse the parsed tree\n\t\tconst traverse = (node: any): any => {\n\t\t\t// check if the current node is a <tr> element\n\t\t\tconst currClassNames: string[] = [];\n\t\t\tif (node.nodeName === \"tr\" && node.childNodes) {\n\t\t\t\t// Gather all <td> elements within this <tr>\n\t\t\t\tconst tdElems = node.childNodes.filter((child: any) => child.nodeName === \"td\");\n\t\t\t\t//console.log(tdElems)\n\n\t\t\t\t// Process each <td> element\n\t\t\t\ttdElems.forEach((tdElem: any) => {\n\t\t\t\t\tconst classAttr = tdElem.attrs.find((attr: any) => attr.name === \"class\");\n\t\t\t\t\t//console.log(classAttr)\n\t\t\t\t\tconst classList = classAttr.value;\n\t\t\t\t\tcurrClassNames.push(classList);\n\t\t\t\t});\n\n\t\t\t\t//console.log(\"classNames: \", classNames)\n\t\t\t\t//console.log(\"currClassNames: \", currClassNames)\n\t\t\t\tif (this.compareClassNames(this.roomTdClassNames, currClassNames)) {\n\t\t\t\t\tconst newRoom = this.parseRoomInfo(tdElems, building, id);\n\t\t\t\t\troomPromises.push(newRoom);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Recursively traverse child nodes\n\t\t\tif (node.childNodes) {\n\t\t\t\tnode.childNodes.forEach((child: any) => traverse(child));\n\t\t\t}\n\t\t};\n\n\t\ttraverse(doc); // Start traversing from the root document\n\t\tconst rooms: Room[] = [];\n\t\treturn Promise.all(roomPromises).then((results) => {\n\t\t\tresults.forEach((room) => {\n\t\t\t\tif (room) {\n\t\t\t\t\trooms.push(room);\n\t\t\t\t}\n\t\t\t});\n\t\t\t//console.log(rooms.length)\n\t\t\treturn rooms;\n\t\t});\n\t}\n\n\t// Writes InsightDataset info about a dataset\n\tpublic async logRoomInsightKindToDisk(id: string, kind: InsightDatasetKind, numRows: number): Promise<void> {\n\t\tconst obj = {\n\t\t\ttable: [{ id, kind, numRows }],\n\t\t};\n\t\t//obj.table.push({id: id, kind: kind, numRows: numRows} as never);\n\t\tconst json = JSON.stringify(obj);\n\t\tawait fs.outputFile(`./data/${id}/kind`, json);\n\t}\n\n\tprotected async storeRoomsOnDisk(rooms: Room[], id: string): Promise<void> {\n\t\tconst allRoomsPromises = [];\n\t\tfor (const room of rooms) {\n\t\t\tif (room) {\n\t\t\t\tconst jsonData = room.convertToJSON();\n\t\t\t\t//console.log(jsonData)\n\t\t\t\tconst roomData = fs.outputJson(`./data/${id}/rooms/${room.getSfields().name}.json`, jsonData);\n\t\t\t\tallRoomsPromises.push(roomData);\n\t\t\t}\n\t\t}\n\t\tawait Promise.all(allRoomsPromises);\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"b9340a630a952d59d28ad2aa77d757f579d5a605","contentHash":"d9e3a68360e705f9df80d28e028b03200dae57d4f3c952f2865410189f01b3a0"},"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\sections\\addSectionDataset.ts":{"path":"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\sections\\addSectionDataset.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":33},"end":{"line":6,"column":86}},"4":{"start":{"line":7,"column":28},"end":{"line":7,"column":75}},"5":{"start":{"line":8,"column":28},"end":{"line":8,"column":75}},"6":{"start":{"line":9,"column":19},"end":{"line":9,"column":55}},"7":{"start":{"line":10,"column":25},"end":{"line":10,"column":53}},"8":{"start":{"line":16,"column":8},"end":{"line":16,"column":57}},"9":{"start":{"line":17,"column":8},"end":{"line":17,"column":63}},"10":{"start":{"line":18,"column":8},"end":{"line":18,"column":63}},"11":{"start":{"line":21,"column":8},"end":{"line":33,"column":9}},"12":{"start":{"line":22,"column":12},"end":{"line":22,"column":50}},"13":{"start":{"line":23,"column":12},"end":{"line":23,"column":75}},"14":{"start":{"line":24,"column":12},"end":{"line":24,"column":86}},"15":{"start":{"line":25,"column":12},"end":{"line":25,"column":102}},"16":{"start":{"line":26,"column":12},"end":{"line":26,"column":56}},"17":{"start":{"line":29,"column":12},"end":{"line":31,"column":13}},"18":{"start":{"line":30,"column":16},"end":{"line":30,"column":26}},"19":{"start":{"line":32,"column":12},"end":{"line":32,"column":92}},"20":{"start":{"line":36,"column":0},"end":{"line":36,"column":36}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":15,"column":4},"end":{"line":15,"column":5}},"loc":{"start":{"line":15,"column":18},"end":{"line":19,"column":5}},"line":15},"2":{"name":"(anonymous_2)","decl":{"start":{"line":20,"column":4},"end":{"line":20,"column":5}},"loc":{"start":{"line":20,"column":58},"end":{"line":34,"column":5}},"line":20}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":29,"column":12},"end":{"line":31,"column":13}},"type":"if","locations":[{"start":{"line":29,"column":12},"end":{"line":31,"column":13}},{"start":{"line":29,"column":12},"end":{"line":31,"column":13}}],"line":29}},"s":{"0":1,"1":4,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":71,"9":71,"10":71,"11":41,"12":41,"13":41,"14":38,"15":34,"16":34,"17":7,"18":1,"19":6,"20":1},"f":{"0":4,"1":71,"2":41},"b":{"0":[1,1,1],"1":[3,1],"2":[4,4],"3":[1,6]},"inputSourceMap":{"version":3,"file":"C:/Users/oreak/IdeaProjects/project_team059/src/controller/sections/addSectionDataset.ts","sources":["C:/Users/oreak/IdeaProjects/project_team059/src/controller/sections/addSectionDataset.ts"],"names":[],"mappings":";;;;;AAAA,uFAA+D;AAC/D,4EAAoD;AACpD,4EAAoD;AACpD,wDAA0B;AAE1B,sDAAqE;AAErE,MAAqB,iBAAiB;IAC7B,EAAE,CAAyB;IAC3B,aAAa,CAAoB;IACjC,aAAa,CAAoB;IAEzC;QACC,IAAI,CAAC,EAAE,GAAG,IAAI,gCAAsB,EAAE,CAAC;QACvC,IAAI,CAAC,aAAa,GAAG,IAAI,2BAAiB,EAAE,CAAC;QAC7C,IAAI,CAAC,aAAa,GAAG,IAAI,2BAAiB,EAAE,CAAC;IAC9C,CAAC;IAEM,KAAK,CAAC,UAAU,CACtB,EAAU,EACV,gBAAwC,EACxC,OAAe,EACf,IAAwB;QAExB,IAAI;YACH,MAAM,IAAI,CAAC,EAAE,CAAC,mBAAmB,CAAC,EAAE,CAAC,CAAC;YACtC,MAAM,IAAI,CAAC,aAAa,CAAC,wBAAwB,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YAC/D,MAAM,IAAI,CAAC,aAAa,CAAC,0BAA0B,CAAC,EAAE,EAAE,gBAAgB,CAAC,CAAC;YAC1E,MAAM,IAAI,CAAC,aAAa,CAAC,oBAAoB,CAAC,EAAE,EAAE,IAAI,EAAE,gBAAgB,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,MAAgB,CAAC,CAAC;YAEpG,OAAO,kBAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;SAC5B;QAAC,OAAO,GAAG,EAAE;YACb,IAAI,GAAG,YAAY,6BAAY,EAAE;gBAChC,MAAM,GAAG,CAAC;aACV;YACD,MAAM,IAAI,6BAAY,CAAC,iCAAiC,GAAG,EAAE,CAAC,CAAC;SAC/D;IACF,CAAC;CACD;AA/BD,oCA+BC","sourcesContent":["import DatasetValidatorHelper from \"../DatasetValidatorHelper\";\nimport SectionDiskReader from \"./SectionDiskReader\";\nimport SectionDiskWriter from \"./SectionDiskWriter\";\nimport fs from \"fs-extra\";\nimport Section from \"./Section\";\nimport { InsightDatasetKind, InsightError } from \"../IInsightFacade\";\n\nexport default class AddSectionDataset {\n\tprivate sv: DatasetValidatorHelper;\n\tprivate secDiskReader: SectionDiskReader;\n\tprivate secDiskWriter: SectionDiskWriter;\n\n\tconstructor() {\n\t\tthis.sv = new DatasetValidatorHelper();\n\t\tthis.secDiskReader = new SectionDiskReader();\n\t\tthis.secDiskWriter = new SectionDiskWriter();\n\t}\n\n\tpublic async addCourses(\n\t\tid: string,\n\t\tsectionsDatabase: Map<string, Section[]>,\n\t\tcontent: string,\n\t\tkind: InsightDatasetKind\n\t): Promise<string[]> {\n\t\ttry {\n\t\t\tawait this.sv.validateIdStructure(id);\n\t\t\tawait this.secDiskWriter.logSectionsDatasetOnDisk(content, id);\n\t\t\tawait this.secDiskReader.logNewDatasetFromDiskToMap(id, sectionsDatabase);\n\t\t\tawait this.secDiskWriter.logInsightKindToDisk(id, kind, sectionsDatabase.get(id)?.length as number);\n\n\t\t\treturn fs.readdir(\"./data\");\n\t\t} catch (err) {\n\t\t\tif (err instanceof InsightError) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\tthrow new InsightError(`An unexpected error occurred: ${err}`);\n\t\t}\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"780ae8f954039787215d60121a06e4b1f93c94f6","contentHash":"75da7d289eff6ff79d74a83c5b562a85034d712f58747c420830b242ddf39206"}}