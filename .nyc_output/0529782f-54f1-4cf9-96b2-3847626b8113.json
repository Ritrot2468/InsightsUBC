{"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\IInsightFacade.ts":{"path":"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\IInsightFacade.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":113}},"2":{"start":{"line":5,"column":0},"end":{"line":8,"column":89}},"3":{"start":{"line":6,"column":4},"end":{"line":6,"column":48}},"4":{"start":{"line":7,"column":4},"end":{"line":7,"column":42}},"5":{"start":{"line":11,"column":8},"end":{"line":11,"column":29}},"6":{"start":{"line":14,"column":8},"end":{"line":14,"column":30}},"7":{"start":{"line":17,"column":21},"end":{"line":17,"column":61}},"8":{"start":{"line":18,"column":8},"end":{"line":20,"column":9}},"9":{"start":{"line":19,"column":12},"end":{"line":19,"column":45}},"10":{"start":{"line":21,"column":8},"end":{"line":21,"column":44}},"11":{"start":{"line":24,"column":21},"end":{"line":24,"column":66}},"12":{"start":{"line":25,"column":8},"end":{"line":27,"column":9}},"13":{"start":{"line":26,"column":12},"end":{"line":26,"column":45}},"14":{"start":{"line":28,"column":8},"end":{"line":28,"column":44}},"15":{"start":{"line":31,"column":8},"end":{"line":31,"column":29}},"16":{"start":{"line":34,"column":8},"end":{"line":34,"column":30}},"17":{"start":{"line":37,"column":21},"end":{"line":37,"column":61}},"18":{"start":{"line":38,"column":8},"end":{"line":40,"column":9}},"19":{"start":{"line":39,"column":12},"end":{"line":39,"column":45}},"20":{"start":{"line":41,"column":8},"end":{"line":41,"column":42}},"21":{"start":{"line":44,"column":21},"end":{"line":44,"column":66}},"22":{"start":{"line":45,"column":8},"end":{"line":47,"column":9}},"23":{"start":{"line":46,"column":12},"end":{"line":46,"column":45}},"24":{"start":{"line":48,"column":8},"end":{"line":48,"column":42}},"25":{"start":{"line":51,"column":21},"end":{"line":51,"column":66}},"26":{"start":{"line":52,"column":8},"end":{"line":52,"column":36}},"27":{"start":{"line":55,"column":21},"end":{"line":55,"column":61}},"28":{"start":{"line":56,"column":8},"end":{"line":56,"column":36}},"29":{"start":{"line":61,"column":8},"end":{"line":61,"column":32}},"30":{"start":{"line":62,"column":8},"end":{"line":62,"column":32}},"31":{"start":{"line":65,"column":0},"end":{"line":65,"column":26}},"32":{"start":{"line":68,"column":8},"end":{"line":68,"column":23}},"33":{"start":{"line":69,"column":8},"end":{"line":69,"column":52}},"34":{"start":{"line":72,"column":0},"end":{"line":72,"column":36}},"35":{"start":{"line":75,"column":8},"end":{"line":75,"column":23}},"36":{"start":{"line":76,"column":8},"end":{"line":76,"column":53}},"37":{"start":{"line":79,"column":0},"end":{"line":79,"column":38}},"38":{"start":{"line":82,"column":8},"end":{"line":82,"column":23}},"39":{"start":{"line":83,"column":8},"end":{"line":83,"column":59}},"40":{"start":{"line":86,"column":0},"end":{"line":86,"column":50}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":1},"end":{"line":5,"column":2}},"loc":{"start":{"line":5,"column":31},"end":{"line":8,"column":1}},"line":5},"1":{"name":"(anonymous_1)","decl":{"start":{"line":10,"column":4},"end":{"line":10,"column":5}},"loc":{"start":{"line":10,"column":17},"end":{"line":12,"column":5}},"line":10},"2":{"name":"(anonymous_2)","decl":{"start":{"line":13,"column":4},"end":{"line":13,"column":5}},"loc":{"start":{"line":13,"column":22},"end":{"line":15,"column":5}},"line":13},"3":{"name":"(anonymous_3)","decl":{"start":{"line":16,"column":4},"end":{"line":16,"column":5}},"loc":{"start":{"line":16,"column":29},"end":{"line":22,"column":5}},"line":16},"4":{"name":"(anonymous_4)","decl":{"start":{"line":23,"column":4},"end":{"line":23,"column":5}},"loc":{"start":{"line":23,"column":29},"end":{"line":29,"column":5}},"line":23},"5":{"name":"(anonymous_5)","decl":{"start":{"line":30,"column":4},"end":{"line":30,"column":5}},"loc":{"start":{"line":30,"column":17},"end":{"line":32,"column":5}},"line":30},"6":{"name":"(anonymous_6)","decl":{"start":{"line":33,"column":4},"end":{"line":33,"column":5}},"loc":{"start":{"line":33,"column":22},"end":{"line":35,"column":5}},"line":33},"7":{"name":"(anonymous_7)","decl":{"start":{"line":36,"column":4},"end":{"line":36,"column":5}},"loc":{"start":{"line":36,"column":28},"end":{"line":42,"column":5}},"line":36},"8":{"name":"(anonymous_8)","decl":{"start":{"line":43,"column":4},"end":{"line":43,"column":5}},"loc":{"start":{"line":43,"column":28},"end":{"line":49,"column":5}},"line":43},"9":{"name":"(anonymous_9)","decl":{"start":{"line":50,"column":4},"end":{"line":50,"column":5}},"loc":{"start":{"line":50,"column":27},"end":{"line":53,"column":5}},"line":50},"10":{"name":"(anonymous_10)","decl":{"start":{"line":54,"column":4},"end":{"line":54,"column":5}},"loc":{"start":{"line":54,"column":27},"end":{"line":57,"column":5}},"line":54},"11":{"name":"(anonymous_11)","decl":{"start":{"line":60,"column":4},"end":{"line":60,"column":5}},"loc":{"start":{"line":60,"column":34},"end":{"line":63,"column":5}},"line":60},"12":{"name":"(anonymous_12)","decl":{"start":{"line":67,"column":4},"end":{"line":67,"column":5}},"loc":{"start":{"line":67,"column":25},"end":{"line":70,"column":5}},"line":67},"13":{"name":"(anonymous_13)","decl":{"start":{"line":74,"column":4},"end":{"line":74,"column":5}},"loc":{"start":{"line":74,"column":25},"end":{"line":77,"column":5}},"line":74},"14":{"name":"(anonymous_14)","decl":{"start":{"line":81,"column":4},"end":{"line":81,"column":5}},"loc":{"start":{"line":81,"column":25},"end":{"line":84,"column":5}},"line":81}},"branchMap":{"0":{"loc":{"start":{"line":8,"column":24},"end":{"line":8,"column":87}},"type":"binary-expr","locations":[{"start":{"line":8,"column":24},"end":{"line":8,"column":50}},{"start":{"line":8,"column":55},"end":{"line":8,"column":86}}],"line":8},"1":{"loc":{"start":{"line":18,"column":8},"end":{"line":20,"column":9}},"type":"if","locations":[{"start":{"line":18,"column":8},"end":{"line":20,"column":9}},{"start":{"line":18,"column":8},"end":{"line":20,"column":9}}],"line":18},"2":{"loc":{"start":{"line":18,"column":12},"end":{"line":18,"column":44}},"type":"binary-expr","locations":[{"start":{"line":18,"column":12},"end":{"line":18,"column":21}},{"start":{"line":18,"column":25},"end":{"line":18,"column":44}}],"line":18},"3":{"loc":{"start":{"line":25,"column":8},"end":{"line":27,"column":9}},"type":"if","locations":[{"start":{"line":25,"column":8},"end":{"line":27,"column":9}},{"start":{"line":25,"column":8},"end":{"line":27,"column":9}}],"line":25},"4":{"loc":{"start":{"line":25,"column":12},"end":{"line":25,"column":44}},"type":"binary-expr","locations":[{"start":{"line":25,"column":12},"end":{"line":25,"column":21}},{"start":{"line":25,"column":25},"end":{"line":25,"column":44}}],"line":25},"5":{"loc":{"start":{"line":38,"column":8},"end":{"line":40,"column":9}},"type":"if","locations":[{"start":{"line":38,"column":8},"end":{"line":40,"column":9}},{"start":{"line":38,"column":8},"end":{"line":40,"column":9}}],"line":38},"6":{"loc":{"start":{"line":38,"column":12},"end":{"line":38,"column":44}},"type":"binary-expr","locations":[{"start":{"line":38,"column":12},"end":{"line":38,"column":21}},{"start":{"line":38,"column":25},"end":{"line":38,"column":44}}],"line":38},"7":{"loc":{"start":{"line":45,"column":8},"end":{"line":47,"column":9}},"type":"if","locations":[{"start":{"line":45,"column":8},"end":{"line":47,"column":9}},{"start":{"line":45,"column":8},"end":{"line":47,"column":9}}],"line":45},"8":{"loc":{"start":{"line":45,"column":12},"end":{"line":45,"column":44}},"type":"binary-expr","locations":[{"start":{"line":45,"column":12},"end":{"line":45,"column":21}},{"start":{"line":45,"column":25},"end":{"line":45,"column":44}}],"line":45}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":7386,"6":0,"7":50617,"8":50617,"9":0,"10":50617,"11":0,"12":0,"13":0,"14":0,"15":223802174,"16":0,"17":3429224,"18":3429224,"19":0,"20":3429224,"21":1559077,"22":1559077,"23":0,"24":1559077,"25":0,"26":0,"27":50617,"28":50617,"29":132846,"30":132846,"31":1,"32":59,"33":59,"34":1,"35":6,"36":6,"37":1,"38":3,"39":3,"40":1},"f":{"0":1,"1":7386,"2":0,"3":50617,"4":0,"5":223802174,"6":0,"7":3429224,"8":1559077,"9":0,"10":50617,"11":132846,"12":59,"13":6,"14":3},"b":{"0":[1,1],"1":[0,50617],"2":[50617,50617],"3":[0,0],"4":[0,0],"5":[0,3429224],"6":[3429224,3429224],"7":[0,1559077],"8":[1559077,1559077]},"inputSourceMap":{"version":3,"file":"C:/Users/oreak/IdeaProjects/project_team059/src/controller/IInsightFacade.ts","sources":["C:/Users/oreak/IdeaProjects/project_team059/src/controller/IInsightFacade.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * This is the primary high-level API for the project. In this folder there should be:\n * A class called InsightFacade, this should be in a file called InsightFacade.ts.\n * You should not change this interface at all or the test suite will not work.\n */\n\nexport enum InsightDatasetKind {\n\tSections = \"sections\",\n\tRooms = \"rooms\",\n}\n\nexport interface InsightDataset {\n\tid: string;\n\tkind: InsightDatasetKind;\n\tnumRows: number;\n}\n\nexport interface Sfield {\n\tuuid: string;\n\tid: string;\n\ttitle: string;\n\tinstructor: string;\n\tdept: string;\n}\n\nexport interface Mfield {\n\tyear: number;\n\tavg: number;\n\tpass: number;\n\tfail: number;\n\taudit: number;\n}\nexport default class Section {\n\tpublic getMfields(): Mfield {\n\t\treturn this._mfields;\n\t}\n\n\tpublic setMfields(value: Mfield): void {\n\t\tthis._mfields = value;\n\t}\n\n\tpublic setMfield(index: number, newVal: number): void {\n\t\tconst keys: (keyof Mfield)[] = [\"year\", \"avg\", \"pass\", \"fail\", \"audit\"];\n\t\tif (index < 0 || index > keys.length) {\n\t\t\tthrow new Error(\"Out of bounds\");\n\t\t}\n\t\tthis._mfields[keys[index]] = newVal;\n\t}\n\n\tpublic setSField(index: number, newVal: string): void {\n\t\tconst keys: (keyof Sfield)[] = [\"uuid\", \"id\", \"title\", \"instructor\", \"dept\"];\n\t\tif (index < 0 || index > keys.length) {\n\t\t\tthrow new Error(\"Out of bounds\");\n\t\t}\n\t\tthis._sfields[keys[index]] = newVal;\n\t}\n\n\tpublic getSfields(): Sfield {\n\t\treturn this._sfields;\n\t}\n\n\tpublic setSfields(value: Sfield): void {\n\t\tthis._sfields = value;\n\t}\n\n\tpublic getMFieldByIndex(index: number): number {\n\t\tconst keys: (keyof Mfield)[] = [\"year\", \"avg\", \"pass\", \"fail\", \"audit\"];\n\t\tif (index < 0 || index > keys.length) {\n\t\t\tthrow new Error(\"Out of bounds\");\n\t\t}\n\t\treturn this._mfields[keys[index]];\n\t}\n\n\tpublic getSFieldByIndex(index: number): string {\n\t\tconst keys: (keyof Sfield)[] = [\"uuid\", \"id\", \"title\", \"instructor\", \"dept\"];\n\t\tif (index < 0 || index > keys.length) {\n\t\t\tthrow new Error(\"Out of bounds\");\n\t\t}\n\t\treturn this._sfields[keys[index]];\n\t}\n\n\tpublic getSFieldIndex(sfield: string): number {\n\t\tconst keys: (keyof Sfield)[] = [\"uuid\", \"id\", \"title\", \"instructor\", \"dept\"];\n\t\treturn keys.indexOf(sfield as keyof Sfield);\n\t\t// -1 if index is not found\n\t}\n\n\tpublic getMFieldIndex(mfield: string): number {\n\t\tconst keys: (keyof Mfield)[] = [\"year\", \"avg\", \"pass\", \"fail\", \"audit\"];\n\t\treturn keys.indexOf(mfield as keyof Mfield);\n\t\t// -1 if index is not found\n\n\t}\n\n\tprivate _mfields: Mfield;\n\tprivate _sfields: Sfield;\n\n\tconstructor(mfields: Mfield, sfields: Sfield) {\n\t\tthis._mfields = mfields;\n\t\tthis._sfields = sfields;\n\t}\n}\n\nexport type InsightResult = Record<string, string | number>;\n\nexport class InsightError extends Error {\n\tconstructor(message?: string) {\n\t\tsuper(message);\n\t\tError.captureStackTrace(this, InsightError);\n\t}\n}\n\nexport class NotFoundError extends Error {\n\tconstructor(message?: string) {\n\t\tsuper(message);\n\t\tError.captureStackTrace(this, NotFoundError);\n\t}\n}\n\nexport class ResultTooLargeError extends Error {\n\tconstructor(message?: string) {\n\t\tsuper(message);\n\t\tError.captureStackTrace(this, ResultTooLargeError);\n\t}\n}\n\nexport interface IInsightFacade {\n\t// TODO: remove\n\tsectionsDatabase: Map<string, Section[]>;\n\t/**\n\t * Add a dataset to insightUBC.\n\t *\n\t * @param id  The id of the dataset being added. Follows the format /^[^_]+$/\n\t * @param content  The base64 content of the dataset. This content should be in the form of a serialized zip file.\n\t * @param kind  The kind of the dataset\n\t *\n\t * @return Promise <string[]>\n\t *\n\t * The promise should fulfill on a successful add, reject for any failures.\n\t * The promise should fulfill with a string array,\n\t * containing the ids of all currently added datasets upon a successful add.\n\t * The promise should reject with an InsightError describing the error.\n\t *\n\t * An id is invalid if it contains an underscore, or is only whitespace characters.\n\t * If id is the same as the id of an already added dataset, the dataset should be rejected and not saved.\n\t *\n\t * After receiving the dataset, it should be processed into a data structure of\n\t * your design. The processed data structure should be persisted to disk; your\n\t * system should be able to load this persisted value into memory for answering\n\t * queries.\n\t *\n\t * Ultimately, a dataset must be added or loaded from disk before queries can\n\t * be successfully answered.\n\t */\n\taddDataset(id: string, content: string, kind: InsightDatasetKind): Promise<string[]>;\n\n\t/**\n\t * Remove a dataset from insightUBC.\n\t *\n\t * @param id  The id of the dataset to remove. Follows the format /^[^_]+$/\n\t *\n\t * @return Promise <string>\n\t *\n\t * The promise should fulfill upon a successful removal, reject on any error.\n\t * Attempting to remove a dataset that hasn't been added yet counts as an error.\n\t *\n\t * An id is invalid if it contains an underscore, or is only whitespace characters.\n\t *\n\t * The promise should fulfill the id of the dataset that was removed.\n\t * The promise should reject with a NotFoundError (if a valid id was not yet added)\n\t * or an InsightError (invalid id or any other source of failure) describing the error.\n\t *\n\t * This will delete both disk and memory caches for the dataset for the id meaning\n\t * that subsequent queries for that id should fail unless a new addDataset happens first.\n\t */\n\tremoveDataset(id: string): Promise<string>;\n\n\t/**\n\t * Perform a query on insightUBC.\n\t *\n\t * @param query  The query to be performed.\n\t *\n\t * If a query is incorrectly formatted, references a dataset not added (in memory or on disk),\n\t * or references multiple datasets, it should be rejected.\n\t *\n\t * @return Promise <InsightResult[]>\n\t *\n\t * The promise should fulfill with an array of results.\n\t * The promise should reject with a ResultTooLargeError (if the query returns too many results)\n\t * or an InsightError (for any other source of failure) describing the error.\n\t */\n\tperformQuery(query: unknown): Promise<InsightResult[]>;\n\n\t/**\n\t * List all currently added datasets, their types, and number of rows.\n\t *\n\t * @return Promise <InsightDataset[]>\n\t * The promise should fulfill an array of currently added InsightDatasets, and will only fulfill.\n\t */\n\tlistDatasets(): Promise<InsightDataset[]>;\n\n\tlogNewDatasetFromDiskToMap(id: string, kind: InsightDatasetKind): Promise<void>;\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"a8ead5a1a2b7948c21e4a540cda9a681bf26eafb","contentHash":"71cd10ac77a7f775ff49873387928ca52296295b144e61dea2a27e2fa7719b37"},"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\InsightFacade.ts":{"path":"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\InsightFacade.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":25},"end":{"line":6,"column":52}},"4":{"start":{"line":7,"column":19},"end":{"line":7,"column":55}},"5":{"start":{"line":8,"column":28},"end":{"line":8,"column":75}},"6":{"start":{"line":9,"column":25},"end":{"line":9,"column":69}},"7":{"start":{"line":10,"column":22},"end":{"line":10,"column":63}},"8":{"start":{"line":11,"column":21},"end":{"line":11,"column":61}},"9":{"start":{"line":21,"column":8},"end":{"line":21,"column":34}},"10":{"start":{"line":22,"column":8},"end":{"line":22,"column":42}},"11":{"start":{"line":23,"column":8},"end":{"line":23,"column":26}},"12":{"start":{"line":24,"column":8},"end":{"line":24,"column":52}},"13":{"start":{"line":25,"column":8},"end":{"line":25,"column":49}},"14":{"start":{"line":26,"column":8},"end":{"line":26,"column":67}},"15":{"start":{"line":27,"column":8},"end":{"line":27,"column":66}},"16":{"start":{"line":30,"column":8},"end":{"line":41,"column":9}},"17":{"start":{"line":31,"column":12},"end":{"line":31,"column":49}},"18":{"start":{"line":32,"column":12},"end":{"line":32,"column":56}},"19":{"start":{"line":33,"column":12},"end":{"line":33,"column":60}},"20":{"start":{"line":34,"column":12},"end":{"line":34,"column":32}},"21":{"start":{"line":37,"column":12},"end":{"line":39,"column":13}},"22":{"start":{"line":38,"column":16},"end":{"line":38,"column":26}},"23":{"start":{"line":40,"column":12},"end":{"line":40,"column":92}},"24":{"start":{"line":44,"column":27},"end":{"line":44,"column":65}},"25":{"start":{"line":45,"column":24},"end":{"line":45,"column":50}},"26":{"start":{"line":46,"column":8},"end":{"line":48,"column":9}},"27":{"start":{"line":47,"column":12},"end":{"line":47,"column":72}},"28":{"start":{"line":49,"column":26},"end":{"line":51,"column":9}},"29":{"start":{"line":52,"column":8},"end":{"line":52,"column":70}},"30":{"start":{"line":53,"column":8},"end":{"line":53,"column":30}},"31":{"start":{"line":54,"column":8},"end":{"line":54,"column":41}},"32":{"start":{"line":57,"column":8},"end":{"line":73,"column":9}},"33":{"start":{"line":58,"column":12},"end":{"line":58,"column":56}},"34":{"start":{"line":59,"column":12},"end":{"line":59,"column":80}},"35":{"start":{"line":59,"column":62},"end":{"line":59,"column":78}},"36":{"start":{"line":60,"column":12},"end":{"line":60,"column":37}},"37":{"start":{"line":61,"column":12},"end":{"line":61,"column":45}},"38":{"start":{"line":62,"column":12},"end":{"line":62,"column":60}},"39":{"start":{"line":63,"column":12},"end":{"line":63,"column":22}},"40":{"start":{"line":66,"column":12},"end":{"line":68,"column":13}},"41":{"start":{"line":67,"column":16},"end":{"line":67,"column":60}},"42":{"start":{"line":69,"column":12},"end":{"line":71,"column":13}},"43":{"start":{"line":70,"column":16},"end":{"line":70,"column":70}},"44":{"start":{"line":72,"column":12},"end":{"line":72,"column":99}},"45":{"start":{"line":76,"column":21},"end":{"line":76,"column":23}},"46":{"start":{"line":77,"column":8},"end":{"line":88,"column":9}},"47":{"start":{"line":78,"column":12},"end":{"line":78,"column":83}},"48":{"start":{"line":79,"column":12},"end":{"line":79,"column":48}},"49":{"start":{"line":82,"column":12},"end":{"line":87,"column":13}},"50":{"start":{"line":83,"column":16},"end":{"line":83,"column":26}},"51":{"start":{"line":86,"column":16},"end":{"line":86,"column":77}},"52":{"start":{"line":89,"column":8},"end":{"line":89,"column":22}},"53":{"start":{"line":92,"column":23},"end":{"line":92,"column":25}},"54":{"start":{"line":93,"column":8},"end":{"line":100,"column":11}},"55":{"start":{"line":94,"column":38},"end":{"line":98,"column":13}},"56":{"start":{"line":99,"column":12},"end":{"line":99,"column":43}},"57":{"start":{"line":101,"column":8},"end":{"line":101,"column":34}},"58":{"start":{"line":102,"column":8},"end":{"line":102,"column":22}},"59":{"start":{"line":105,"column":0},"end":{"line":105,"column":32}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":20,"column":4},"end":{"line":20,"column":5}},"loc":{"start":{"line":20,"column":18},"end":{"line":28,"column":5}},"line":20},"2":{"name":"(anonymous_2)","decl":{"start":{"line":29,"column":4},"end":{"line":29,"column":5}},"loc":{"start":{"line":29,"column":40},"end":{"line":42,"column":5}},"line":29},"3":{"name":"(anonymous_3)","decl":{"start":{"line":43,"column":4},"end":{"line":43,"column":5}},"loc":{"start":{"line":43,"column":47},"end":{"line":55,"column":5}},"line":43},"4":{"name":"(anonymous_4)","decl":{"start":{"line":56,"column":4},"end":{"line":56,"column":5}},"loc":{"start":{"line":56,"column":28},"end":{"line":74,"column":5}},"line":56},"5":{"name":"(anonymous_5)","decl":{"start":{"line":59,"column":47},"end":{"line":59,"column":48}},"loc":{"start":{"line":59,"column":62},"end":{"line":59,"column":78}},"line":59},"6":{"name":"(anonymous_6)","decl":{"start":{"line":75,"column":4},"end":{"line":75,"column":5}},"loc":{"start":{"line":75,"column":30},"end":{"line":90,"column":5}},"line":75},"7":{"name":"(anonymous_7)","decl":{"start":{"line":91,"column":4},"end":{"line":91,"column":5}},"loc":{"start":{"line":91,"column":25},"end":{"line":103,"column":5}},"line":91},"8":{"name":"(anonymous_8)","decl":{"start":{"line":93,"column":30},"end":{"line":93,"column":31}},"loc":{"start":{"line":93,"column":44},"end":{"line":100,"column":9}},"line":93}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":37,"column":12},"end":{"line":39,"column":13}},"type":"if","locations":[{"start":{"line":37,"column":12},"end":{"line":39,"column":13}},{"start":{"line":37,"column":12},"end":{"line":39,"column":13}}],"line":37},"4":{"loc":{"start":{"line":46,"column":8},"end":{"line":48,"column":9}},"type":"if","locations":[{"start":{"line":46,"column":8},"end":{"line":48,"column":9}},{"start":{"line":46,"column":8},"end":{"line":48,"column":9}}],"line":46},"5":{"loc":{"start":{"line":66,"column":12},"end":{"line":68,"column":13}},"type":"if","locations":[{"start":{"line":66,"column":12},"end":{"line":68,"column":13}},{"start":{"line":66,"column":12},"end":{"line":68,"column":13}}],"line":66},"6":{"loc":{"start":{"line":69,"column":12},"end":{"line":71,"column":13}},"type":"if","locations":[{"start":{"line":69,"column":12},"end":{"line":71,"column":13}},{"start":{"line":69,"column":12},"end":{"line":71,"column":13}}],"line":69},"7":{"loc":{"start":{"line":82,"column":12},"end":{"line":87,"column":13}},"type":"if","locations":[{"start":{"line":82,"column":12},"end":{"line":87,"column":13}},{"start":{"line":82,"column":12},"end":{"line":87,"column":13}}],"line":82},"8":{"loc":{"start":{"line":82,"column":16},"end":{"line":82,"column":115}},"type":"binary-expr","locations":[{"start":{"line":82,"column":16},"end":{"line":82,"column":60}},{"start":{"line":82,"column":64},"end":{"line":82,"column":115}}],"line":82}},"s":{"0":1,"1":5,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":31,"10":31,"11":31,"12":31,"13":31,"14":31,"15":31,"16":39,"17":39,"18":33,"19":30,"20":27,"21":12,"22":7,"23":5,"24":30,"25":28,"26":28,"27":1,"28":27,"29":27,"30":27,"31":27,"32":10,"33":10,"34":5,"35":7,"36":5,"37":5,"38":5,"39":5,"40":5,"41":2,"42":3,"43":3,"44":0,"45":78,"46":78,"47":78,"48":78,"49":46,"50":46,"51":0,"52":32,"53":6,"54":6,"55":10,"56":10,"57":6,"58":6,"59":1},"f":{"0":5,"1":31,"2":39,"3":30,"4":10,"5":7,"6":78,"7":6,"8":10},"b":{"0":[1,1,1],"1":[4,1],"2":[5,5],"3":[7,5],"4":[1,27],"5":[2,3],"6":[3,0],"7":[46,0],"8":[46,3]},"inputSourceMap":{"version":3,"file":"C:/Users/oreak/IdeaProjects/project_team059/src/controller/InsightFacade.ts","sources":["C:/Users/oreak/IdeaProjects/project_team059/src/controller/InsightFacade.ts"],"names":[],"mappings":"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","sourcesContent":["import Section, {\n\tIInsightFacade,\n\tInsightDataset,\n\tInsightDatasetKind,\n\tInsightError,\n\tInsightResult,\n\tNotFoundError,\n\tResultTooLargeError,\n} from \"./IInsightFacade\";\nimport fs from \"fs-extra\";\nimport SectionsValidator from \"./SectionsValidator\";\nimport SectionsParser from \"./SectionsParser\";\nimport QueryEngine from \"./QueryEngine\";\nimport DiskReader from \"./DiskReader\";\n\n/**\n * This is the main programmatic entry point for the project.\n * Method documentation is in IInsightFacade\n *\n */\nexport default class InsightFacade implements IInsightFacade {\n\t// map to track record\n\tprivate datasets: Map<string, InsightResult>;\n\n\t// tracks all sections added from a dataset using their associated id as the key\n\tpublic sectionsDatabase: Map<string, Section[]>;\n\n\t// list of name of current IDs added\n\tprivate currIDs: string[];\n\n\t// service classes\n\tprivate sv: SectionsValidator;\n\tprivate sp: SectionsParser;\n\tprivate qe: QueryEngine;\n\tprivate dr: DiskReader;\n\n\tconstructor() {\n\t\t//Log.info(\"InsightFacadeImpl::init()\");\n\t\tthis.datasets = new Map<string, InsightResult>();\n\t\tthis.sectionsDatabase = new Map<string, []>();\n\t\tthis.currIDs = [];\n\t\tthis.sv = new SectionsValidator();\n\t\tthis.sp = new SectionsParser();\n\t\tthis.qe = new QueryEngine(this.sectionsDatabase);\n\t\tthis.dr = new DiskReader(this.sectionsDatabase);\n\t\t// initialize dictionary for the fields\n\t}\n\tpublic async addDataset(id: string, content: string, kind: InsightDatasetKind): Promise<string[]> {\n\t\ttry {\n\t\t\tthis.sv.validateId(id, this.currIDs);\n\t\t\t// Number of rows found associated with the insightKind\n\t\t\t//const numRows = await this.sp.countRows(content, id, this.sectionsDatabase);\n\n\t\t\tawait this.sp.logDatasetOnDisk(content, id);\n\t\t\tawait this.logNewDatasetFromDiskToMap(id, kind);\n\n\t\t\t// Resolve with the dataset ID\n\t\t\treturn this.currIDs;\n\t\t} catch (err) {\n\t\t\tif (err instanceof InsightError) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\tthrow new InsightError(`An unexpected error occurred: ${err}`);\n\t\t}\n\t}\n\n\t// REQUIRES: id - name of dataset to be retrieved from disk (id IS NOT IN datasets ALREADY!!!!)\n\t//           datasets - sets you'll be mapping new DatasetRecord to\n\t// EFFECTS: Retrieves the sections associated with the dataset id on disk and turned into Sections objects and maps\n\t//          them to sectionsDatabase with their associated id. Updates the currIDs and database member variables\n\t// OUTPUT: VOID\n\tpublic async logNewDatasetFromDiskToMap(id: string, kind: InsightDatasetKind): Promise<void> {\n\t\tconst newDataset = await this.sp.turnDatasetToSection(id);\n\t\tconst numRows = newDataset.sections.length;\n\n\t\tif (numRows === 0) {\n\t\t\tthrow new InsightError(\"No valid Section\");\n\t\t}\n\t\t// Create an InsightResult record\n\t\tconst newRecord: InsightResult = {\n\t\t\t[kind]: numRows,\n\t\t};\n\n\t\t// update member variables\n\t\tthis.sectionsDatabase.set(newDataset.id, newDataset.sections);\n\t\tthis.currIDs.push(id);\n\t\tthis.datasets.set(id, newRecord);\n\t}\n\n\tpublic async removeDataset(id: string): Promise<string> {\n\t\ttry {\n\t\t\tthis.sv.validateIdRemoval(id, this.currIDs);\n\n\t\t\tthis.currIDs = this.currIDs.filter((currentId) => currentId !== id);\n\t\t\tthis.datasets.delete(id);\n\t\t\tthis.sectionsDatabase.delete(id);\n\n\t\t\tawait fs.remove(`./data/${id}`);\n\n\t\t\t// return id name of set currently removed\n\t\t\treturn id;\n\t\t} catch (err) {\n\t\t\tif (err instanceof InsightError) {\n\t\t\t\tthrow new InsightError(\"\");\n\t\t\t}\n\n\t\t\tif (err instanceof NotFoundError) {\n\t\t\t\tthrow new NotFoundError(\"Not found\");\n\t\t\t}\n\t\t\t// Handle unexpected errors\n\t\t\tthrow new InsightError(\"An unexpected error occurred ${err.message}\");\n\t\t}\n\t}\n\n\t/*\n\tpublic async performQuery(query: unknown): Promise<InsightResult[]> {\n\t\treturn Promise.reject(\"Not implemented.\");\n\t}\n\t*/\n\n\tpublic async performQuery(query: unknown): Promise<InsightResult[]> {\n\t\tlet result: InsightResult[] = [];\n\t\t// console.log(this.datasets.size)\n\t\t// this.sectionsDatabase.forEach((key, value) => {\n\t\t// \tconsole.log(key, value)\n\t\t// })\n\t\ttry {\n\t\t\tthis.sectionsDatabase = await this.dr.mapMissingSections(this.currIDs);\n\t\t\tresult = await this.qe.query(query);\n\t\t} catch (err) {\n\t\t\tif (err instanceof InsightError || err instanceof ResultTooLargeError) {\n\t\t\t\t// this.sectionsDatabase.forEach((key, value) => {\n\t\t\t\t// \tconsole.log(key, value)\n\t\t\t\t// })\n\t\t\t\tthrow err;\n\t\t\t} else {\n\t\t\t\tthrow new InsightError(\"Unexpected error.\");\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic async listDatasets(): Promise<InsightDataset[]> {\n\t\tconst result: any[] = [];\n\n\t\tthis.datasets.forEach((val, key) => {\n\t\t\tconst newInsightDataset: InsightDataset = {\n\t\t\t\tid: key,\n\t\t\t\t// So far since adding dataset with the same ID twice is not allowed ******\n\t\t\t\tkind: Object.keys(val)[0] as InsightDatasetKind,\n\t\t\t\tnumRows: val[Object.keys(val)[0]] as number,\n\t\t\t};\n\n\t\t\tresult.push(newInsightDataset);\n\t\t});\n\t\tawait Promise.all(result);\n\t\treturn result;\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"44300b1d41af996b3d12647051deae753b0c6cb2","contentHash":"b4788d5eb58fbd1719422c8f481280462c2a9fa59110b2249e21279460cdcf17"},"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\SectionsValidator.ts":{"path":"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\SectionsValidator.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":25},"end":{"line":3,"column":52}},"2":{"start":{"line":6,"column":8},"end":{"line":8,"column":9}},"3":{"start":{"line":7,"column":12},"end":{"line":7,"column":76}},"4":{"start":{"line":9,"column":8},"end":{"line":11,"column":9}},"5":{"start":{"line":10,"column":12},"end":{"line":10,"column":85}},"6":{"start":{"line":12,"column":28},"end":{"line":12,"column":37}},"7":{"start":{"line":13,"column":8},"end":{"line":15,"column":9}},"8":{"start":{"line":14,"column":12},"end":{"line":14,"column":66}},"9":{"start":{"line":18,"column":8},"end":{"line":20,"column":9}},"10":{"start":{"line":19,"column":12},"end":{"line":19,"column":76}},"11":{"start":{"line":21,"column":8},"end":{"line":23,"column":9}},"12":{"start":{"line":22,"column":12},"end":{"line":22,"column":74}},"13":{"start":{"line":24,"column":28},"end":{"line":24,"column":37}},"14":{"start":{"line":25,"column":8},"end":{"line":27,"column":9}},"15":{"start":{"line":26,"column":12},"end":{"line":26,"column":66}},"16":{"start":{"line":30,"column":0},"end":{"line":30,"column":36}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":4},"end":{"line":5,"column":5}},"loc":{"start":{"line":5,"column":24},"end":{"line":16,"column":5}},"line":5},"1":{"name":"(anonymous_1)","decl":{"start":{"line":17,"column":4},"end":{"line":17,"column":5}},"loc":{"start":{"line":17,"column":31},"end":{"line":28,"column":5}},"line":17}},"branchMap":{"0":{"loc":{"start":{"line":6,"column":8},"end":{"line":8,"column":9}},"type":"if","locations":[{"start":{"line":6,"column":8},"end":{"line":8,"column":9}},{"start":{"line":6,"column":8},"end":{"line":8,"column":9}}],"line":6},"1":{"loc":{"start":{"line":6,"column":12},"end":{"line":6,"column":54}},"type":"binary-expr","locations":[{"start":{"line":6,"column":12},"end":{"line":6,"column":28}},{"start":{"line":6,"column":32},"end":{"line":6,"column":54}}],"line":6},"2":{"loc":{"start":{"line":9,"column":8},"end":{"line":11,"column":9}},"type":"if","locations":[{"start":{"line":9,"column":8},"end":{"line":11,"column":9}},{"start":{"line":9,"column":8},"end":{"line":11,"column":9}}],"line":9},"3":{"loc":{"start":{"line":13,"column":8},"end":{"line":15,"column":9}},"type":"if","locations":[{"start":{"line":13,"column":8},"end":{"line":15,"column":9}},{"start":{"line":13,"column":8},"end":{"line":15,"column":9}}],"line":13},"4":{"loc":{"start":{"line":18,"column":8},"end":{"line":20,"column":9}},"type":"if","locations":[{"start":{"line":18,"column":8},"end":{"line":20,"column":9}},{"start":{"line":18,"column":8},"end":{"line":20,"column":9}}],"line":18},"5":{"loc":{"start":{"line":18,"column":12},"end":{"line":18,"column":54}},"type":"binary-expr","locations":[{"start":{"line":18,"column":12},"end":{"line":18,"column":28}},{"start":{"line":18,"column":32},"end":{"line":18,"column":54}}],"line":18},"6":{"loc":{"start":{"line":21,"column":8},"end":{"line":23,"column":9}},"type":"if","locations":[{"start":{"line":21,"column":8},"end":{"line":23,"column":9}},{"start":{"line":21,"column":8},"end":{"line":23,"column":9}}],"line":21},"7":{"loc":{"start":{"line":25,"column":8},"end":{"line":27,"column":9}},"type":"if","locations":[{"start":{"line":25,"column":8},"end":{"line":27,"column":9}},{"start":{"line":25,"column":8},"end":{"line":27,"column":9}}],"line":25}},"s":{"0":1,"1":1,"2":39,"3":4,"4":35,"5":2,"6":33,"7":33,"8":0,"9":10,"10":2,"11":8,"12":3,"13":5,"14":5,"15":0,"16":1},"f":{"0":39,"1":10},"b":{"0":[4,35],"1":[39,37],"2":[2,33],"3":[0,33],"4":[2,8],"5":[10,9],"6":[3,5],"7":[0,5]},"inputSourceMap":{"version":3,"file":"C:/Users/oreak/IdeaProjects/project_team059/src/controller/SectionsValidator.ts","sources":["C:/Users/oreak/IdeaProjects/project_team059/src/controller/SectionsValidator.ts"],"names":[],"mappings":";;AAAA,qDAA+D;AAE/D,MAAqB,iBAAiB;IAE9B,UAAU,CAAC,EAAU,EAAE,GAAa;QAE1C,IAAI,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,MAAM,KAAK,CAAC,EAAE;YAC/C,MAAM,IAAI,6BAAY,CAAC,sBAAsB,CAAC,CAAC;SAC/C;QAGD,IAAI,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE;YACrB,MAAM,IAAI,6BAAY,CAAC,+BAA+B,CAAC,CAAC;SACxD;QAGD,MAAM,WAAW,GAAG,SAAS,CAAC;QAC9B,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE;YAC1B,MAAM,IAAI,6BAAY,CAAC,YAAY,CAAC,CAAC;SACrC;IACF,CAAC;IAGM,iBAAiB,CAAC,EAAU,EAAE,GAAa;QAEjD,IAAI,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,MAAM,KAAK,CAAC,EAAE;YAC/C,MAAM,IAAI,6BAAY,CAAC,sBAAsB,CAAC,CAAC;SAC/C;QAGD,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE;YACtB,MAAM,IAAI,8BAAa,CAAC,mBAAmB,CAAC,CAAC;SAC7C;QAGD,MAAM,WAAW,GAAG,SAAS,CAAC;QAC9B,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE;YAC1B,MAAM,IAAI,6BAAY,CAAC,YAAY,CAAC,CAAC;SACrC;IACF,CAAC;CACD;AAtCD,oCAsCC","sourcesContent":["import { InsightError, NotFoundError } from \"./IInsightFacade\";\n\nexport default class SectionsValidator {\n\t// checks if a dataset id is valid to be added\n\tpublic validateId(id: string, ids: string[]): void {\n\t\t// Validate ID follows proper format\n\t\tif (id.includes(\"_\") || id.trim().length === 0) {\n\t\t\tthrow new InsightError(\"Invalid ID structure\");\n\t\t}\n\n\t\t// Check if ID already exists\n\t\tif (ids.includes(id)) {\n\t\t\tthrow new InsightError(\"Dataset already in our record\");\n\t\t}\n\n\t\t// Validate content based on its kind\n\t\tconst base64Regex = /^[^_]+$/;\n\t\tif (!base64Regex.test(id)) {\n\t\t\tthrow new InsightError(\"Invalid id\");\n\t\t}\n\t}\n\n\t// checks if a dataset id is valid to be removed\n\tpublic validateIdRemoval(id: string, ids: string[]): void {\n\t\t// Validate ID follows proper format\n\t\tif (id.includes(\"_\") || id.trim().length === 0) {\n\t\t\tthrow new InsightError(\"Invalid ID structure\");\n\t\t}\n\n\t\t// Check if ID already exists\n\t\tif (!ids.includes(id)) {\n\t\t\tthrow new NotFoundError(\"Dataset not found\");\n\t\t}\n\n\t\t// Validate content based on its kind\n\t\tconst base64Regex = /^[^_]+$/;\n\t\tif (!base64Regex.test(id)) {\n\t\t\tthrow new InsightError(\"Invalid id\");\n\t\t}\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"4348b259339ebbe46f348221b48d5ef43472c755","contentHash":"d7bd289eaa115c70a6b93095cbe8532fbe375a6137f41f566aad0862c1b1ac06"},"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\SectionsParser.ts":{"path":"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\SectionsParser.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":16},"end":{"line":6,"column":49}},"4":{"start":{"line":7,"column":25},"end":{"line":7,"column":69}},"5":{"start":{"line":8,"column":19},"end":{"line":8,"column":55}},"6":{"start":{"line":10,"column":19},"end":{"line":21,"column":5}},"7":{"start":{"line":22,"column":14},"end":{"line":22,"column":54}},"8":{"start":{"line":23,"column":14},"end":{"line":23,"column":63}},"9":{"start":{"line":24,"column":34},"end":{"line":24,"column":38}},"10":{"start":{"line":26,"column":23},"end":{"line":26,"column":53}},"11":{"start":{"line":27,"column":20},"end":{"line":27,"column":59}},"12":{"start":{"line":28,"column":8},"end":{"line":28,"column":39}},"13":{"start":{"line":31,"column":34},"end":{"line":34,"column":9}},"14":{"start":{"line":32,"column":30},"end":{"line":32,"column":50}},"15":{"start":{"line":33,"column":12},"end":{"line":33,"column":75}},"16":{"start":{"line":33,"column":48},"end":{"line":33,"column":73}},"17":{"start":{"line":35,"column":38},"end":{"line":35,"column":120}},"18":{"start":{"line":35,"column":74},"end":{"line":35,"column":119}},"19":{"start":{"line":36,"column":8},"end":{"line":36,"column":37}},"20":{"start":{"line":39,"column":23},"end":{"line":39,"column":31}},"21":{"start":{"line":40,"column":52},"end":{"line":40,"column":96}},"22":{"start":{"line":40,"column":81},"end":{"line":40,"column":95}},"23":{"start":{"line":41,"column":31},"end":{"line":47,"column":9}},"24":{"start":{"line":48,"column":47},"end":{"line":48,"column":91}},"25":{"start":{"line":48,"column":76},"end":{"line":48,"column":90}},"26":{"start":{"line":49,"column":31},"end":{"line":55,"column":9}},"27":{"start":{"line":56,"column":27},"end":{"line":56,"column":87}},"28":{"start":{"line":57,"column":8},"end":{"line":62,"column":9}},"29":{"start":{"line":58,"column":12},"end":{"line":58,"column":55}},"30":{"start":{"line":61,"column":12},"end":{"line":61,"column":51}},"31":{"start":{"line":65,"column":28},"end":{"line":65,"column":30}},"32":{"start":{"line":66,"column":8},"end":{"line":80,"column":9}},"33":{"start":{"line":67,"column":25},"end":{"line":67,"column":28}},"34":{"start":{"line":68,"column":12},"end":{"line":79,"column":13}},"35":{"start":{"line":69,"column":39},"end":{"line":77,"column":18}},"36":{"start":{"line":70,"column":37},"end":{"line":70,"column":57}},"37":{"start":{"line":71,"column":20},"end":{"line":73,"column":21}},"38":{"start":{"line":72,"column":24},"end":{"line":72,"column":36}},"39":{"start":{"line":74,"column":50},"end":{"line":74,"column":84}},"40":{"start":{"line":75,"column":20},"end":{"line":75,"column":60}},"41":{"start":{"line":76,"column":20},"end":{"line":76,"column":46}},"42":{"start":{"line":78,"column":16},"end":{"line":78,"column":49}},"43":{"start":{"line":81,"column":31},"end":{"line":81,"column":61}},"44":{"start":{"line":82,"column":8},"end":{"line":82,"column":58}},"45":{"start":{"line":85,"column":28},"end":{"line":85,"column":30}},"46":{"start":{"line":86,"column":25},"end":{"line":86,"column":27}},"47":{"start":{"line":87,"column":21},"end":{"line":87,"column":78}},"48":{"start":{"line":88,"column":8},"end":{"line":113,"column":9}},"49":{"start":{"line":89,"column":28},"end":{"line":111,"column":14}},"50":{"start":{"line":92,"column":16},"end":{"line":94,"column":17}},"51":{"start":{"line":93,"column":20},"end":{"line":93,"column":32}},"52":{"start":{"line":95,"column":46},"end":{"line":95,"column":76}},"53":{"start":{"line":96,"column":16},"end":{"line":96,"column":52}},"54":{"start":{"line":97,"column":16},"end":{"line":106,"column":19}},"55":{"start":{"line":98,"column":20},"end":{"line":105,"column":21}},"56":{"start":{"line":99,"column":43},"end":{"line":99,"column":70}},"57":{"start":{"line":100,"column":24},"end":{"line":100,"column":117}},"58":{"start":{"line":101,"column":24},"end":{"line":101,"column":50}},"59":{"start":{"line":104,"column":24},"end":{"line":104,"column":67}},"60":{"start":{"line":107,"column":16},"end":{"line":107,"column":36}},"61":{"start":{"line":110,"column":16},"end":{"line":110,"column":26}},"62":{"start":{"line":112,"column":12},"end":{"line":112,"column":38}},"63":{"start":{"line":114,"column":8},"end":{"line":114,"column":39}},"64":{"start":{"line":115,"column":30},"end":{"line":115,"column":60}},"65":{"start":{"line":116,"column":8},"end":{"line":116,"column":29}},"66":{"start":{"line":119,"column":23},"end":{"line":119,"column":31}},"67":{"start":{"line":120,"column":52},"end":{"line":123,"column":10}},"68":{"start":{"line":121,"column":26},"end":{"line":121,"column":40}},"69":{"start":{"line":122,"column":12},"end":{"line":122,"column":25}},"70":{"start":{"line":124,"column":31},"end":{"line":130,"column":9}},"71":{"start":{"line":131,"column":47},"end":{"line":131,"column":91}},"72":{"start":{"line":131,"column":76},"end":{"line":131,"column":90}},"73":{"start":{"line":132,"column":31},"end":{"line":138,"column":9}},"74":{"start":{"line":139,"column":27},"end":{"line":139,"column":87}},"75":{"start":{"line":140,"column":8},"end":{"line":140,"column":26}},"76":{"start":{"line":143,"column":34},"end":{"line":143,"column":36}},"77":{"start":{"line":144,"column":8},"end":{"line":149,"column":9}},"78":{"start":{"line":145,"column":12},"end":{"line":148,"column":13}},"79":{"start":{"line":146,"column":35},"end":{"line":146,"column":117}},"80":{"start":{"line":147,"column":16},"end":{"line":147,"column":51}},"81":{"start":{"line":150,"column":8},"end":{"line":150,"column":45}},"82":{"start":{"line":153,"column":0},"end":{"line":153,"column":33}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":25,"column":4},"end":{"line":25,"column":5}},"loc":{"start":{"line":25,"column":40},"end":{"line":29,"column":5}},"line":25},"2":{"name":"(anonymous_2)","decl":{"start":{"line":30,"column":4},"end":{"line":30,"column":5}},"loc":{"start":{"line":30,"column":34},"end":{"line":37,"column":5}},"line":30},"3":{"name":"(anonymous_3)","decl":{"start":{"line":31,"column":34},"end":{"line":31,"column":35}},"loc":{"start":{"line":31,"column":60},"end":{"line":34,"column":9}},"line":31},"4":{"name":"(anonymous_4)","decl":{"start":{"line":33,"column":37},"end":{"line":33,"column":38}},"loc":{"start":{"line":33,"column":48},"end":{"line":33,"column":73}},"line":33},"5":{"name":"(anonymous_5)","decl":{"start":{"line":35,"column":61},"end":{"line":35,"column":62}},"loc":{"start":{"line":35,"column":74},"end":{"line":35,"column":119}},"line":35},"6":{"name":"(anonymous_6)","decl":{"start":{"line":38,"column":4},"end":{"line":38,"column":5}},"loc":{"start":{"line":38,"column":60},"end":{"line":63,"column":5}},"line":38},"7":{"name":"(anonymous_7)","decl":{"start":{"line":40,"column":69},"end":{"line":40,"column":70}},"loc":{"start":{"line":40,"column":81},"end":{"line":40,"column":95}},"line":40},"8":{"name":"(anonymous_8)","decl":{"start":{"line":48,"column":64},"end":{"line":48,"column":65}},"loc":{"start":{"line":48,"column":76},"end":{"line":48,"column":90}},"line":48},"9":{"name":"(anonymous_9)","decl":{"start":{"line":64,"column":4},"end":{"line":64,"column":5}},"loc":{"start":{"line":64,"column":30},"end":{"line":83,"column":5}},"line":64},"10":{"name":"(anonymous_10)","decl":{"start":{"line":69,"column":75},"end":{"line":69,"column":76}},"loc":{"start":{"line":69,"column":95},"end":{"line":77,"column":17}},"line":69},"11":{"name":"(anonymous_11)","decl":{"start":{"line":84,"column":4},"end":{"line":84,"column":5}},"loc":{"start":{"line":84,"column":35},"end":{"line":117,"column":5}},"line":84},"12":{"name":"(anonymous_12)","decl":{"start":{"line":91,"column":22},"end":{"line":91,"column":23}},"loc":{"start":{"line":91,"column":38},"end":{"line":108,"column":13}},"line":91},"13":{"name":"(anonymous_13)","decl":{"start":{"line":97,"column":46},"end":{"line":97,"column":47}},"loc":{"start":{"line":97,"column":59},"end":{"line":106,"column":17}},"line":97},"14":{"name":"(anonymous_14)","decl":{"start":{"line":109,"column":23},"end":{"line":109,"column":24}},"loc":{"start":{"line":109,"column":32},"end":{"line":111,"column":13}},"line":109},"15":{"name":"(anonymous_15)","decl":{"start":{"line":118,"column":4},"end":{"line":118,"column":5}},"loc":{"start":{"line":118,"column":28},"end":{"line":141,"column":5}},"line":118},"16":{"name":"(anonymous_16)","decl":{"start":{"line":120,"column":69},"end":{"line":120,"column":70}},"loc":{"start":{"line":120,"column":81},"end":{"line":123,"column":9}},"line":120},"17":{"name":"(anonymous_17)","decl":{"start":{"line":131,"column":64},"end":{"line":131,"column":65}},"loc":{"start":{"line":131,"column":76},"end":{"line":131,"column":90}},"line":131},"18":{"name":"(anonymous_18)","decl":{"start":{"line":142,"column":4},"end":{"line":142,"column":5}},"loc":{"start":{"line":142,"column":49},"end":{"line":151,"column":5}},"line":142}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":57,"column":8},"end":{"line":62,"column":9}},"type":"if","locations":[{"start":{"line":57,"column":8},"end":{"line":62,"column":9}},{"start":{"line":57,"column":8},"end":{"line":62,"column":9}}],"line":57},"4":{"loc":{"start":{"line":68,"column":12},"end":{"line":79,"column":13}},"type":"if","locations":[{"start":{"line":68,"column":12},"end":{"line":79,"column":13}},{"start":{"line":68,"column":12},"end":{"line":79,"column":13}}],"line":68},"5":{"loc":{"start":{"line":68,"column":16},"end":{"line":68,"column":67}},"type":"binary-expr","locations":[{"start":{"line":68,"column":16},"end":{"line":68,"column":42}},{"start":{"line":68,"column":46},"end":{"line":68,"column":67}}],"line":68},"6":{"loc":{"start":{"line":71,"column":20},"end":{"line":73,"column":21}},"type":"if","locations":[{"start":{"line":71,"column":20},"end":{"line":73,"column":21}},{"start":{"line":71,"column":20},"end":{"line":73,"column":21}}],"line":71},"7":{"loc":{"start":{"line":92,"column":16},"end":{"line":94,"column":17}},"type":"if","locations":[{"start":{"line":92,"column":16},"end":{"line":94,"column":17}},{"start":{"line":92,"column":16},"end":{"line":94,"column":17}}],"line":92},"8":{"loc":{"start":{"line":98,"column":20},"end":{"line":105,"column":21}},"type":"if","locations":[{"start":{"line":98,"column":20},"end":{"line":105,"column":21}},{"start":{"line":98,"column":20},"end":{"line":105,"column":21}}],"line":98},"9":{"loc":{"start":{"line":145,"column":12},"end":{"line":148,"column":13}},"type":"if","locations":[{"start":{"line":145,"column":12},"end":{"line":148,"column":13}},{"start":{"line":145,"column":12},"end":{"line":148,"column":13}}],"line":145}},"s":{"0":1,"1":3,"2":1,"3":1,"4":1,"5":1,"6":62,"7":62,"8":62,"9":1,"10":33,"11":33,"12":31,"13":14751,"14":265705,"15":265705,"16":2656994,"17":14751,"18":265705,"19":14751,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":31,"32":31,"33":12143,"34":12143,"35":12139,"36":12139,"37":12138,"38":4762,"39":7376,"40":7376,"41":7376,"42":12139,"43":31,"44":30,"45":30,"46":30,"47":30,"48":28,"49":7376,"50":7376,"51":1,"52":7375,"53":7375,"54":7375,"55":132846,"56":50617,"57":50617,"58":50617,"59":82229,"60":7375,"61":0,"62":7376,"63":28,"64":28,"65":28,"66":132846,"67":132846,"68":664230,"69":664230,"70":132846,"71":132846,"72":664230,"73":132846,"74":132846,"75":132846,"76":30,"77":30,"78":12138,"79":7376,"80":7376,"81":30,"82":1},"f":{"0":3,"1":33,"2":14751,"3":265705,"4":2656994,"5":265705,"6":0,"7":0,"8":0,"9":31,"10":12139,"11":30,"12":7376,"13":132846,"14":0,"15":132846,"16":664230,"17":664230,"18":30},"b":{"0":[1,1,1],"1":[1,2],"2":[3,3],"3":[0,0],"4":[12139,4],"5":[12143,12139],"6":[4762,7376],"7":[1,7375],"8":[50617,82229],"9":[7376,4762]},"inputSourceMap":{"version":3,"file":"C:/Users/oreak/IdeaProjects/project_team059/src/controller/SectionsParser.ts","sources":["C:/Users/oreak/IdeaProjects/project_team059/src/controller/SectionsParser.ts"],"names":[],"mappings":"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","sourcesContent":["import JSZip from \"jszip\";\nimport Section, { Mfield, Sfield } from \"./IInsightFacade\";\nimport fs from \"fs-extra\";\nimport { DatasetRecord } from \"./DiskReader\";\n\nexport default class SectionsParser {\n\tprivate valid_fields: string[] = [\n\t\t\"Year\",\n\t\t\"Course\",\n\t\t\"Title\",\n\t\t\"Professor\",\n\t\t\"Subject\",\n\t\t\"id\",\n\t\t\"Avg\",\n\t\t\"Pass\",\n\t\t\"Fail\",\n\t\t\"Audit\",\n\t];\n\n\t// Keep order of mFields and sFields according to chart found in Section Specification sheet\n\t// for consistency\n\tpublic mFields: string[] = [\"Year\", \"Avg\", \"Pass\", \"Fail\", \"Audit\"];\n\n\tpublic sFields: string[] = [\"id\", \"Course\", \"Title\", \"Professor\", \"Subject\"];\n\n\tprivate static OVERALL_SECTION_YEAR = 1900;\n\t//  REQUIRES: content: dataset content in base64 string, f\n\t//  \t\t  id:  name of current dataset about to be counted\n\t//            datasets: map containing all datasets and associated sections added to InsightFacade instance so far\n\t//  EFFECTS: Unzips the content of a dataset into a JSZIP\n\t//  \t\tthen logs all valid sections to the associated dataset id to 'datasets' and\n\t//  \t\treturns the number of rows in an added dataset\n\t// OUTPUT: returns number of rows in that dataset that is added.\n\t// public async countRows(content: string, id: string, datasets: Map<string, Section[]>): Promise<number> {\n\t// \tconst buffer = Buffer.from(content, \"base64\");\n\t// \tconst zip = await JSZip.loadAsync(buffer);\n\t//\n\t// \tconst numSections = await this.logAndCountValidSections(zip, id, datasets);\n\t//\n\t// \tawait this.logDataset(zip, id);\n\t//\n\t// \tif (numSections === 0) {\n\t// \t\tthrow new InsightError(\"No valid section\");\n\t// \t}\n\t//\n\t// \treturn numSections;\n\t// }\n\n\tpublic async logDatasetOnDisk(content: string, id: string): Promise<void> {\n\t\tconst buffer = Buffer.from(content, \"base64\");\n\t\tconst zip = await JSZip.loadAsync(buffer);\n\t\tawait this.logDataset(zip, id);\n\t}\n\n\t// REQUIRES: zip - current dataset content as a JSZIP\n\t// \t\t\t  id - name of dataset\n\t//            datasets - map containing all datasets and associated sections added to InsightFacade instance so far\n\t// EFFECTS: parses the JSZIP files in the dataset and sorts through each JSON file containing each course, then\n\t// \t\t\tparses the JSON object to obtain the 'result' object and finds all sections,\n\t//          filters only valid sections, tracks number of valid sections,\n\t//          then turns each valid section into a Section object.\n\t//\t\t\tSums the number of valid sections per course for all courses in the dataset and returns value.\n\t// OUTPUT: returns the number of valid sections in a dataset and logs the valid sections to the 'datasets' map\n\t// private async logAndCountValidSections(zip: JSZip, id: string, datasets: Map<string, Section[]>): Promise<number> {\n\t// \tlet numSections = 0;\n\t// \tconst allPromises = [];\n\t//\n\t// \tfor (const key in zip.files) {\n\t// \t\tconst name = key;\n\t//\n\t// \t\tif (name.match(/^courses\\/\\w/) && name.match(/^[^.]+$/)) {\n\t// \t\t\tconst promiseContent = zip.files[key].async(\"string\").then(async (content0) => {\n\t// \t\t\t\tconst jsonData = JSON.parse(content0);\n\t//\n\t// \t\t\t\tif (jsonData.result.length === 0) {\n\t// \t\t\t\t\treturn null;\n\t// \t\t\t\t}\n\t//\n\t// \t\t\t\tconst validSectionsInCourse = this.filterValidSections(jsonData);\n\t// \t\t\t\tjsonData.result = validSectionsInCourse;\n\t//\n\t// \t\t\t\tnumSections = validSectionsInCourse.size;\n\t//\n\t// \t\t\t\treturn { name, jsonData };\n\t// \t\t\t});\n\t//\n\t// \t\t\tallPromises.push(promiseContent);\n\t// \t\t}\n\t// \t}\n\t//\n\t// \tawait Promise.all(allPromises);\n\t// \treturn numSections;\n\t// }\n\n\t// REQUIRES: jsonData - parsed JSON Object of the result key in a given course file\n\t//\n\t// EFFECTS: Iterate through each section in a given course file and for each section obtain all the sfields and mfields\n\t// \t\t\tand checks that each section contains all the fields in the variable valid_fields, else filter out.\n\t//\n\t// OUTPUT: returns all the valid sections as a JSONObject.\n\tprivate filterValidSections(jsonData: any): any {\n\t\tconst hasAllValidFields = (section: any, validFields: string[]): boolean => {\n\t\t\tconst fieldKeys = Object.keys(section);\n\t\t\treturn validFields.every((field) => fieldKeys.includes(field));\n\t\t};\n\n\t\tconst validSectionsInCourse = jsonData.result.filter((section: any) =>\n\t\t\thasAllValidFields(section, this.valid_fields)\n\t\t);\n\t\treturn validSectionsInCourse;\n\t}\n\n\t// REQUIRES: dataset_id - name of dataset\n\t// \t\t\t jsonData - parsed JSON Object of a valid section from the result key in a given course file\n\t//           datasets - map containing all datasets and associated sections added to InsightFacade instance so far\n\t// EFFECTS: Retrieves the fields of the section and populate the values of the sfields and mfields into a Section object\n\t// \t\t\tthen add the new section to the section list of 'dataset' map with the associated dataset id.\n\t//\n\t// OUTPUT: void\n\tprivate addNewSectionToDatabase(dataset_id: string, jsonData: any, datasets: Map<string, Section[]>): void {\n\t\tconst result = jsonData;\n\n\t\tconst [uuid, id, title, instructor, dept] = this.sFields.map((sfield) => result[sfield]);\n\n\t\tconst sectionSfields: Sfield = {\n\t\t\tuuid,\n\t\t\tid,\n\t\t\ttitle,\n\t\t\tinstructor,\n\t\t\tdept,\n\t\t};\n\n\t\tconst [year, avg, pass, fail, audit] = this.mFields.map((mfield) => result[mfield]);\n\n\t\tconst sectionMfields: Mfield = {\n\t\t\tyear,\n\t\t\tavg,\n\t\t\tpass,\n\t\t\tfail,\n\t\t\taudit,\n\t\t};\n\t\t// log section into database of datasets\n\t\t// if id has not been logged yet, log it, else append new section to list of sections in dictionary\n\t\tconst newSection: Section = new Section(sectionMfields, sectionSfields);\n\t\tif (id in datasets) {\n\t\t\tdatasets.get(dataset_id)?.push(newSection);\n\t\t} else {\n\t\t\tdatasets.set(dataset_id, [newSection]);\n\t\t}\n\t}\n\n\t// REQUIRES: zip - current dataset content as a JSZIP\n\t// \t\t\t  id - name of dataset\n\t// EFFECTS: parses the JSZIP files in the dataset and sorts through each JSON file containing each course, then\n\t// \t\t\tparses the JSON object to obtain the 'result' object and finds all sections,\n\t//          filters only valid sections,\n\t//          write the valid sections with the associated dataset id onto the disk\n\t// OUTPUT: void\n\tprivate async logDataset(zip: JSZip, id: string): Promise<void> {\n\t\tconst allPromises = [];\n\n\t\tfor (const key in zip.files) {\n\t\t\tconst name = key;\n\n\t\t\tif (name.match(/^courses\\/\\w/) && name.match(/^[^.]+$/)) {\n\t\t\t\tconst promiseContent = zip.files[key].async(\"string\").then(async (content0) => {\n\t\t\t\t\tconst jsonData = JSON.parse(content0);\n\n\t\t\t\t\tif (jsonData.result.length === 0) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst validSectionsInCourse = this.filterValidSections(jsonData);\n\t\t\t\t\tjsonData.result = validSectionsInCourse;\n\n\t\t\t\t\treturn { name, jsonData };\n\t\t\t\t});\n\n\t\t\t\tallPromises.push(promiseContent);\n\t\t\t}\n\t\t}\n\n\t\tconst courseDataList = await Promise.all(allPromises);\n\t\tawait this.storeCoursesOnDisk(courseDataList, id);\n\t}\n\n\t// REQUIRES: id - name of dataset\n\t// EFFECTS: A helper function that can be used by performQuery to turn a dataset written in the disk into a\n\t// \t\t\tDatasetRecord  -> a key value pair of the all the valid sections associated with the given dataset id.\n\t// OUTPUT:  DatasetRecord, mapping the list of Sections to its associated dataset id\n\tpublic async turnDatasetToSection(id: string): Promise<DatasetRecord> {\n\t\t// tracks number of sections in a given dataset and is initialized to 0\n\n\t\t// where each promise is appended to for each course object\n\t\tconst allPromises: any[] = [];\n\t\tconst sections: Section[] = [];\n\n\t\t// list of all courses under the dataset file\n\t\tconst path = await fs.readdir(`./data/${id}/courses/`);\n\t\tfor (const course of path) {\n\t\t\tconst promise = fs\n\t\t\t\t.readJson(`./data/${id}/courses/${course}`)\n\t\t\t\t.then(async (file) => {\n\t\t\t\t\tif (file.result.length === 0) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\tconst validSectionsInCourse = this.filterValidSections(file);\n\t\t\t\t\tfile.result = validSectionsInCourse;\n\t\t\t\t\t// turn all valid sections to Sections objects\n\t\t\t\t\tvalidSectionsInCourse.forEach((section: any) => {\n\t\t\t\t\t\tif(section.Section === \"overall\") {\n\t\t\t\t\t\t\tconst newSection = this.createSection(section)\n\t\t\t\t\t\t\tnewSection.setMfield(newSection.getMFieldIndex(\"year\"), SectionsParser.OVERALL_SECTION_YEAR)\n\t\t\t\t\t\t\tsections.push(newSection);\n\t\t\t\t\t\t\t//console.log(newSection.getMfields().year)\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsections.push(this.createSection(section));\n\n\t\t\t\t\t\t}\n\n\n\n\t\t\t\t\t});\n\n\t\t\t\t\treturn { id, file };\n\t\t\t\t})\n\t\t\t\t.catch((err) => {\n\t\t\t\t\tthrow err;\n\t\t\t\t});\n\n\t\t\tallPromises.push(promise);\n\t\t}\n\n\t\tawait Promise.all(allPromises);\n\t\t//console.log(sections)\n\t\tconst datasetRecord: DatasetRecord = { id: id, sections: sections };\n\t\treturn datasetRecord;\n\t}\n\n\t// REQUIRES: jsonData - parsed JSON Object of a valid section from the result key in a given course file\n\t// EFFECTS: Retrieves the fields of the section and populate the values of the sfields and mfields into a Section object\n\t// OUTPUT: newly populated and created Section object\n\tprivate createSection(jsonData: any): Section {\n\t\tconst result = jsonData;\n\n\t\tconst [uuid, id, title, instructor, dept]: string[] = this.sFields.map((sfield) => {\n\t\t\tconst value = result[sfield] as string;\n\t\t\treturn value;\n\t\t});\n\n\t\tconst sectionSfields: Sfield = {\n\t\t\tuuid: String(uuid),\n\t\t\tid: String(id),\n\t\t\ttitle: String(title),\n\t\t\tinstructor: String(instructor),\n\t\t\tdept: String(dept),\n\t\t};\n\n\t\t//console.log(typeof sectionSfields.uuid)\n\n\t\tconst [year, avg, pass, fail, audit] = this.mFields.map((mfield) =>\n\t\t\tresult[mfield]);\n\n\t\tconst sectionMfields: Mfield = {\n\t\t\tyear: Number(year),\n\t\t\tavg: Number(avg),\n\t\t\tpass: Number(pass),\n\t\t\tfail: Number(fail),\n\t\t\taudit: Number(audit),\n\t\t};\n\n\t\tconst newSection: Section = new Section(sectionMfields, sectionSfields);\n\t\t//console.log(typeof newSection.getSfields().id)\n\t\treturn newSection;\n\t}\n\n\t// REQUIRES: courseDataList: list of JSON files associated with course files and their accompanied name in a dataset\n\t// \t\t\t\t\t\t\tex - dataset 'test3' containing the courses CPSC 110 --> {jSON FILE CPSC110, \"CPSC 110\"}\n\t//\t\t\t id: dataset id name\n\t// EFFECTS: takes the list of courses and writes them as a JSON file to be stored on to disk with the following directory:\n\t//\t\t\t\"./data/${id}/${ course name}.json\"\n\t// OUTPUT: void\n\tprivate async storeCoursesOnDisk(\n\t\tcourseDataList: Awaited<null | { jsonData: any; name: string }>[],\n\t\tid: string\n\t): Promise<void> {\n\t\tconst allCoursePromises = [];\n\t\tfor (const course of courseDataList) {\n\t\t\tif (course) {\n\t\t\t\tconst courseData = fs.outputJson(`./data/${id}/${course.name}.json`, course.jsonData);\n\t\t\t\tallCoursePromises.push(courseData);\n\t\t\t}\n\t\t}\n\t\tawait Promise.all(allCoursePromises);\n\t}\n\n\t// Counts the number of rows in a given dataset content and adds\n\t// public async countRows(content: string, id: string, datasets: Map<string, Section[]>): Promise<number> {\n\t// \t// Decode base64 string into buffer\n\t// \tconst buffer = Buffer.from(content, \"base64\");\n\t//\n\t// \t// load buffer in JSZip -> zip file\n\t// \tconst zip = await JSZip.loadAsync(buffer);\n\t//\n\t// \t// tracks number of sections in a given dataset and is initialized to 0\n\t// \tlet numSections = 0;\n\t//\n\t// \t// where each promise is appended to for each course object\n\t// \tconst allPromises = [];\n\t//\n\t// \t// iterates through each course\n\t// \tfor (const key in zip.files) {\n\t// \t\tconst name = key;\n\t//\n\t// \t\t// check that the file name contains courses at start AND is followed by at least one alpha-numeric char\n\t// \t\t// and that it doesn't an ending with a .(...)  (ex .png or .json or etc) indicative of an unwanted file type\n\t// \t\tif (name.match(/^courses\\/\\w/) && name.match(/^[^.]+$/)) {\n\t// \t\t\tconst promiseContent = zip.files[key].async(\"string\").then(async (content0) => {\n\t// \t\t\t\t//console.log('File Content:', content0);\n\t// \t\t\t\t// Parse JSON file in content\n\t// \t\t\t\tconst jsonData = JSON.parse(content0);\n\t// \t\t\t\t//console.log('JSON FILE:', jsonData);\n\t//\n\t// \t\t\t\t// for cases where result:[] with no sections inside\n\t// \t\t\t\tif (jsonData.result.length === 0) {\n\t// \t\t\t\t\treturn null;\n\t// \t\t\t\t}\n\t//\n\t// \t\t\t\t// 1) first create a list strings of our SFields and MFields string form to index into JSON object\n\t// \t\t\t\t// 2) retrieve value associated with field and store into appropriate Sfield variable\n\t// \t\t\t\t// 3) repeat steps with mfields\n\t// \t\t\t\t// 4) instantiate new section with mfields and sfields collected\n\t// \t\t\t\t// 5) store dataset info into our this.sectionsDataset\n\t//\n\t// \t\t\t\t// iterate through the sections of each course in the dataset\n\t// \t\t\t\t// Then filter the valid sections based on the required fields\n\t//\n\t// \t\t\t\tconst validSectionsInCourse = this.filterValidSections(jsonData);\n\t//\n\t// \t\t\t\tjsonData.result = validSectionsInCourse;\n\t//\n\t// \t\t\t\t// turn all valid sections to Sections objects\n\t// \t\t\t\tvalidSectionsInCourse.forEach((section: any) => {\n\t// \t\t\t\t\tthis.addNewSectionToDatabase(id, section, datasets);\n\t// \t\t\t\t\tnumSections++;\n\t// \t\t\t\t});\n\t// \t\t\t\treturn {name, jsonData};\n\t// \t\t\t});\n\t// \t\t\tallPromises.push(promiseContent);\n\t// \t\t}\n\t// \t}\n\t// \tconst courseDataList = await Promise.all(allPromises);\n\t// \tawait this.storeCoursesOnDisk(courseDataList, id);\n\t//\n\t// \t// after iterating through all courses in dataset, if no valid section -> throw error\n\t// \tif (numSections === 0) {\n\t// \t\tthrow new InsightError(\"No valid section\");\n\t// \t}\n\t//\n\t// \treturn numSections;\n\t// }\n\n\t// REDUNDANT\n\t// public async countRowsInDataset(id: string): Promise<number> {\n\t// \t// where each promise is appended to for each course object\n\t// \tconst allPromises: any[] = [];\n\t// \tconst sections: Section[] = [];\n\t// \tlet numSections: number = 0\n\t//\n\t// \t// list of all courses under the dataset file\n\t// \tconst path = await fs.readdir(`./data/${id}/courses/`);\n\t// \tfor (const course of path) {\n\t// \t\tconst promise = fs\n\t// \t\t\t.readJson(`./data/${id}/courses/${course}`)\n\t// \t\t\t.then(async (file) => {\n\t// \t\t\t\tif (file.result.length === 0) {\n\t// \t\t\t\t\treturn null;\n\t// \t\t\t\t}\n\t// \t\t\t\tconst validSectionsInCourse = this.filterValidSections(file);\n\t// \t\t\t\tnumSections += validSectionsInCourse.length\n\t// \t\t\t})\n\t// \t\t\t.catch((err) => {\n\t// \t\t\t\tthrow err;\n\t// \t\t\t});\n\t//\n\t// \t\tallPromises.push(promise);\n\t// \t}\n\t// \tawait Promise.all(allPromises);\n\t// \treturn numSections\n\t// }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"a15d2400dee35d090dc29de779f97c7e2b5de4b7","contentHash":"e2739aadf83fd3c2a574d7dc74d24105134a116096685445b4e63fd2bbc7ff38"},"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\QueryEngine.ts":{"path":"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\QueryEngine.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":25},"end":{"line":6,"column":52}},"4":{"start":{"line":7,"column":21},"end":{"line":7,"column":61}},"5":{"start":{"line":12,"column":22},"end":{"line":12,"column":35}},"6":{"start":{"line":13,"column":18},"end":{"line":13,"column":36}},"7":{"start":{"line":14,"column":14},"end":{"line":14,"column":59}},"8":{"start":{"line":15,"column":14},"end":{"line":15,"column":54}},"9":{"start":{"line":16,"column":19},"end":{"line":16,"column":39}},"10":{"start":{"line":17,"column":21},"end":{"line":17,"column":41}},"11":{"start":{"line":20,"column":8},"end":{"line":20,"column":35}},"12":{"start":{"line":21,"column":8},"end":{"line":21,"column":49}},"13":{"start":{"line":22,"column":8},"end":{"line":22,"column":30}},"14":{"start":{"line":23,"column":8},"end":{"line":23,"column":48}},"15":{"start":{"line":26,"column":8},"end":{"line":59,"column":11}},"16":{"start":{"line":27,"column":35},"end":{"line":27,"column":37}},"17":{"start":{"line":28,"column":25},"end":{"line":28,"column":27}},"18":{"start":{"line":29,"column":12},"end":{"line":29,"column":39}},"19":{"start":{"line":30,"column":29},"end":{"line":30,"column":42}},"20":{"start":{"line":31,"column":12},"end":{"line":57,"column":13}},"21":{"start":{"line":32,"column":34},"end":{"line":32,"column":55}},"22":{"start":{"line":33,"column":36},"end":{"line":33,"column":97}},"23":{"start":{"line":33,"column":62},"end":{"line":33,"column":96}},"24":{"start":{"line":34,"column":16},"end":{"line":36,"column":17}},"25":{"start":{"line":35,"column":20},"end":{"line":35,"column":84}},"26":{"start":{"line":37,"column":16},"end":{"line":42,"column":17}},"27":{"start":{"line":38,"column":20},"end":{"line":38,"column":72}},"28":{"start":{"line":41,"column":20},"end":{"line":41,"column":83}},"29":{"start":{"line":43,"column":16},"end":{"line":48,"column":17}},"30":{"start":{"line":44,"column":20},"end":{"line":44,"column":84}},"31":{"start":{"line":47,"column":20},"end":{"line":47,"column":85}},"32":{"start":{"line":51,"column":16},"end":{"line":56,"column":17}},"33":{"start":{"line":52,"column":20},"end":{"line":52,"column":30}},"34":{"start":{"line":55,"column":20},"end":{"line":55,"column":81}},"35":{"start":{"line":58,"column":12},"end":{"line":58,"column":28}},"36":{"start":{"line":62,"column":31},"end":{"line":62,"column":33}},"37":{"start":{"line":63,"column":8},"end":{"line":63,"column":30}},"38":{"start":{"line":64,"column":8},"end":{"line":83,"column":9}},"39":{"start":{"line":65,"column":12},"end":{"line":74,"column":13}},"40":{"start":{"line":66,"column":16},"end":{"line":66,"column":37}},"41":{"start":{"line":67,"column":16},"end":{"line":67,"column":40}},"42":{"start":{"line":69,"column":17},"end":{"line":74,"column":13}},"43":{"start":{"line":70,"column":16},"end":{"line":70,"column":88}},"44":{"start":{"line":73,"column":16},"end":{"line":73,"column":101}},"45":{"start":{"line":77,"column":12},"end":{"line":82,"column":13}},"46":{"start":{"line":78,"column":16},"end":{"line":78,"column":26}},"47":{"start":{"line":81,"column":16},"end":{"line":81,"column":77}},"48":{"start":{"line":84,"column":8},"end":{"line":84,"column":32}},"49":{"start":{"line":87,"column":22},"end":{"line":87,"column":24}},"50":{"start":{"line":88,"column":8},"end":{"line":117,"column":9}},"51":{"start":{"line":89,"column":12},"end":{"line":108,"column":13}},"52":{"start":{"line":90,"column":16},"end":{"line":90,"column":68}},"53":{"start":{"line":92,"column":17},"end":{"line":108,"column":13}},"54":{"start":{"line":93,"column":30},"end":{"line":93,"column":51}},"55":{"start":{"line":94,"column":37},"end":{"line":94,"column":45}},"56":{"start":{"line":95,"column":16},"end":{"line":95,"column":69}},"57":{"start":{"line":97,"column":17},"end":{"line":108,"column":13}},"58":{"start":{"line":98,"column":30},"end":{"line":98,"column":51}},"59":{"start":{"line":99,"column":37},"end":{"line":99,"column":45}},"60":{"start":{"line":100,"column":16},"end":{"line":100,"column":61}},"61":{"start":{"line":102,"column":17},"end":{"line":108,"column":13}},"62":{"start":{"line":103,"column":33},"end":{"line":103,"column":46}},"63":{"start":{"line":104,"column":16},"end":{"line":104,"column":100}},"64":{"start":{"line":107,"column":16},"end":{"line":107,"column":89}},"65":{"start":{"line":111,"column":12},"end":{"line":116,"column":13}},"66":{"start":{"line":112,"column":16},"end":{"line":112,"column":26}},"67":{"start":{"line":115,"column":16},"end":{"line":115,"column":77}},"68":{"start":{"line":118,"column":8},"end":{"line":118,"column":23}},"69":{"start":{"line":121,"column":8},"end":{"line":138,"column":9}},"70":{"start":{"line":122,"column":38},"end":{"line":122,"column":70}},"71":{"start":{"line":123,"column":36},"end":{"line":123,"column":84}},"72":{"start":{"line":124,"column":12},"end":{"line":129,"column":13}},"73":{"start":{"line":125,"column":16},"end":{"line":125,"column":87}},"74":{"start":{"line":128,"column":16},"end":{"line":128,"column":97}},"75":{"start":{"line":128,"column":59},"end":{"line":128,"column":95}},"76":{"start":{"line":132,"column":12},"end":{"line":137,"column":13}},"77":{"start":{"line":133,"column":16},"end":{"line":133,"column":26}},"78":{"start":{"line":136,"column":16},"end":{"line":136,"column":77}},"79":{"start":{"line":141,"column":8},"end":{"line":172,"column":9}},"80":{"start":{"line":142,"column":29},"end":{"line":142,"column":47}},"81":{"start":{"line":143,"column":27},"end":{"line":143,"column":45}},"82":{"start":{"line":144,"column":12},"end":{"line":144,"column":41}},"83":{"start":{"line":145,"column":36},"end":{"line":145,"column":71}},"84":{"start":{"line":146,"column":12},"end":{"line":163,"column":13}},"85":{"start":{"line":147,"column":16},"end":{"line":147,"column":87}},"86":{"start":{"line":150,"column":16},"end":{"line":162,"column":17}},"87":{"start":{"line":151,"column":39},"end":{"line":151,"column":67}},"88":{"start":{"line":152,"column":44},"end":{"line":152,"column":61}},"89":{"start":{"line":153,"column":20},"end":{"line":155,"column":21}},"90":{"start":{"line":154,"column":24},"end":{"line":154,"column":140}},"91":{"start":{"line":156,"column":43},"end":{"line":156,"column":69}},"92":{"start":{"line":157,"column":39},"end":{"line":157,"column":72}},"93":{"start":{"line":158,"column":20},"end":{"line":158,"column":118}},"94":{"start":{"line":158,"column":63},"end":{"line":158,"column":116}},"95":{"start":{"line":161,"column":20},"end":{"line":161,"column":76}},"96":{"start":{"line":166,"column":12},"end":{"line":171,"column":13}},"97":{"start":{"line":167,"column":16},"end":{"line":167,"column":26}},"98":{"start":{"line":170,"column":16},"end":{"line":170,"column":77}},"99":{"start":{"line":175,"column":8},"end":{"line":200,"column":9}},"100":{"start":{"line":176,"column":29},"end":{"line":176,"column":47}},"101":{"start":{"line":177,"column":27},"end":{"line":177,"column":45}},"102":{"start":{"line":178,"column":12},"end":{"line":178,"column":41}},"103":{"start":{"line":179,"column":36},"end":{"line":179,"column":71}},"104":{"start":{"line":180,"column":12},"end":{"line":191,"column":13}},"105":{"start":{"line":181,"column":16},"end":{"line":181,"column":87}},"106":{"start":{"line":184,"column":16},"end":{"line":190,"column":17}},"107":{"start":{"line":185,"column":39},"end":{"line":185,"column":67}},"108":{"start":{"line":186,"column":20},"end":{"line":186,"column":100}},"109":{"start":{"line":189,"column":20},"end":{"line":189,"column":76}},"110":{"start":{"line":194,"column":12},"end":{"line":199,"column":13}},"111":{"start":{"line":195,"column":16},"end":{"line":195,"column":26}},"112":{"start":{"line":198,"column":16},"end":{"line":198,"column":77}},"113":{"start":{"line":203,"column":8},"end":{"line":222,"column":9}},"114":{"start":{"line":204,"column":36},"end":{"line":204,"column":67}},"115":{"start":{"line":205,"column":12},"end":{"line":213,"column":13}},"116":{"start":{"line":206,"column":16},"end":{"line":206,"column":55}},"117":{"start":{"line":208,"column":17},"end":{"line":213,"column":13}},"118":{"start":{"line":209,"column":16},"end":{"line":209,"column":54}},"119":{"start":{"line":212,"column":16},"end":{"line":212,"column":84}},"120":{"start":{"line":216,"column":12},"end":{"line":221,"column":13}},"121":{"start":{"line":217,"column":16},"end":{"line":217,"column":26}},"122":{"start":{"line":220,"column":16},"end":{"line":220,"column":77}},"123":{"start":{"line":225,"column":24},"end":{"line":225,"column":26}},"124":{"start":{"line":226,"column":8},"end":{"line":228,"column":9}},"125":{"start":{"line":227,"column":12},"end":{"line":227,"column":85}},"126":{"start":{"line":229,"column":8},"end":{"line":234,"column":9}},"127":{"start":{"line":230,"column":12},"end":{"line":233,"column":13}},"128":{"start":{"line":231,"column":28},"end":{"line":231,"column":89}},"129":{"start":{"line":232,"column":16},"end":{"line":232,"column":34}},"130":{"start":{"line":235,"column":8},"end":{"line":237,"column":9}},"131":{"start":{"line":236,"column":12},"end":{"line":236,"column":30}},"132":{"start":{"line":238,"column":8},"end":{"line":238,"column":48}},"133":{"start":{"line":241,"column":23},"end":{"line":241,"column":25}},"134":{"start":{"line":242,"column":8},"end":{"line":244,"column":9}},"135":{"start":{"line":243,"column":12},"end":{"line":243,"column":84}},"136":{"start":{"line":245,"column":8},"end":{"line":250,"column":9}},"137":{"start":{"line":246,"column":12},"end":{"line":249,"column":13}},"138":{"start":{"line":247,"column":28},"end":{"line":247,"column":89}},"139":{"start":{"line":248,"column":16},"end":{"line":248,"column":33}},"140":{"start":{"line":251,"column":8},"end":{"line":251,"column":29}},"141":{"start":{"line":254,"column":8},"end":{"line":256,"column":9}},"142":{"start":{"line":255,"column":12},"end":{"line":255,"column":95}},"143":{"start":{"line":257,"column":8},"end":{"line":262,"column":9}},"144":{"start":{"line":258,"column":12},"end":{"line":258,"column":45}},"145":{"start":{"line":260,"column":13},"end":{"line":262,"column":9}},"146":{"start":{"line":261,"column":12},"end":{"line":261,"column":91}},"147":{"start":{"line":263,"column":8},"end":{"line":263,"column":20}},"148":{"start":{"line":266,"column":22},"end":{"line":266,"column":24}},"149":{"start":{"line":267,"column":22},"end":{"line":267,"column":24}},"150":{"start":{"line":268,"column":23},"end":{"line":268,"column":25}},"151":{"start":{"line":269,"column":8},"end":{"line":294,"column":9}},"152":{"start":{"line":270,"column":32},"end":{"line":270,"column":52}},"153":{"start":{"line":271,"column":32},"end":{"line":271,"column":93}},"154":{"start":{"line":271,"column":60},"end":{"line":271,"column":92}},"155":{"start":{"line":272,"column":12},"end":{"line":274,"column":13}},"156":{"start":{"line":273,"column":16},"end":{"line":273,"column":83}},"157":{"start":{"line":275,"column":12},"end":{"line":280,"column":13}},"158":{"start":{"line":276,"column":16},"end":{"line":276,"column":62}},"159":{"start":{"line":279,"column":16},"end":{"line":279,"column":81}},"160":{"start":{"line":281,"column":12},"end":{"line":283,"column":13}},"161":{"start":{"line":282,"column":16},"end":{"line":282,"column":102}},"162":{"start":{"line":284,"column":12},"end":{"line":284,"column":46}},"163":{"start":{"line":285,"column":12},"end":{"line":285,"column":70}},"164":{"start":{"line":288,"column":12},"end":{"line":293,"column":13}},"165":{"start":{"line":289,"column":16},"end":{"line":289,"column":26}},"166":{"start":{"line":292,"column":16},"end":{"line":292,"column":77}},"167":{"start":{"line":295,"column":8},"end":{"line":295,"column":23}},"168":{"start":{"line":298,"column":22},"end":{"line":298,"column":24}},"169":{"start":{"line":299,"column":8},"end":{"line":307,"column":9}},"170":{"start":{"line":300,"column":36},"end":{"line":300,"column":84}},"171":{"start":{"line":301,"column":12},"end":{"line":306,"column":13}},"172":{"start":{"line":302,"column":16},"end":{"line":302,"column":87}},"173":{"start":{"line":305,"column":16},"end":{"line":305,"column":43}},"174":{"start":{"line":308,"column":8},"end":{"line":308,"column":39}},"175":{"start":{"line":309,"column":8},"end":{"line":309,"column":62}},"176":{"start":{"line":310,"column":8},"end":{"line":310,"column":60}},"177":{"start":{"line":311,"column":8},"end":{"line":311,"column":23}},"178":{"start":{"line":314,"column":24},"end":{"line":314,"column":55}},"179":{"start":{"line":315,"column":24},"end":{"line":315,"column":26}},"180":{"start":{"line":316,"column":8},"end":{"line":327,"column":9}},"181":{"start":{"line":317,"column":27},"end":{"line":317,"column":38}},"182":{"start":{"line":318,"column":29},"end":{"line":318,"column":49}},"183":{"start":{"line":319,"column":26},"end":{"line":319,"column":46}},"184":{"start":{"line":320,"column":12},"end":{"line":320,"column":41}},"185":{"start":{"line":321,"column":12},"end":{"line":326,"column":13}},"186":{"start":{"line":322,"column":16},"end":{"line":322,"column":37}},"187":{"start":{"line":325,"column":16},"end":{"line":325,"column":92}},"188":{"start":{"line":328,"column":8},"end":{"line":328,"column":23}},"189":{"start":{"line":331,"column":25},"end":{"line":331,"column":38}},"190":{"start":{"line":332,"column":8},"end":{"line":337,"column":9}},"191":{"start":{"line":333,"column":12},"end":{"line":333,"column":28}},"192":{"start":{"line":336,"column":12},"end":{"line":336,"column":84}},"193":{"start":{"line":340,"column":0},"end":{"line":340,"column":30}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":19,"column":4},"end":{"line":19,"column":5}},"loc":{"start":{"line":19,"column":34},"end":{"line":24,"column":5}},"line":19},"2":{"name":"(anonymous_2)","decl":{"start":{"line":25,"column":4},"end":{"line":25,"column":5}},"loc":{"start":{"line":25,"column":23},"end":{"line":60,"column":5}},"line":25},"3":{"name":"(anonymous_3)","decl":{"start":{"line":26,"column":27},"end":{"line":26,"column":28}},"loc":{"start":{"line":26,"column":40},"end":{"line":59,"column":9}},"line":26},"4":{"name":"(anonymous_4)","decl":{"start":{"line":33,"column":53},"end":{"line":33,"column":54}},"loc":{"start":{"line":33,"column":62},"end":{"line":33,"column":96}},"line":33},"5":{"name":"(anonymous_5)","decl":{"start":{"line":61,"column":4},"end":{"line":61,"column":5}},"loc":{"start":{"line":61,"column":23},"end":{"line":85,"column":5}},"line":61},"6":{"name":"(anonymous_6)","decl":{"start":{"line":86,"column":4},"end":{"line":86,"column":5}},"loc":{"start":{"line":86,"column":32},"end":{"line":119,"column":5}},"line":86},"7":{"name":"(anonymous_7)","decl":{"start":{"line":120,"column":4},"end":{"line":120,"column":5}},"loc":{"start":{"line":120,"column":34},"end":{"line":139,"column":5}},"line":120},"8":{"name":"(anonymous_8)","decl":{"start":{"line":128,"column":46},"end":{"line":128,"column":47}},"loc":{"start":{"line":128,"column":59},"end":{"line":128,"column":95}},"line":128},"9":{"name":"(anonymous_9)","decl":{"start":{"line":140,"column":4},"end":{"line":140,"column":5}},"loc":{"start":{"line":140,"column":35},"end":{"line":173,"column":5}},"line":140},"10":{"name":"(anonymous_10)","decl":{"start":{"line":158,"column":50},"end":{"line":158,"column":51}},"loc":{"start":{"line":158,"column":63},"end":{"line":158,"column":116}},"line":158},"11":{"name":"(anonymous_11)","decl":{"start":{"line":174,"column":4},"end":{"line":174,"column":5}},"loc":{"start":{"line":174,"column":43},"end":{"line":201,"column":5}},"line":174},"12":{"name":"(anonymous_12)","decl":{"start":{"line":202,"column":4},"end":{"line":202,"column":5}},"loc":{"start":{"line":202,"column":41},"end":{"line":223,"column":5}},"line":202},"13":{"name":"(anonymous_13)","decl":{"start":{"line":224,"column":4},"end":{"line":224,"column":5}},"loc":{"start":{"line":224,"column":21},"end":{"line":239,"column":5}},"line":224},"14":{"name":"(anonymous_14)","decl":{"start":{"line":240,"column":4},"end":{"line":240,"column":5}},"loc":{"start":{"line":240,"column":20},"end":{"line":252,"column":5}},"line":240},"15":{"name":"(anonymous_15)","decl":{"start":{"line":253,"column":4},"end":{"line":253,"column":5}},"loc":{"start":{"line":253,"column":28},"end":{"line":264,"column":5}},"line":253},"16":{"name":"(anonymous_16)","decl":{"start":{"line":265,"column":4},"end":{"line":265,"column":5}},"loc":{"start":{"line":265,"column":37},"end":{"line":296,"column":5}},"line":265},"17":{"name":"(anonymous_17)","decl":{"start":{"line":271,"column":51},"end":{"line":271,"column":52}},"loc":{"start":{"line":271,"column":60},"end":{"line":271,"column":92}},"line":271},"18":{"name":"(anonymous_18)","decl":{"start":{"line":297,"column":4},"end":{"line":297,"column":5}},"loc":{"start":{"line":297,"column":47},"end":{"line":312,"column":5}},"line":297},"19":{"name":"(anonymous_19)","decl":{"start":{"line":313,"column":4},"end":{"line":313,"column":5}},"loc":{"start":{"line":313,"column":25},"end":{"line":329,"column":5}},"line":313},"20":{"name":"(anonymous_20)","decl":{"start":{"line":330,"column":4},"end":{"line":330,"column":5}},"loc":{"start":{"line":330,"column":32},"end":{"line":338,"column":5}},"line":330}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":34,"column":16},"end":{"line":36,"column":17}},"type":"if","locations":[{"start":{"line":34,"column":16},"end":{"line":36,"column":17}},{"start":{"line":34,"column":16},"end":{"line":36,"column":17}}],"line":34},"4":{"loc":{"start":{"line":37,"column":16},"end":{"line":42,"column":17}},"type":"if","locations":[{"start":{"line":37,"column":16},"end":{"line":42,"column":17}},{"start":{"line":37,"column":16},"end":{"line":42,"column":17}}],"line":37},"5":{"loc":{"start":{"line":43,"column":16},"end":{"line":48,"column":17}},"type":"if","locations":[{"start":{"line":43,"column":16},"end":{"line":48,"column":17}},{"start":{"line":43,"column":16},"end":{"line":48,"column":17}}],"line":43},"6":{"loc":{"start":{"line":51,"column":16},"end":{"line":56,"column":17}},"type":"if","locations":[{"start":{"line":51,"column":16},"end":{"line":56,"column":17}},{"start":{"line":51,"column":16},"end":{"line":56,"column":17}}],"line":51},"7":{"loc":{"start":{"line":51,"column":20},"end":{"line":51,"column":119}},"type":"binary-expr","locations":[{"start":{"line":51,"column":20},"end":{"line":51,"column":64}},{"start":{"line":51,"column":68},"end":{"line":51,"column":119}}],"line":51},"8":{"loc":{"start":{"line":65,"column":12},"end":{"line":74,"column":13}},"type":"if","locations":[{"start":{"line":65,"column":12},"end":{"line":74,"column":13}},{"start":{"line":65,"column":12},"end":{"line":74,"column":13}}],"line":65},"9":{"loc":{"start":{"line":69,"column":17},"end":{"line":74,"column":13}},"type":"if","locations":[{"start":{"line":69,"column":17},"end":{"line":74,"column":13}},{"start":{"line":69,"column":17},"end":{"line":74,"column":13}}],"line":69},"10":{"loc":{"start":{"line":77,"column":12},"end":{"line":82,"column":13}},"type":"if","locations":[{"start":{"line":77,"column":12},"end":{"line":82,"column":13}},{"start":{"line":77,"column":12},"end":{"line":82,"column":13}}],"line":77},"11":{"loc":{"start":{"line":77,"column":16},"end":{"line":77,"column":115}},"type":"binary-expr","locations":[{"start":{"line":77,"column":16},"end":{"line":77,"column":60}},{"start":{"line":77,"column":64},"end":{"line":77,"column":115}}],"line":77},"12":{"loc":{"start":{"line":89,"column":12},"end":{"line":108,"column":13}},"type":"if","locations":[{"start":{"line":89,"column":12},"end":{"line":108,"column":13}},{"start":{"line":89,"column":12},"end":{"line":108,"column":13}}],"line":89},"13":{"loc":{"start":{"line":92,"column":17},"end":{"line":108,"column":13}},"type":"if","locations":[{"start":{"line":92,"column":17},"end":{"line":108,"column":13}},{"start":{"line":92,"column":17},"end":{"line":108,"column":13}}],"line":92},"14":{"loc":{"start":{"line":97,"column":17},"end":{"line":108,"column":13}},"type":"if","locations":[{"start":{"line":97,"column":17},"end":{"line":108,"column":13}},{"start":{"line":97,"column":17},"end":{"line":108,"column":13}}],"line":97},"15":{"loc":{"start":{"line":102,"column":17},"end":{"line":108,"column":13}},"type":"if","locations":[{"start":{"line":102,"column":17},"end":{"line":108,"column":13}},{"start":{"line":102,"column":17},"end":{"line":108,"column":13}}],"line":102},"16":{"loc":{"start":{"line":111,"column":12},"end":{"line":116,"column":13}},"type":"if","locations":[{"start":{"line":111,"column":12},"end":{"line":116,"column":13}},{"start":{"line":111,"column":12},"end":{"line":116,"column":13}}],"line":111},"17":{"loc":{"start":{"line":111,"column":16},"end":{"line":111,"column":115}},"type":"binary-expr","locations":[{"start":{"line":111,"column":16},"end":{"line":111,"column":60}},{"start":{"line":111,"column":64},"end":{"line":111,"column":115}}],"line":111},"18":{"loc":{"start":{"line":124,"column":12},"end":{"line":129,"column":13}},"type":"if","locations":[{"start":{"line":124,"column":12},"end":{"line":129,"column":13}},{"start":{"line":124,"column":12},"end":{"line":129,"column":13}}],"line":124},"19":{"loc":{"start":{"line":132,"column":12},"end":{"line":137,"column":13}},"type":"if","locations":[{"start":{"line":132,"column":12},"end":{"line":137,"column":13}},{"start":{"line":132,"column":12},"end":{"line":137,"column":13}}],"line":132},"20":{"loc":{"start":{"line":132,"column":16},"end":{"line":132,"column":115}},"type":"binary-expr","locations":[{"start":{"line":132,"column":16},"end":{"line":132,"column":60}},{"start":{"line":132,"column":64},"end":{"line":132,"column":115}}],"line":132},"21":{"loc":{"start":{"line":146,"column":12},"end":{"line":163,"column":13}},"type":"if","locations":[{"start":{"line":146,"column":12},"end":{"line":163,"column":13}},{"start":{"line":146,"column":12},"end":{"line":163,"column":13}}],"line":146},"22":{"loc":{"start":{"line":150,"column":16},"end":{"line":162,"column":17}},"type":"if","locations":[{"start":{"line":150,"column":16},"end":{"line":162,"column":17}},{"start":{"line":150,"column":16},"end":{"line":162,"column":17}}],"line":150},"23":{"loc":{"start":{"line":153,"column":20},"end":{"line":155,"column":21}},"type":"if","locations":[{"start":{"line":153,"column":20},"end":{"line":155,"column":21}},{"start":{"line":153,"column":20},"end":{"line":155,"column":21}}],"line":153},"24":{"loc":{"start":{"line":166,"column":12},"end":{"line":171,"column":13}},"type":"if","locations":[{"start":{"line":166,"column":12},"end":{"line":171,"column":13}},{"start":{"line":166,"column":12},"end":{"line":171,"column":13}}],"line":166},"25":{"loc":{"start":{"line":166,"column":16},"end":{"line":166,"column":115}},"type":"binary-expr","locations":[{"start":{"line":166,"column":16},"end":{"line":166,"column":60}},{"start":{"line":166,"column":64},"end":{"line":166,"column":115}}],"line":166},"26":{"loc":{"start":{"line":180,"column":12},"end":{"line":191,"column":13}},"type":"if","locations":[{"start":{"line":180,"column":12},"end":{"line":191,"column":13}},{"start":{"line":180,"column":12},"end":{"line":191,"column":13}}],"line":180},"27":{"loc":{"start":{"line":184,"column":16},"end":{"line":190,"column":17}},"type":"if","locations":[{"start":{"line":184,"column":16},"end":{"line":190,"column":17}},{"start":{"line":184,"column":16},"end":{"line":190,"column":17}}],"line":184},"28":{"loc":{"start":{"line":194,"column":12},"end":{"line":199,"column":13}},"type":"if","locations":[{"start":{"line":194,"column":12},"end":{"line":199,"column":13}},{"start":{"line":194,"column":12},"end":{"line":199,"column":13}}],"line":194},"29":{"loc":{"start":{"line":194,"column":16},"end":{"line":194,"column":115}},"type":"binary-expr","locations":[{"start":{"line":194,"column":16},"end":{"line":194,"column":60}},{"start":{"line":194,"column":64},"end":{"line":194,"column":115}}],"line":194},"30":{"loc":{"start":{"line":205,"column":12},"end":{"line":213,"column":13}},"type":"if","locations":[{"start":{"line":205,"column":12},"end":{"line":213,"column":13}},{"start":{"line":205,"column":12},"end":{"line":213,"column":13}}],"line":205},"31":{"loc":{"start":{"line":208,"column":17},"end":{"line":213,"column":13}},"type":"if","locations":[{"start":{"line":208,"column":17},"end":{"line":213,"column":13}},{"start":{"line":208,"column":17},"end":{"line":213,"column":13}}],"line":208},"32":{"loc":{"start":{"line":216,"column":12},"end":{"line":221,"column":13}},"type":"if","locations":[{"start":{"line":216,"column":12},"end":{"line":221,"column":13}},{"start":{"line":216,"column":12},"end":{"line":221,"column":13}}],"line":216},"33":{"loc":{"start":{"line":216,"column":16},"end":{"line":216,"column":115}},"type":"binary-expr","locations":[{"start":{"line":216,"column":16},"end":{"line":216,"column":60}},{"start":{"line":216,"column":64},"end":{"line":216,"column":115}}],"line":216},"34":{"loc":{"start":{"line":226,"column":8},"end":{"line":228,"column":9}},"type":"if","locations":[{"start":{"line":226,"column":8},"end":{"line":228,"column":9}},{"start":{"line":226,"column":8},"end":{"line":228,"column":9}}],"line":226},"35":{"loc":{"start":{"line":230,"column":12},"end":{"line":233,"column":13}},"type":"if","locations":[{"start":{"line":230,"column":12},"end":{"line":233,"column":13}},{"start":{"line":230,"column":12},"end":{"line":233,"column":13}}],"line":230},"36":{"loc":{"start":{"line":230,"column":16},"end":{"line":230,"column":55}},"type":"binary-expr","locations":[{"start":{"line":230,"column":16},"end":{"line":230,"column":39}},{"start":{"line":230,"column":43},"end":{"line":230,"column":55}}],"line":230},"37":{"loc":{"start":{"line":235,"column":8},"end":{"line":237,"column":9}},"type":"if","locations":[{"start":{"line":235,"column":8},"end":{"line":237,"column":9}},{"start":{"line":235,"column":8},"end":{"line":237,"column":9}}],"line":235},"38":{"loc":{"start":{"line":242,"column":8},"end":{"line":244,"column":9}},"type":"if","locations":[{"start":{"line":242,"column":8},"end":{"line":244,"column":9}},{"start":{"line":242,"column":8},"end":{"line":244,"column":9}}],"line":242},"39":{"loc":{"start":{"line":246,"column":12},"end":{"line":249,"column":13}},"type":"if","locations":[{"start":{"line":246,"column":12},"end":{"line":249,"column":13}},{"start":{"line":246,"column":12},"end":{"line":249,"column":13}}],"line":246},"40":{"loc":{"start":{"line":246,"column":16},"end":{"line":246,"column":55}},"type":"binary-expr","locations":[{"start":{"line":246,"column":16},"end":{"line":246,"column":39}},{"start":{"line":246,"column":43},"end":{"line":246,"column":55}}],"line":246},"41":{"loc":{"start":{"line":254,"column":8},"end":{"line":256,"column":9}},"type":"if","locations":[{"start":{"line":254,"column":8},"end":{"line":256,"column":9}},{"start":{"line":254,"column":8},"end":{"line":256,"column":9}}],"line":254},"42":{"loc":{"start":{"line":257,"column":8},"end":{"line":262,"column":9}},"type":"if","locations":[{"start":{"line":257,"column":8},"end":{"line":262,"column":9}},{"start":{"line":257,"column":8},"end":{"line":262,"column":9}}],"line":257},"43":{"loc":{"start":{"line":260,"column":13},"end":{"line":262,"column":9}},"type":"if","locations":[{"start":{"line":260,"column":13},"end":{"line":262,"column":9}},{"start":{"line":260,"column":13},"end":{"line":262,"column":9}}],"line":260},"44":{"loc":{"start":{"line":272,"column":12},"end":{"line":274,"column":13}},"type":"if","locations":[{"start":{"line":272,"column":12},"end":{"line":274,"column":13}},{"start":{"line":272,"column":12},"end":{"line":274,"column":13}}],"line":272},"45":{"loc":{"start":{"line":275,"column":12},"end":{"line":280,"column":13}},"type":"if","locations":[{"start":{"line":275,"column":12},"end":{"line":280,"column":13}},{"start":{"line":275,"column":12},"end":{"line":280,"column":13}}],"line":275},"46":{"loc":{"start":{"line":281,"column":12},"end":{"line":283,"column":13}},"type":"if","locations":[{"start":{"line":281,"column":12},"end":{"line":283,"column":13}},{"start":{"line":281,"column":12},"end":{"line":283,"column":13}}],"line":281},"47":{"loc":{"start":{"line":288,"column":12},"end":{"line":293,"column":13}},"type":"if","locations":[{"start":{"line":288,"column":12},"end":{"line":293,"column":13}},{"start":{"line":288,"column":12},"end":{"line":293,"column":13}}],"line":288},"48":{"loc":{"start":{"line":288,"column":16},"end":{"line":288,"column":115}},"type":"binary-expr","locations":[{"start":{"line":288,"column":16},"end":{"line":288,"column":60}},{"start":{"line":288,"column":64},"end":{"line":288,"column":115}}],"line":288},"49":{"loc":{"start":{"line":299,"column":8},"end":{"line":307,"column":9}},"type":"if","locations":[{"start":{"line":299,"column":8},"end":{"line":307,"column":9}},{"start":{"line":299,"column":8},"end":{"line":307,"column":9}}],"line":299},"50":{"loc":{"start":{"line":301,"column":12},"end":{"line":306,"column":13}},"type":"if","locations":[{"start":{"line":301,"column":12},"end":{"line":306,"column":13}},{"start":{"line":301,"column":12},"end":{"line":306,"column":13}}],"line":301},"51":{"loc":{"start":{"line":321,"column":12},"end":{"line":326,"column":13}},"type":"if","locations":[{"start":{"line":321,"column":12},"end":{"line":326,"column":13}},{"start":{"line":321,"column":12},"end":{"line":326,"column":13}}],"line":321},"52":{"loc":{"start":{"line":321,"column":16},"end":{"line":321,"column":76}},"type":"binary-expr","locations":[{"start":{"line":321,"column":16},"end":{"line":321,"column":44}},{"start":{"line":321,"column":48},"end":{"line":321,"column":76}}],"line":321},"53":{"loc":{"start":{"line":332,"column":8},"end":{"line":337,"column":9}},"type":"if","locations":[{"start":{"line":332,"column":8},"end":{"line":337,"column":9}},{"start":{"line":332,"column":8},"end":{"line":337,"column":9}}],"line":332}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":31,"6":31,"7":31,"8":31,"9":31,"10":31,"11":31,"12":31,"13":31,"14":31,"15":78,"16":78,"17":78,"18":78,"19":78,"20":78,"21":78,"22":78,"23":148,"24":78,"25":3,"26":75,"27":71,"28":4,"29":41,"30":40,"31":1,"32":46,"33":46,"34":0,"35":32,"36":71,"37":71,"38":71,"39":71,"40":2,"41":2,"42":69,"43":2,"44":67,"45":30,"46":30,"47":0,"48":39,"49":173,"50":173,"51":173,"52":54,"53":119,"54":65,"55":65,"56":65,"57":54,"58":30,"59":30,"60":30,"61":24,"62":17,"63":17,"64":7,"65":45,"66":45,"67":0,"68":128,"69":17,"70":17,"71":15,"72":15,"73":0,"74":15,"75":969180,"76":2,"77":2,"78":0,"79":30,"80":30,"81":30,"82":30,"83":29,"84":29,"85":0,"86":29,"87":26,"88":26,"89":26,"90":2,"91":24,"92":24,"93":24,"94":1550688,"95":3,"96":6,"97":6,"98":0,"99":65,"100":65,"101":65,"102":65,"103":55,"104":55,"105":0,"106":55,"107":53,"108":53,"109":2,"110":12,"111":12,"112":0,"113":54,"114":54,"115":53,"116":44,"117":9,"118":9,"119":0,"120":18,"121":18,"122":0,"123":44,"124":44,"125":2,"126":42,"127":77,"128":77,"129":62,"130":27,"131":1,"132":26,"133":9,"134":9,"135":0,"136":9,"137":12,"138":12,"139":12,"140":9,"141":217,"142":12,"143":205,"144":48,"145":157,"146":0,"147":205,"148":40,"149":40,"150":40,"151":40,"152":40,"153":40,"154":73,"155":40,"156":3,"157":37,"158":37,"159":0,"160":36,"161":31,"162":35,"163":35,"164":8,"165":8,"166":0,"167":32,"168":35,"169":35,"170":1,"171":1,"172":0,"173":1,"174":35,"175":32,"176":32,"177":32,"178":37,"179":37,"180":37,"181":122,"182":122,"183":122,"184":122,"185":121,"186":121,"187":0,"188":36,"189":31,"190":31,"191":30,"192":1,"193":1},"f":{"0":1,"1":31,"2":78,"3":78,"4":148,"5":71,"6":173,"7":17,"8":969180,"9":30,"10":1550688,"11":65,"12":54,"13":44,"14":9,"15":217,"16":40,"17":73,"18":35,"19":37,"20":31},"b":{"0":[1,1,1],"1":[1,0],"2":[1,1],"3":[3,75],"4":[71,4],"5":[40,1],"6":[46,0],"7":[46,3],"8":[2,69],"9":[2,67],"10":[30,0],"11":[30,0],"12":[54,119],"13":[65,54],"14":[30,24],"15":[17,7],"16":[45,0],"17":[45,0],"18":[0,15],"19":[2,0],"20":[2,0],"21":[0,29],"22":[26,3],"23":[2,24],"24":[6,0],"25":[6,0],"26":[0,55],"27":[53,2],"28":[12,0],"29":[12,0],"30":[44,9],"31":[9,0],"32":[18,0],"33":[18,0],"34":[2,42],"35":[77,0],"36":[77,77],"37":[1,26],"38":[0,9],"39":[12,0],"40":[12,12],"41":[12,205],"42":[48,157],"43":[0,157],"44":[3,37],"45":[37,0],"46":[31,5],"47":[8,0],"48":[8,3],"49":[1,34],"50":[0,1],"51":[121,0],"52":[121,71],"53":[30,1]},"inputSourceMap":{"version":3,"file":"C:/Users/oreak/IdeaProjects/project_team059/src/controller/QueryEngine.ts","sources":["C:/Users/oreak/IdeaProjects/project_team059/src/controller/QueryEngine.ts"],"names":[],"mappings":"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","sourcesContent":["import Section, { InsightError, InsightResult, ResultTooLargeError } from \"./IInsightFacade\";\nimport QueryUtils from \"./QueryUtils\";\n\nexport default class QueryEngine {\n\tprivate queryingIDString: string;\n\tprivate sectionsDatabase: Map<string, Section[]>;\n\tprivate noFilter: boolean;\n\tprivate logicComparator: string[] = [\"AND\", \"OR\"];\n\tprivate mComparator: string[] = [\"LT\", \"GT\", \"EQ\"];\n\tprivate sFields: string[] = [\"uuid\", \"id\", \"title\", \"instructor\", \"dept\"];\n\tprivate mFields: string[] = [\"year\", \"avg\", \"pass\", \"fail\", \"audit\"];\n\tprivate validOptions: string[] = [\"COLUMNS\", \"ORDER\"];\n\tprivate validQueryKeys: string[] = [\"WHERE\", \"OPTIONS\"];\n\tprivate utils: QueryUtils;\n\n\tconstructor(sectionsDatabase: Map<string, Section[]>) {\n\t\tthis.queryingIDString = \"\";\n\t\tthis.sectionsDatabase = sectionsDatabase;\n\t\tthis.noFilter = false;\n\t\tthis.utils = new QueryUtils();\n\t}\n\n\tpublic async query(query: unknown): Promise<InsightResult[]> {\n\t\t//console.log(\"QUERY method\");\n\t\treturn new Promise((resolve) => {\n\t\t\tlet filteredSections: Section[] = [];\n\t\t\tlet result: InsightResult[] = [];\n\t\t\tthis.queryingIDString = \"\"; // restart on every query;\n\t\t\tconst queryObj = Object(query);\n\t\t\ttry {\n\t\t\t\tconst queryKeys = Object.keys(queryObj);\n\t\t\t\tconst invalidKeys = queryKeys.filter((key) => !this.validQueryKeys.includes(key));\n\t\t\t\tif (invalidKeys.length > 0) {\n\t\t\t\t\tthrow new InsightError(\"Excess keys in query\");\n\t\t\t\t}\n\n\t\t\t\t// If WHERE key exists, filter all the sections, else throw InsightError\n\t\t\t\tif (\"WHERE\" in queryObj) {\n\t\t\t\t\tfilteredSections = this.handleWHERE(queryObj.WHERE);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new InsightError(\"Query missing WHERE\");\n\t\t\t\t}\n\n\t\t\t\t// If OPTIONS key exists, collect InsightResults, else throw InsightError\n\t\t\t\tif (\"OPTIONS\" in queryObj) {\n\t\t\t\t\tresult = this.handleOPTIONS(queryObj.OPTIONS, filteredSections);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new InsightError(\"Query missing OPTIONS\");\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\tif (err instanceof InsightError || err instanceof ResultTooLargeError) {\n\t\t\t\t\tthrow err;\n\t\t\t\t} else {\n\t\t\t\t\tthrow new InsightError(\"Unexpected error.\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tresolve(result);\n\t\t});\n\t}\n\n\tprivate handleWHERE(where: object): Section[] {\n\t\tlet filteredSections: Section[] = [];\n\t\tthis.noFilter = false;\n\t\t//console.log(\"WHERE WORKING\");\n\t\ttry {\n\t\t\tif (Object.keys(where).length === 0) {\n\t\t\t\tthis.noFilter = true;\n\t\t\t\treturn filteredSections;\n\t\t\t} else if (Object.keys(where).length > 1) {\n\t\t\t\tthrow new InsightError(\"WHERE should only have 1 key\");\n\t\t\t} else {\n\t\t\t\tfilteredSections = this.handleFilter(Object.keys(where)[0], Object.values(where)[0]);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tif (err instanceof InsightError || err instanceof ResultTooLargeError) {\n\t\t\t\tthrow err;\n\t\t\t} else {\n\t\t\t\tthrow new InsightError(\"Unexpected error.\");\n\t\t\t}\n\t\t}\n\t\treturn filteredSections;\n\t}\n\n\tprivate handleFilter(filter: string, value: unknown): Section[] {\n\t\tlet results: Section[] = [];\n\t\t//console.log(\"HANDLING FILTER\");\n\t\t//console.log(filter);\n\t\ttry {\n\t\t\tif (this.logicComparator.includes(filter)) {\n\t\t\t\tresults = this.handleLogicComparison(filter, value);\n\t\t\t} else if (this.mComparator.includes(filter)) {\n\t\t\t\tconst entry = Object.entries(value as Record<string, number>);\n\t\t\t\tconst [key, input] = entry[0];\n\t\t\t\tresults = this.handleMComparison(filter, key, input);\n\t\t\t} else if (filter === \"IS\") {\n\t\t\t\t// property to value pairing\n\t\t\t\tconst entry = Object.entries(value as Record<string, string>);\n\t\t\t\tconst [key, input] = entry[0];\n\t\t\t\tresults = this.handleSComparison(key, input);\n\t\t\t} else if (filter === \"NOT\") {\n\t\t\t\tconst valueObj = Object(value);\n\t\t\t\tresults = this.handleNegation(Object.keys(valueObj)[0], Object.values(valueObj)[0]);\n\t\t\t} else {\n\t\t\t\tthrow new InsightError(`Invalid filter key: ${filter}`);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tif (err instanceof InsightError || err instanceof ResultTooLargeError) {\n\t\t\t\tthrow err;\n\t\t\t} else {\n\t\t\t\tthrow new InsightError(\"Unexpected error.\");\n\t\t\t}\n\t\t}\n\t\treturn results;\n\t}\n\n\tprivate handleNegation(filter: string, value: unknown): Section[] {\n\t\ttry {\n\t\t\tconst nonNegatedResults = this.handleFilter(filter, value);\n\t\t\tconst datasetSections = this.sectionsDatabase.get(this.queryingIDString);\n\t\t\tif (datasetSections === undefined) {\n\t\t\t\t// should not be possible given current implementation of other methods for query\n\t\t\t\tthrow new InsightError(\"Can't find querying dataset\");\n\t\t\t} else {\n\t\t\t\treturn datasetSections.filter((section) => !nonNegatedResults.includes(section));\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tif (err instanceof InsightError || err instanceof ResultTooLargeError) {\n\t\t\t\tthrow err;\n\t\t\t} else {\n\t\t\t\tthrow new InsightError(\"Unexpected error.\");\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate handleSComparison(skey: string, input: string): Section[] {\n\t\ttry {\n\t\t\t// split on underscore\n\t\t\tconst idstring = skey.split(\"_\")[0];\n\t\t\tconst sfield = skey.split(\"_\")[1];\n\n\t\t\t// check if database contains dataset with idstring\n\t\t\tthis.checkIDString(idstring);\n\n\t\t\t// query based on idstring\n\t\t\tconst datasetSections = this.sectionsDatabase.get(idstring);\n\t\t\tif (datasetSections === undefined) {\n\t\t\t\t// should not be possible\n\t\t\t\tthrow new InsightError(\"Can't find querying dataset\");\n\t\t\t} else {\n\t\t\t\tif (this.sFields.includes(sfield)) {\n\t\t\t\t\tconst fieldIndex = this.sFields.indexOf(sfield);\n\t\t\t\t\tconst validInputRegex = /^[*]?[^*]*[*]?$/;\n\t\t\t\t\tif (!validInputRegex.test(input)) {\n\t\t\t\t\t\tthrow new InsightError(\" Asterisks (*) can only be the first or last characters of input strings\");\n\t\t\t\t\t}\n\t\t\t\t\t// fix this return, figure out what sfield is, how to match it, and how to access\n\t\t\t\t\tconst processedInput = input.replace(/\\*/g, \".*\");\n\t\t\t\t\tconst inputRegex = new RegExp(`^${processedInput}$`); // Use case-insensitive matching\n\n\t\t\t\t\treturn datasetSections.filter((section) => inputRegex.test(section.getSFieldByIndex(fieldIndex)));\n\t\t\t\t} else {\n\t\t\t\t\tthrow new InsightError(\"Invalid sKey\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tif (err instanceof InsightError || err instanceof ResultTooLargeError) {\n\t\t\t\tthrow err;\n\t\t\t} else {\n\t\t\t\tthrow new InsightError(\"Unexpected error.\");\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate handleMComparison(filter: string, mkey: string, input: number): Section[] {\n\t\t//console.log(\"HANDLING MCOMPARISON\");\n\t\t//console.log(\"mkey: \" + mkey);\n\t\t//console.log(\"input: \" + input);\n\t\ttry {\n\t\t\tconst idstring = mkey.split(\"_\")[0];\n\t\t\tconst mfield = mkey.split(\"_\")[1];\n\n\t\t\t// check if database contains dataset with idstring\n\t\t\tthis.checkIDString(idstring);\n\t\t\tconst datasetSections = this.sectionsDatabase.get(idstring);\n\t\t\tif (datasetSections === undefined) {\n\t\t\t\t// should not be possible\n\t\t\t\tthrow new InsightError(\"Can't find querying dataset\");\n\t\t\t} else {\n\t\t\t\tif (this.mFields.includes(mfield)) {\n\t\t\t\t\tconst fieldIndex = this.mFields.indexOf(mfield);\n\t\t\t\t\treturn this.utils.filterMComparison(datasetSections, filter, fieldIndex, input);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new InsightError(\"Invalid mKey\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tif (err instanceof InsightError || err instanceof ResultTooLargeError) {\n\t\t\t\tthrow err;\n\t\t\t} else {\n\t\t\t\tthrow new InsightError(\"Unexpected error.\");\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate handleLogicComparison(filter: string, value: unknown): Section[] {\n\t\ttry {\n\t\t\tconst comparisonArray: unknown[] = this.utils.coerceToArray(value);\n\t\t\tif (filter === \"AND\") {\n\t\t\t\treturn this.handleAND(comparisonArray);\n\t\t\t} else if (filter === \"OR\") {\n\t\t\t\treturn this.handleOR(comparisonArray);\n\t\t\t} else {\n\t\t\t\tthrow new InsightError(\"Invalid Logic Comparator\");\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tif (err instanceof InsightError || err instanceof ResultTooLargeError) {\n\t\t\t\tthrow err;\n\t\t\t} else {\n\t\t\t\tthrow new InsightError(\"Unexpected error.\");\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate handleAND(value: unknown[]): Section[] {\n\t\tconst andList = [];\n\t\tif (value.length === 0) {\n\t\t\tthrow new InsightError(\"AND must be a non-empty array\");\n\t\t}\n\t\tfor (const obj of value) {\n\t\t\tif (typeof obj === \"object\" && obj !== null) {\n\t\t\t\tconst key = this.handleFilter(Object.keys(obj)[0] as string, Object.values(obj)[0] as unknown);\n\t\t\t\tandList.push(key);\n\t\t\t}\n\t\t}\n\n\t\t// only one filter applied\n\t\tif (andList.length === 1) {\n\t\t\treturn andList[0];\n\t\t}\n\n\t\treturn this.utils.mergeAndList(andList);\n\n\t\t//return andList.reduce((acc, currArray) => acc.filter((section) => currArray.includes(section)));\n\t}\n\n\tprivate handleOR(value: unknown[]): Section[] {\n\t\tconst orList = [];\n\t\tif (value.length === 0) {\n\t\t\tthrow new InsightError(\"OR must be a non-empty array\");\n\t\t}\n\n\t\tfor (const obj of value) {\n\t\t\tif (typeof obj === \"object\" && obj !== null) {\n\t\t\t\tconst key = this.handleFilter(Object.keys(obj)[0] as string, Object.values(obj)[0] as unknown);\n\t\t\t\torList.push(key);\n\t\t\t}\n\t\t}\n\t\treturn orList.flat();\n\t}\n\n\t// check if an id string is already being referenced, if not, return true\n\tprivate checkIDString(idstring: string): boolean {\n\t\tif (!this.sectionsDatabase.has(idstring)) {\n\t\t\tthrow new InsightError(`Dataset with id: ${idstring} not added.`);\n\t\t}\n\t\t// check if a dataset has already been referenced if not set queryingIDString as idstring\n\t\tif (this.queryingIDString === \"\") {\n\t\t\tthis.queryingIDString = idstring;\n\t\t} else if (this.queryingIDString !== idstring) {\n\t\t\tthrow new InsightError(\"Cannot reference multiple datasets.\");\n\t\t}\n\t\treturn true;\n\t}\n\n\tprivate handleOPTIONS(options: object, sections: Section[]): InsightResult[] {\n\t\t//console.log(\"OPTIONS WORKING\");\n\t\tlet results: InsightResult[] = [];\n\t\tlet columns: string[] = [];\n\t\tlet orderKey = \"\";\n\t\ttry {\n\t\t\tconst optionsKeys = Object.keys(options);\n\t\t\tconst invalidKeys = optionsKeys.filter((key) => !this.validOptions.includes(key));\n\t\t\tif (invalidKeys.length > 0) {\n\t\t\t\tthrow new InsightError(\"Invalid keys in OPTIONS\");\n\t\t\t}\n\n\t\t\tif (\"COLUMNS\" in options) {\n\t\t\t\tcolumns = this.handleCOLUMNS(options.COLUMNS);\n\t\t\t} else {\n\t\t\t\tthrow new InsightError(\"Query missing COLUMNS\");\n\t\t\t}\n\t\t\t//console.log(columns);\n\t\t\tif (\"ORDER\" in options) {\n\t\t\t\torderKey = this.handleORDER(options.ORDER, this.utils.coerceToArray(options.COLUMNS) as string[]);\n\t\t\t}\n\t\t\torderKey = orderKey.split(\"_\")[1];\n\t\t\tresults = this.completeQuery(sections, columns, orderKey);\n\t\t} catch (err) {\n\t\t\tif (err instanceof InsightError || err instanceof ResultTooLargeError) {\n\t\t\t\tthrow err;\n\t\t\t} else {\n\t\t\t\tthrow new InsightError(\"Unexpected error.\");\n\t\t\t}\n\t\t}\n\t\treturn results;\n\t}\n\n\t// REQUIRES: columns are valid columns, sections are filtered sections, orderKey is valid\n\tprivate completeQuery(sections: Section[], columns: string[], orderKey: string): InsightResult[] {\n\t\tlet results: InsightResult[] = [];\n\t\t//console.log(\"COMPLETE QUERY WORKING\");\n\t\t// if no filters have been applied\n\t\tif (this.noFilter) {\n\t\t\tconst datasetSections = this.sectionsDatabase.get(this.queryingIDString);\n\t\t\tif (datasetSections === undefined) {\n\t\t\t\t// should not be possible given current implementation of other methods for query\n\t\t\t\tthrow new InsightError(\"Can't find querying dataset\");\n\t\t\t} else {\n\t\t\t\tsections = datasetSections;\n\t\t\t}\n\t\t}\n\t\tthis.utils.checkSize(sections);\n\t\tresults = this.utils.selectCOLUMNS(sections, columns);\n\t\tresults = this.utils.sortByOrder(results, orderKey);\n\t\treturn results;\n\t}\n\n\t// returns the columns as an array of strings (WORKING)\n\tprivate handleCOLUMNS(value: unknown): string[] {\n\t\tconst columns = this.utils.coerceToArray(value);\n\t\tconst results: string[] = [];\n\t\tfor (const key of columns) {\n\t\t\tconst keyStr = String(key);\n\t\t\tconst idstring = keyStr.split(\"_\")[0];\n\t\t\tconst field = keyStr.split(\"_\")[1];\n\n\t\t\tthis.checkIDString(idstring);\n\t\t\tif (this.mFields.includes(field) || this.sFields.includes(field)) {\n\t\t\t\tresults.push(keyStr);\n\t\t\t} else {\n\t\t\t\tthrow new InsightError(`Invalid key ${keyStr} in COLUMNS`);\n\t\t\t}\n\t\t}\n\t\treturn results;\n\t}\n\n\t// returns the order key as a string (WORKING)\n\tprivate handleORDER(value: unknown, columns: string[]): string {\n\t\tconst valueStr = String(value);\n\t\tif (columns.includes(valueStr)) {\n\t\t\treturn valueStr;\n\t\t} else {\n\t\t\tthrow new InsightError(\"ORDER key must be in COLUMNS\");\n\t\t}\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"27cf6c511d110c928ecb11592617cd05d19bebfd","contentHash":"8a414877519258c6dccc9ae6d5075e658f0d4d99f9bf595dbf6ca8e15caecb5d"},"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\QueryUtils.ts":{"path":"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\QueryUtils.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":25},"end":{"line":3,"column":52}},"2":{"start":{"line":5,"column":14},"end":{"line":5,"column":59}},"3":{"start":{"line":6,"column":14},"end":{"line":6,"column":54}},"4":{"start":{"line":8,"column":8},"end":{"line":13,"column":9}},"5":{"start":{"line":9,"column":12},"end":{"line":9,"column":25}},"6":{"start":{"line":12,"column":12},"end":{"line":12,"column":69}},"7":{"start":{"line":16,"column":29},"end":{"line":16,"column":33}},"8":{"start":{"line":17,"column":8},"end":{"line":22,"column":9}},"9":{"start":{"line":18,"column":12},"end":{"line":18,"column":144}},"10":{"start":{"line":21,"column":12},"end":{"line":21,"column":24}},"11":{"start":{"line":25,"column":8},"end":{"line":40,"column":9}},"12":{"start":{"line":26,"column":12},"end":{"line":26,"column":27}},"13":{"start":{"line":29,"column":12},"end":{"line":39,"column":15}},"14":{"start":{"line":30,"column":31},"end":{"line":30,"column":48}},"15":{"start":{"line":31,"column":31},"end":{"line":31,"column":48}},"16":{"start":{"line":32,"column":16},"end":{"line":34,"column":17}},"17":{"start":{"line":33,"column":20},"end":{"line":33,"column":56}},"18":{"start":{"line":35,"column":16},"end":{"line":37,"column":17}},"19":{"start":{"line":36,"column":20},"end":{"line":36,"column":43}},"20":{"start":{"line":38,"column":16},"end":{"line":38,"column":68}},"21":{"start":{"line":41,"column":8},"end":{"line":41,"column":23}},"22":{"start":{"line":44,"column":24},"end":{"line":44,"column":26}},"23":{"start":{"line":45,"column":8},"end":{"line":59,"column":9}},"24":{"start":{"line":46,"column":31},"end":{"line":46,"column":33}},"25":{"start":{"line":47,"column":12},"end":{"line":57,"column":13}},"26":{"start":{"line":48,"column":30},"end":{"line":48,"column":50}},"27":{"start":{"line":49,"column":16},"end":{"line":56,"column":17}},"28":{"start":{"line":50,"column":35},"end":{"line":50,"column":62}},"29":{"start":{"line":51,"column":20},"end":{"line":51,"column":74}},"30":{"start":{"line":54,"column":35},"end":{"line":54,"column":62}},"31":{"start":{"line":55,"column":20},"end":{"line":55,"column":74}},"32":{"start":{"line":58,"column":12},"end":{"line":58,"column":37}},"33":{"start":{"line":60,"column":8},"end":{"line":60,"column":23}},"34":{"start":{"line":64,"column":8},"end":{"line":75,"column":9}},"35":{"start":{"line":65,"column":12},"end":{"line":65,"column":91}},"36":{"start":{"line":65,"column":50},"end":{"line":65,"column":89}},"37":{"start":{"line":67,"column":13},"end":{"line":75,"column":9}},"38":{"start":{"line":68,"column":12},"end":{"line":68,"column":91}},"39":{"start":{"line":68,"column":50},"end":{"line":68,"column":89}},"40":{"start":{"line":70,"column":13},"end":{"line":75,"column":9}},"41":{"start":{"line":71,"column":12},"end":{"line":71,"column":93}},"42":{"start":{"line":71,"column":50},"end":{"line":71,"column":91}},"43":{"start":{"line":74,"column":12},"end":{"line":74,"column":75}},"44":{"start":{"line":76,"column":8},"end":{"line":76,"column":23}},"45":{"start":{"line":79,"column":27},"end":{"line":81,"column":22}},"46":{"start":{"line":80,"column":12},"end":{"line":80,"column":77}},"47":{"start":{"line":82,"column":8},"end":{"line":87,"column":9}},"48":{"start":{"line":83,"column":12},"end":{"line":85,"column":13}},"49":{"start":{"line":84,"column":16},"end":{"line":84,"column":25}},"50":{"start":{"line":86,"column":12},"end":{"line":86,"column":129}},"51":{"start":{"line":86,"column":60},"end":{"line":86,"column":127}},"52":{"start":{"line":86,"column":92},"end":{"line":86,"column":126}},"53":{"start":{"line":88,"column":8},"end":{"line":88,"column":28}},"54":{"start":{"line":91,"column":24},"end":{"line":91,"column":45}},"55":{"start":{"line":92,"column":24},"end":{"line":92,"column":45}},"56":{"start":{"line":93,"column":8},"end":{"line":97,"column":9}},"57":{"start":{"line":94,"column":12},"end":{"line":96,"column":13}},"58":{"start":{"line":95,"column":16},"end":{"line":95,"column":29}},"59":{"start":{"line":98,"column":24},"end":{"line":98,"column":45}},"60":{"start":{"line":99,"column":24},"end":{"line":99,"column":45}},"61":{"start":{"line":100,"column":8},"end":{"line":104,"column":9}},"62":{"start":{"line":101,"column":12},"end":{"line":103,"column":13}},"63":{"start":{"line":102,"column":16},"end":{"line":102,"column":29}},"64":{"start":{"line":105,"column":8},"end":{"line":105,"column":20}},"65":{"start":{"line":108,"column":0},"end":{"line":108,"column":29}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":7,"column":4},"end":{"line":7,"column":5}},"loc":{"start":{"line":7,"column":25},"end":{"line":14,"column":5}},"line":7},"1":{"name":"(anonymous_1)","decl":{"start":{"line":15,"column":4},"end":{"line":15,"column":5}},"loc":{"start":{"line":15,"column":24},"end":{"line":23,"column":5}},"line":15},"2":{"name":"(anonymous_2)","decl":{"start":{"line":24,"column":4},"end":{"line":24,"column":5}},"loc":{"start":{"line":24,"column":35},"end":{"line":42,"column":5}},"line":24},"3":{"name":"(anonymous_3)","decl":{"start":{"line":29,"column":25},"end":{"line":29,"column":26}},"loc":{"start":{"line":29,"column":47},"end":{"line":39,"column":13}},"line":29},"4":{"name":"(anonymous_4)","decl":{"start":{"line":43,"column":4},"end":{"line":43,"column":5}},"loc":{"start":{"line":43,"column":37},"end":{"line":61,"column":5}},"line":43},"5":{"name":"(anonymous_5)","decl":{"start":{"line":62,"column":4},"end":{"line":62,"column":5}},"loc":{"start":{"line":62,"column":53},"end":{"line":77,"column":5}},"line":62},"6":{"name":"(anonymous_6)","decl":{"start":{"line":65,"column":37},"end":{"line":65,"column":38}},"loc":{"start":{"line":65,"column":50},"end":{"line":65,"column":89}},"line":65},"7":{"name":"(anonymous_7)","decl":{"start":{"line":68,"column":37},"end":{"line":68,"column":38}},"loc":{"start":{"line":68,"column":50},"end":{"line":68,"column":89}},"line":68},"8":{"name":"(anonymous_8)","decl":{"start":{"line":71,"column":37},"end":{"line":71,"column":38}},"loc":{"start":{"line":71,"column":50},"end":{"line":71,"column":91}},"line":71},"9":{"name":"(anonymous_9)","decl":{"start":{"line":78,"column":4},"end":{"line":78,"column":5}},"loc":{"start":{"line":78,"column":26},"end":{"line":89,"column":5}},"line":78},"10":{"name":"(anonymous_10)","decl":{"start":{"line":79,"column":42},"end":{"line":79,"column":43}},"loc":{"start":{"line":79,"column":67},"end":{"line":81,"column":9}},"line":79},"11":{"name":"(anonymous_11)","decl":{"start":{"line":86,"column":47},"end":{"line":86,"column":48}},"loc":{"start":{"line":86,"column":60},"end":{"line":86,"column":127}},"line":86},"12":{"name":"(anonymous_12)","decl":{"start":{"line":86,"column":75},"end":{"line":86,"column":76}},"loc":{"start":{"line":86,"column":92},"end":{"line":86,"column":126}},"line":86},"13":{"name":"(anonymous_13)","decl":{"start":{"line":90,"column":4},"end":{"line":90,"column":5}},"loc":{"start":{"line":90,"column":32},"end":{"line":106,"column":5}},"line":90}},"branchMap":{"0":{"loc":{"start":{"line":8,"column":8},"end":{"line":13,"column":9}},"type":"if","locations":[{"start":{"line":8,"column":8},"end":{"line":13,"column":9}},{"start":{"line":8,"column":8},"end":{"line":13,"column":9}}],"line":8},"1":{"loc":{"start":{"line":17,"column":8},"end":{"line":22,"column":9}},"type":"if","locations":[{"start":{"line":17,"column":8},"end":{"line":22,"column":9}},{"start":{"line":17,"column":8},"end":{"line":22,"column":9}}],"line":17},"2":{"loc":{"start":{"line":25,"column":8},"end":{"line":40,"column":9}},"type":"if","locations":[{"start":{"line":25,"column":8},"end":{"line":40,"column":9}},{"start":{"line":25,"column":8},"end":{"line":40,"column":9}}],"line":25},"3":{"loc":{"start":{"line":32,"column":16},"end":{"line":34,"column":17}},"type":"if","locations":[{"start":{"line":32,"column":16},"end":{"line":34,"column":17}},{"start":{"line":32,"column":16},"end":{"line":34,"column":17}}],"line":32},"4":{"loc":{"start":{"line":32,"column":20},"end":{"line":32,"column":76}},"type":"binary-expr","locations":[{"start":{"line":32,"column":20},"end":{"line":32,"column":46}},{"start":{"line":32,"column":50},"end":{"line":32,"column":76}}],"line":32},"5":{"loc":{"start":{"line":35,"column":16},"end":{"line":37,"column":17}},"type":"if","locations":[{"start":{"line":35,"column":16},"end":{"line":37,"column":17}},{"start":{"line":35,"column":16},"end":{"line":37,"column":17}}],"line":35},"6":{"loc":{"start":{"line":35,"column":20},"end":{"line":35,"column":76}},"type":"binary-expr","locations":[{"start":{"line":35,"column":20},"end":{"line":35,"column":46}},{"start":{"line":35,"column":50},"end":{"line":35,"column":76}}],"line":35},"7":{"loc":{"start":{"line":49,"column":16},"end":{"line":56,"column":17}},"type":"if","locations":[{"start":{"line":49,"column":16},"end":{"line":56,"column":17}},{"start":{"line":49,"column":16},"end":{"line":56,"column":17}}],"line":49},"8":{"loc":{"start":{"line":64,"column":8},"end":{"line":75,"column":9}},"type":"if","locations":[{"start":{"line":64,"column":8},"end":{"line":75,"column":9}},{"start":{"line":64,"column":8},"end":{"line":75,"column":9}}],"line":64},"9":{"loc":{"start":{"line":67,"column":13},"end":{"line":75,"column":9}},"type":"if","locations":[{"start":{"line":67,"column":13},"end":{"line":75,"column":9}},{"start":{"line":67,"column":13},"end":{"line":75,"column":9}}],"line":67},"10":{"loc":{"start":{"line":70,"column":13},"end":{"line":75,"column":9}},"type":"if","locations":[{"start":{"line":70,"column":13},"end":{"line":75,"column":9}},{"start":{"line":70,"column":13},"end":{"line":75,"column":9}}],"line":70},"11":{"loc":{"start":{"line":80,"column":19},"end":{"line":80,"column":76}},"type":"cond-expr","locations":[{"start":{"line":80,"column":56},"end":{"line":80,"column":65}},{"start":{"line":80,"column":68},"end":{"line":80,"column":76}}],"line":80},"12":{"loc":{"start":{"line":83,"column":12},"end":{"line":85,"column":13}},"type":"if","locations":[{"start":{"line":83,"column":12},"end":{"line":85,"column":13}},{"start":{"line":83,"column":12},"end":{"line":85,"column":13}}],"line":83},"13":{"loc":{"start":{"line":94,"column":12},"end":{"line":96,"column":13}},"type":"if","locations":[{"start":{"line":94,"column":12},"end":{"line":96,"column":13}},{"start":{"line":94,"column":12},"end":{"line":96,"column":13}}],"line":94},"14":{"loc":{"start":{"line":101,"column":12},"end":{"line":103,"column":13}},"type":"if","locations":[{"start":{"line":101,"column":12},"end":{"line":103,"column":13}},{"start":{"line":101,"column":12},"end":{"line":103,"column":13}}],"line":101}},"s":{"0":1,"1":1,"2":31,"3":31,"4":122,"5":121,"6":1,"7":35,"8":35,"9":3,"10":32,"11":32,"12":0,"13":32,"14":4263,"15":4263,"16":4263,"17":0,"18":4263,"19":0,"20":4263,"21":32,"22":32,"23":32,"24":4291,"25":4291,"26":13177,"27":13177,"28":4788,"29":4788,"30":8389,"31":8389,"32":4291,"33":32,"34":53,"35":6,"36":387672,"37":47,"38":45,"39":2907540,"40":2,"41":2,"42":129224,"43":0,"44":53,"45":26,"46":55,"47":26,"48":55,"49":14,"50":41,"51":23204,"52":111901087,"53":26,"54":111901087,"55":111901087,"56":111901087,"57":111915859,"58":111897394,"59":3693,"60":3693,"61":3693,"62":18465,"63":0,"64":3693,"65":1},"f":{"0":122,"1":35,"2":32,"3":4263,"4":32,"5":53,"6":387672,"7":2907540,"8":129224,"9":26,"10":55,"11":23204,"12":111901087,"13":111901087},"b":{"0":[121,1],"1":[3,32],"2":[0,32],"3":[0,4263],"4":[4263,0],"5":[0,4263],"6":[4263,0],"7":[4788,8389],"8":[6,47],"9":[45,2],"10":[2,0],"11":[12,43],"12":[14,41],"13":[111897394,18465],"14":[0,18465]},"inputSourceMap":{"version":3,"file":"C:/Users/oreak/IdeaProjects/project_team059/src/controller/QueryUtils.ts","sources":["C:/Users/oreak/IdeaProjects/project_team059/src/controller/QueryUtils.ts"],"names":[],"mappings":"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","sourcesContent":["import Section, { InsightError, InsightResult, Mfield, ResultTooLargeError, Sfield } from \"./IInsightFacade\";\n\nexport default class QueryUtils {\n\tprivate sFields: string[] = [\"uuid\", \"id\", \"title\", \"instructor\", \"dept\"];\n\tprivate mFields: string[] = [\"year\", \"avg\", \"pass\", \"fail\", \"audit\"];\n\n\tpublic coerceToArray(value: unknown): unknown[] {\n\t\tif (Array.isArray(value)) {\n\t\t\treturn value;\n\t\t} else {\n\t\t\tthrow new InsightError(\"Not an array.\");\n\t\t}\n\t}\n\n\tpublic checkSize(sections: Section[]): boolean {\n\t\tconst maxQuerySize = 5000;\n\t\tif (sections.length > maxQuerySize) {\n\t\t\tthrow new ResultTooLargeError(\n\t\t\t\t\"The result is too big. Only queries with a maximum of 5000 results are supported.\"\n\t\t\t);\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\tpublic sortByOrder(results: InsightResult[], orderKey: string): InsightResult[] {\n\t\tif (orderKey === \"\") {\n\t\t\treturn results;\n\t\t} else {\n\t\t\t\t// in the case of numbers stored as string\n\t\t\t\tresults.sort((recordA, recordB) => {\n\t\t\t\t\tconst valueA = recordA[orderKey];\n\t\t\t\t\tconst valueB = recordB[orderKey];\n\n\t\t\t\t\t// Handle string comparisons\n\t\t\t\t\tif (typeof valueA === 'string' && typeof valueB === 'string') {\n\t\t\t\t\t\treturn valueA.localeCompare(valueB);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Handle number comparisons\n\t\t\t\t\tif (typeof valueA === 'number' && typeof valueB === 'number') {\n\t\t\t\t\t\treturn valueA - valueB;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Handle mixed types (string vs number)\n\t\t\t\t\t// You can choose how to handle this; here we convert numbers to strings for comparison\n\t\t\t\t\treturn String(valueA).localeCompare(String(valueB));\n\t\t\t\t});\n\t\t\t\t// results.sort((recordA, recordB) => {\n\t\t\t\t// \treturn (recordA[orderKey] as string).localeCompare(recordB[orderKey] as string);\n\t\t\t\t// });\n\n\t\t}\n\t\treturn results;\n\t}\n\n\tpublic selectCOLUMNS(sections: Section[], columns: string[]): InsightResult[] {\n\t\tconst results: InsightResult[] = [];\n\t\tfor (const section of sections) {\n\t\t\tconst currRecord: InsightResult = {};\n\t\t\tfor (const column of columns) {\n\t\t\t\tconst field = column.split(\"_\")[1];\n\t\t\t\tif (this.mFields.includes(field)) {\n\t\t\t\t\tconst mIndex = this.mFields.indexOf(field);\n\t\t\t\t\tcurrRecord[column] = section.getMFieldByIndex(mIndex);\n\t\t\t\t} else {\n\t\t\t\t\tconst sIndex = this.sFields.indexOf(field);\n\t\t\t\t\tcurrRecord[column] = section.getSFieldByIndex(sIndex);\n\t\t\t\t}\n\t\t\t}\n\t\t\tresults.push(currRecord);\n\t\t}\n\t\treturn results;\n\t}\n\n\tpublic filterMComparison(dataset: Section[], filter: string, index: number, input: number): Section[] {\n\t\tlet results: Section[];\n\t\t//console.log(\"FILTER MCOMPARISON WORKING\");\n\t\tif (filter === \"LT\") {\n\t\t\tresults = dataset.filter((section) => section.getMFieldByIndex(index) < input);\n\t\t} else if (filter === \"GT\") {\n\t\t\tresults = dataset.filter((section) => section.getMFieldByIndex(index) > input);\n\t\t} else if (filter === \"EQ\") {\n\t\t\tresults = dataset.filter((section) => section.getMFieldByIndex(index) === input);\n\t\t} else {\n\t\t\tthrow new InsightError(\"Invalid MComparator\");\n\t\t}\n\t\treturn results;\n\t}\n\n\tpublic mergeAndList(andList: Section[][]): Section[] {\n\t\tlet shortestList = andList.reduce((shortest, currArray) => {\n\t\t\treturn currArray.length < shortest.length ? currArray : shortest;\n\t\t}, andList[0]);\n\n\t\tfor (const currArray of andList) {\n\t\t\tif (currArray === shortestList) {\n\t\t\t\tcontinue;\n\t\t\t} // Skip comparing the shortest list with itself\n\n\t\t\t// Filter the shortest list to keep only sections that exist in the current array\n\t\t\tshortestList = shortestList.filter((section) =>\n\t\t\t\tcurrArray.some((currSection) => this.isEqual(section, currSection))\n\t\t\t);\n\t\t}\n\t\treturn shortestList;\n\t}\n\n\tpublic isEqual(section1: Section, section2: Section): boolean {\n\t\t// Compare Sfield\n\t\tconst sfield1 = section1.getSfields();\n\t\tconst sfield2 = section2.getSfields();\n\t\tfor (const key of Object.keys(sfield1) as (keyof Sfield)[]) {\n\t\t\tif (sfield1[key] !== sfield2[key]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// Compare Mfield\n\t\tconst mfield1 = section1.getMfields();\n\t\tconst mfield2 = section2.getMfields();\n\t\tfor (const key of Object.keys(mfield1) as (keyof Mfield)[]) {\n\t\t\tif (mfield1[key] !== mfield2[key]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"de00899c9517b9d2f5cde67b813945335669d626","contentHash":"ad2cdc9a51bf99e89a1d48f1fcfa3f42afafbab0def6da55a80e22c84a8c5666"},"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\DiskReader.ts":{"path":"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\DiskReader.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":19},"end":{"line":6,"column":55}},"4":{"start":{"line":7,"column":25},"end":{"line":7,"column":69}},"5":{"start":{"line":12,"column":8},"end":{"line":12,"column":49}},"6":{"start":{"line":13,"column":8},"end":{"line":13,"column":43}},"7":{"start":{"line":16,"column":28},"end":{"line":16,"column":30}},"8":{"start":{"line":17,"column":27},"end":{"line":17,"column":70}},"9":{"start":{"line":18,"column":8},"end":{"line":22,"column":11}},"10":{"start":{"line":19,"column":12},"end":{"line":21,"column":13}},"11":{"start":{"line":20,"column":16},"end":{"line":20,"column":42}},"12":{"start":{"line":23,"column":8},"end":{"line":23,"column":27}},"13":{"start":{"line":26,"column":28},"end":{"line":26,"column":30}},"14":{"start":{"line":27,"column":34},"end":{"line":27,"column":82}},"15":{"start":{"line":28,"column":8},"end":{"line":31,"column":11}},"16":{"start":{"line":29,"column":28},"end":{"line":29,"column":63}},"17":{"start":{"line":30,"column":12},"end":{"line":30,"column":38}},"18":{"start":{"line":32,"column":24},"end":{"line":32,"column":54}},"19":{"start":{"line":33,"column":8},"end":{"line":35,"column":11}},"20":{"start":{"line":34,"column":12},"end":{"line":34,"column":61}},"21":{"start":{"line":36,"column":8},"end":{"line":36,"column":32}},"22":{"start":{"line":39,"column":0},"end":{"line":39,"column":29}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":11,"column":4},"end":{"line":11,"column":5}},"loc":{"start":{"line":11,"column":33},"end":{"line":14,"column":5}},"line":11},"2":{"name":"(anonymous_2)","decl":{"start":{"line":15,"column":4},"end":{"line":15,"column":5}},"loc":{"start":{"line":15,"column":47},"end":{"line":24,"column":5}},"line":15},"3":{"name":"(anonymous_3)","decl":{"start":{"line":18,"column":23},"end":{"line":18,"column":24}},"loc":{"start":{"line":18,"column":36},"end":{"line":22,"column":9}},"line":18},"4":{"name":"(anonymous_4)","decl":{"start":{"line":25,"column":4},"end":{"line":25,"column":5}},"loc":{"start":{"line":25,"column":46},"end":{"line":37,"column":5}},"line":25},"5":{"name":"(anonymous_5)","decl":{"start":{"line":28,"column":34},"end":{"line":28,"column":35}},"loc":{"start":{"line":28,"column":45},"end":{"line":31,"column":9}},"line":28},"6":{"name":"(anonymous_6)","decl":{"start":{"line":33,"column":24},"end":{"line":33,"column":25}},"loc":{"start":{"line":33,"column":36},"end":{"line":35,"column":9}},"line":33}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":19,"column":12},"end":{"line":21,"column":13}},"type":"if","locations":[{"start":{"line":19,"column":12},"end":{"line":21,"column":13}},{"start":{"line":19,"column":12},"end":{"line":21,"column":13}}],"line":19}},"s":{"0":1,"1":2,"2":1,"3":1,"4":1,"5":31,"6":31,"7":78,"8":78,"9":78,"10":78,"11":0,"12":78,"13":78,"14":78,"15":78,"16":0,"17":0,"18":78,"19":78,"20":0,"21":78,"22":1},"f":{"0":2,"1":31,"2":78,"3":78,"4":78,"5":0,"6":0},"b":{"0":[1,1,1],"1":[1,1],"2":[2,2],"3":[0,78]},"inputSourceMap":{"version":3,"file":"C:/Users/oreak/IdeaProjects/project_team059/src/controller/DiskReader.ts","sources":["C:/Users/oreak/IdeaProjects/project_team059/src/controller/DiskReader.ts"],"names":[],"mappings":";;;;;AACA,wDAA0B;AAC1B,sEAA8C;AAQ9C,MAAqB,UAAU;IACtB,EAAE,CAAiB;IACnB,WAAW,CAAwB;IAE3C,YAAY,eAAuC;QAClD,IAAI,CAAC,EAAE,GAAG,IAAI,wBAAc,EAAE,CAAC;QAC/B,IAAI,CAAC,WAAW,GAAG,eAAe,CAAC;IACpC,CAAC;IAKM,KAAK,CAAC,oBAAoB,CAAC,cAAwB;QACzD,MAAM,WAAW,GAAa,EAAE,CAAC;QACjC,MAAM,UAAU,GAAG,MAAM,kBAAE,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QAC/C,UAAU,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE;YAE1B,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE;gBACtC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aAC1B;QACF,CAAC,CAAC,CAAC;QAEH,OAAO,WAAW,CAAC;IACpB,CAAC;IAMM,KAAK,CAAC,kBAAkB,CAAC,eAAyB;QAExD,MAAM,WAAW,GAA6B,EAAE,CAAC;QAEjD,MAAM,iBAAiB,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,eAAe,CAAC,CAAC;QAE3E,iBAAiB,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;YAGnC,MAAM,OAAO,GAAG,IAAI,CAAC,EAAE,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;YACpD,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAC;QACH,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QAG/C,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;YAC1B,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC,WAAW,CAAC;IACzB,CAAC;CACD;AAlDD,6BAkDC","sourcesContent":["import Section from \"./IInsightFacade\";\nimport fs from \"fs-extra\";\nimport SectionsParser from \"./SectionsParser\";\n\n// data type to store dataset id and associated sections as a key value pair\nexport interface DatasetRecord {\n\tid: string;\n\tsections: Section[];\n}\n\nexport default class DiskReader {\n\tprivate sp: SectionsParser;\n\tprivate secDatabase: Map<string, Section[]>\n\n\tconstructor(sectionDatabase: Map<string, Section[]>) {\n\t\tthis.sp = new SectionsParser();\n\t\tthis.secDatabase = sectionDatabase;\n\t}\n\n\t// REQUIRES: currDatasets- array of all the dataset ids currently added in InsightFacade instance\n\t// EFFECTS: loads the list of dataset ids currently on disk and finds the dataset ids not in currDatasets\n\t// OUTPUT: returns list of dataset ids on disk not found in currently added datasets\n\tpublic async findDatasetsNotAdded(currDatasetIDs: string[]): Promise<string[]> {\n\t\tconst missingData: string[] = [];\n\t\tconst allDataset = await fs.readdir(\"./data/\");\n\t\tallDataset.map((dataset) => {\n\t\t\t//console.log(dataset)\n\t\t\tif (!currDatasetIDs.includes(dataset)) {\n\t\t\t\tmissingData.push(dataset);\n\t\t\t}\n\t\t});\n\t\t//console.log(missingData)\n\t\treturn missingData;\n\t}\n\n\t// REQUIRES: currDatasets - array of all the dataset ids currently added in InsightFacade instance\n\t// EFFECTS: finds all datasets in disks not in current datasets and returns a map of the datasets with their id (dataset name)\n\t// and associated sections\n\t// datasetsIds = all currently added datasets (refer to currIDs),\n\tpublic async mapMissingSections(currDatasetsIDs: string[]): Promise<Map<string, Section[]>> {\n\t\t//const missingDatasets = new Map<string, Section[]>();\n\t\tconst allPromises: Promise<DatasetRecord>[] = [];\n\t\t// the id of all datasets not currently added\n\t\tconst missingDatasetsID = await this.findDatasetsNotAdded(currDatasetsIDs);\n\n\t\tmissingDatasetsID.forEach((setId) => {\n\t\t\t// all ids for missing datasets are returned as a Record\n\t\t\t// with all the sections associated with the id\n\t\t\tconst promise = this.sp.turnDatasetToSection(setId);\n\t\t\tallPromises.push(promise);\n\t\t});\n\t\tconst records = await Promise.all(allPromises);\n\n\t\t// add all records collected to Map\n\t\trecords.forEach((record) => {\n\t\t\tthis.secDatabase.set(record.id, record.sections);\n\t\t});\n\n\t\treturn this.secDatabase;\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"ffbd0f59eabf337db86fe7ca5d70b1e06ad560d7","contentHash":"594b2acb37e729e37e1e7ea15fc2a489364452ab72f3bfd2349def583687e49d"}}