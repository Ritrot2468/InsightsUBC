{"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\IInsightFacade.ts":{"path":"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\IInsightFacade.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":113}},"2":{"start":{"line":5,"column":0},"end":{"line":8,"column":89}},"3":{"start":{"line":6,"column":4},"end":{"line":6,"column":48}},"4":{"start":{"line":7,"column":4},"end":{"line":7,"column":42}},"5":{"start":{"line":11,"column":8},"end":{"line":11,"column":23}},"6":{"start":{"line":12,"column":8},"end":{"line":12,"column":52}},"7":{"start":{"line":15,"column":0},"end":{"line":15,"column":36}},"8":{"start":{"line":18,"column":8},"end":{"line":18,"column":23}},"9":{"start":{"line":19,"column":8},"end":{"line":19,"column":53}},"10":{"start":{"line":22,"column":0},"end":{"line":22,"column":38}},"11":{"start":{"line":25,"column":8},"end":{"line":25,"column":23}},"12":{"start":{"line":26,"column":8},"end":{"line":26,"column":59}},"13":{"start":{"line":29,"column":0},"end":{"line":29,"column":50}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":1},"end":{"line":5,"column":2}},"loc":{"start":{"line":5,"column":31},"end":{"line":8,"column":1}},"line":5},"1":{"name":"(anonymous_1)","decl":{"start":{"line":10,"column":4},"end":{"line":10,"column":5}},"loc":{"start":{"line":10,"column":25},"end":{"line":13,"column":5}},"line":10},"2":{"name":"(anonymous_2)","decl":{"start":{"line":17,"column":4},"end":{"line":17,"column":5}},"loc":{"start":{"line":17,"column":25},"end":{"line":20,"column":5}},"line":17},"3":{"name":"(anonymous_3)","decl":{"start":{"line":24,"column":4},"end":{"line":24,"column":5}},"loc":{"start":{"line":24,"column":25},"end":{"line":27,"column":5}},"line":24}},"branchMap":{"0":{"loc":{"start":{"line":8,"column":24},"end":{"line":8,"column":87}},"type":"binary-expr","locations":[{"start":{"line":8,"column":24},"end":{"line":8,"column":50}},{"start":{"line":8,"column":55},"end":{"line":8,"column":86}}],"line":8}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":134,"6":134,"7":1,"8":12,"9":12,"10":1,"11":3,"12":3,"13":1},"f":{"0":1,"1":134,"2":12,"3":3},"b":{"0":[1,1]},"inputSourceMap":{"version":3,"file":"C:/Users/oreak/IdeaProjects/project_team059/src/controller/IInsightFacade.ts","sources":["C:/Users/oreak/IdeaProjects/project_team059/src/controller/IInsightFacade.ts"],"names":[],"mappings":";;;AAMA,IAAY,kBAGX;AAHD,WAAY,kBAAkB;IAC7B,2CAAqB,CAAA;IACrB,qCAAe,CAAA;AAChB,CAAC,EAHW,kBAAkB,GAAlB,0BAAkB,KAAlB,0BAAkB,QAG7B;AAUD,MAAa,YAAa,SAAQ,KAAK;IACtC,YAAY,OAAgB;QAC3B,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;IAC7C,CAAC;CACD;AALD,oCAKC;AAED,MAAa,aAAc,SAAQ,KAAK;IACvC,YAAY,OAAgB;QAC3B,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;IAC9C,CAAC;CACD;AALD,sCAKC;AAED,MAAa,mBAAoB,SAAQ,KAAK;IAC7C,YAAY,OAAgB;QAC3B,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,mBAAmB,CAAC,CAAC;IACpD,CAAC;CACD;AALD,kDAKC","sourcesContent":["/*\n * This is the primary high-level API for the project. In this folder there should be:\n * A class called InsightFacade, this should be in a file called InsightFacade.ts.\n * You should not change this interface at all or the test suite will not work.\n */\n\nexport enum InsightDatasetKind {\n\tSections = \"sections\",\n\tRooms = \"rooms\",\n}\n\nexport interface InsightDataset {\n\tid: string;\n\tkind: InsightDatasetKind;\n\tnumRows: number;\n}\n\nexport type InsightResult = Record<string, string | number>;\n\nexport class InsightError extends Error {\n\tconstructor(message?: string) {\n\t\tsuper(message);\n\t\tError.captureStackTrace(this, InsightError);\n\t}\n}\n\nexport class NotFoundError extends Error {\n\tconstructor(message?: string) {\n\t\tsuper(message);\n\t\tError.captureStackTrace(this, NotFoundError);\n\t}\n}\n\nexport class ResultTooLargeError extends Error {\n\tconstructor(message?: string) {\n\t\tsuper(message);\n\t\tError.captureStackTrace(this, ResultTooLargeError);\n\t}\n}\n\nexport interface IInsightFacade {\n\t/**\n\t * Add a dataset to insightUBC.\n\t *\n\t * @param id  The id of the dataset being added. Follows the format /^[^_]+$/\n\t * @param content  The base64 content of the dataset. This content should be in the form of a serialized zip file.\n\t * @param kind  The kind of the dataset\n\t *\n\t * @return Promise <string[]>\n\t *\n\t * The promise should fulfill on a successful add, reject for any failures.\n\t * The promise should fulfill with a string array,\n\t * containing the ids of all currently added datasets upon a successful add.\n\t * The promise should reject with an InsightError describing the error.\n\t *\n\t * An id is invalid if it contains an underscore, or is only whitespace characters.\n\t * If id is the same as the id of an already added dataset, the dataset should be rejected and not saved.\n\t *\n\t * After receiving the dataset, it should be processed into a data structure of\n\t * your design. The processed data structure should be persisted to disk; your\n\t * system should be able to load this persisted value into memory for answering\n\t * queries.\n\t *\n\t * Ultimately, a dataset must be added or loaded from disk before queries can\n\t * be successfully answered.\n\t */\n\taddDataset(id: string, content: string, kind: InsightDatasetKind): Promise<string[]>;\n\n\t/**\n\t * Remove a dataset from insightUBC.\n\t *\n\t * @param id  The id of the dataset to remove. Follows the format /^[^_]+$/\n\t *\n\t * @return Promise <string>\n\t *\n\t * The promise should fulfill upon a successful removal, reject on any error.\n\t * Attempting to remove a dataset that hasn't been added yet counts as an error.\n\t *\n\t * An id is invalid if it contains an underscore, or is only whitespace characters.\n\t *\n\t * The promise should fulfill the id of the dataset that was removed.\n\t * The promise should reject with a NotFoundError (if a valid id was not yet added)\n\t * or an InsightError (invalid id or any other source of failure) describing the error.\n\t *\n\t * This will delete both disk and memory caches for the dataset for the id meaning\n\t * that subsequent queries for that id should fail unless a new addDataset happens first.\n\t */\n\tremoveDataset(id: string): Promise<string>;\n\n\t/**\n\t * Perform a query on insightUBC.\n\t *\n\t * @param query  The query to be performed.\n\t *\n\t * If a query is incorrectly formatted, references a dataset not added (in memory or on disk),\n\t * or references multiple datasets, it should be rejected.\n\t *\n\t * @return Promise <InsightResult[]>\n\t *\n\t * The promise should fulfill with an array of results.\n\t * The promise should reject with a ResultTooLargeError (if the query returns too many results)\n\t * or an InsightError (for any other source of failure) describing the error.\n\t */\n\tperformQuery(query: unknown): Promise<InsightResult[]>;\n\n\t/**\n\t * List all currently added datasets, their types, and number of rows.\n\t *\n\t * @return Promise <InsightDataset[]>\n\t * The promise should fulfill an array of currently added InsightDatasets, and will only fulfill.\n\t */\n\tlistDatasets(): Promise<InsightDataset[]>;\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"186ddd2fc7343cd12beec612c136f070d466131b","contentHash":"a045d6d31dd997dd4f77a7f25da641624640ff1720c7fdd25a55b002d5bb632c"},"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\InsightFacade.ts":{"path":"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\InsightFacade.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":25},"end":{"line":6,"column":52}},"4":{"start":{"line":7,"column":19},"end":{"line":7,"column":55}},"5":{"start":{"line":8,"column":33},"end":{"line":8,"column":85}},"6":{"start":{"line":9,"column":22},"end":{"line":9,"column":63}},"7":{"start":{"line":10,"column":28},"end":{"line":10,"column":84}},"8":{"start":{"line":11,"column":28},"end":{"line":11,"column":84}},"9":{"start":{"line":12,"column":25},"end":{"line":12,"column":75}},"10":{"start":{"line":13,"column":25},"end":{"line":13,"column":75}},"11":{"start":{"line":14,"column":28},"end":{"line":14,"column":84}},"12":{"start":{"line":26,"column":8},"end":{"line":26,"column":42}},"13":{"start":{"line":27,"column":8},"end":{"line":27,"column":39}},"14":{"start":{"line":28,"column":8},"end":{"line":28,"column":77}},"15":{"start":{"line":29,"column":8},"end":{"line":29,"column":87}},"16":{"start":{"line":30,"column":8},"end":{"line":30,"column":63}},"17":{"start":{"line":31,"column":8},"end":{"line":31,"column":63}},"18":{"start":{"line":32,"column":8},"end":{"line":32,"column":61}},"19":{"start":{"line":33,"column":8},"end":{"line":33,"column":61}},"20":{"start":{"line":34,"column":8},"end":{"line":34,"column":63}},"21":{"start":{"line":37,"column":8},"end":{"line":53,"column":9}},"22":{"start":{"line":38,"column":12},"end":{"line":38,"column":70}},"23":{"start":{"line":39,"column":12},"end":{"line":39,"column":117}},"24":{"start":{"line":40,"column":12},"end":{"line":46,"column":13}},"25":{"start":{"line":41,"column":16},"end":{"line":41,"column":95}},"26":{"start":{"line":44,"column":16},"end":{"line":44,"column":97}},"27":{"start":{"line":45,"column":16},"end":{"line":45,"column":60}},"28":{"start":{"line":49,"column":12},"end":{"line":51,"column":13}},"29":{"start":{"line":50,"column":16},"end":{"line":50,"column":26}},"30":{"start":{"line":52,"column":12},"end":{"line":52,"column":92}},"31":{"start":{"line":56,"column":8},"end":{"line":79,"column":9}},"32":{"start":{"line":57,"column":12},"end":{"line":57,"column":70}},"33":{"start":{"line":58,"column":32},"end":{"line":58,"column":46}},"34":{"start":{"line":59,"column":12},"end":{"line":61,"column":13}},"35":{"start":{"line":60,"column":16},"end":{"line":60,"column":93}},"36":{"start":{"line":62,"column":12},"end":{"line":67,"column":13}},"37":{"start":{"line":63,"column":16},"end":{"line":63,"column":49}},"38":{"start":{"line":66,"column":16},"end":{"line":66,"column":46}},"39":{"start":{"line":68,"column":12},"end":{"line":68,"column":60}},"40":{"start":{"line":69,"column":12},"end":{"line":69,"column":22}},"41":{"start":{"line":72,"column":12},"end":{"line":74,"column":13}},"42":{"start":{"line":73,"column":16},"end":{"line":73,"column":60}},"43":{"start":{"line":75,"column":12},"end":{"line":77,"column":13}},"44":{"start":{"line":76,"column":16},"end":{"line":76,"column":70}},"45":{"start":{"line":78,"column":12},"end":{"line":78,"column":99}},"46":{"start":{"line":82,"column":21},"end":{"line":82,"column":23}},"47":{"start":{"line":83,"column":8},"end":{"line":101,"column":9}},"48":{"start":{"line":84,"column":28},"end":{"line":84,"column":70}},"49":{"start":{"line":85,"column":30},"end":{"line":85,"column":97}},"50":{"start":{"line":86,"column":12},"end":{"line":91,"column":13}},"51":{"start":{"line":87,"column":29},"end":{"line":87,"column":47}},"52":{"start":{"line":88,"column":29},"end":{"line":88,"column":44}},"53":{"start":{"line":89,"column":16},"end":{"line":89,"column":113}},"54":{"start":{"line":90,"column":16},"end":{"line":90,"column":105}},"55":{"start":{"line":92,"column":12},"end":{"line":92,"column":91}},"56":{"start":{"line":95,"column":12},"end":{"line":100,"column":13}},"57":{"start":{"line":96,"column":16},"end":{"line":96,"column":26}},"58":{"start":{"line":99,"column":16},"end":{"line":99,"column":77}},"59":{"start":{"line":102,"column":8},"end":{"line":102,"column":22}},"60":{"start":{"line":105,"column":24},"end":{"line":105,"column":66}},"61":{"start":{"line":106,"column":8},"end":{"line":106,"column":66}},"62":{"start":{"line":109,"column":0},"end":{"line":109,"column":32}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":25,"column":4},"end":{"line":25,"column":5}},"loc":{"start":{"line":25,"column":18},"end":{"line":35,"column":5}},"line":25},"2":{"name":"(anonymous_2)","decl":{"start":{"line":36,"column":4},"end":{"line":36,"column":5}},"loc":{"start":{"line":36,"column":40},"end":{"line":54,"column":5}},"line":36},"3":{"name":"(anonymous_3)","decl":{"start":{"line":55,"column":4},"end":{"line":55,"column":5}},"loc":{"start":{"line":55,"column":28},"end":{"line":80,"column":5}},"line":55},"4":{"name":"(anonymous_4)","decl":{"start":{"line":81,"column":4},"end":{"line":81,"column":5}},"loc":{"start":{"line":81,"column":30},"end":{"line":103,"column":5}},"line":81},"5":{"name":"(anonymous_5)","decl":{"start":{"line":104,"column":4},"end":{"line":104,"column":5}},"loc":{"start":{"line":104,"column":25},"end":{"line":107,"column":5}},"line":104}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":40,"column":12},"end":{"line":46,"column":13}},"type":"if","locations":[{"start":{"line":40,"column":12},"end":{"line":46,"column":13}},{"start":{"line":40,"column":12},"end":{"line":46,"column":13}}],"line":40},"4":{"loc":{"start":{"line":49,"column":12},"end":{"line":51,"column":13}},"type":"if","locations":[{"start":{"line":49,"column":12},"end":{"line":51,"column":13}},{"start":{"line":49,"column":12},"end":{"line":51,"column":13}}],"line":49},"5":{"loc":{"start":{"line":59,"column":12},"end":{"line":61,"column":13}},"type":"if","locations":[{"start":{"line":59,"column":12},"end":{"line":61,"column":13}},{"start":{"line":59,"column":12},"end":{"line":61,"column":13}}],"line":59},"6":{"loc":{"start":{"line":62,"column":12},"end":{"line":67,"column":13}},"type":"if","locations":[{"start":{"line":62,"column":12},"end":{"line":67,"column":13}},{"start":{"line":62,"column":12},"end":{"line":67,"column":13}}],"line":62},"7":{"loc":{"start":{"line":72,"column":12},"end":{"line":74,"column":13}},"type":"if","locations":[{"start":{"line":72,"column":12},"end":{"line":74,"column":13}},{"start":{"line":72,"column":12},"end":{"line":74,"column":13}}],"line":72},"8":{"loc":{"start":{"line":75,"column":12},"end":{"line":77,"column":13}},"type":"if","locations":[{"start":{"line":75,"column":12},"end":{"line":77,"column":13}},{"start":{"line":75,"column":12},"end":{"line":77,"column":13}}],"line":75},"9":{"loc":{"start":{"line":86,"column":12},"end":{"line":91,"column":13}},"type":"if","locations":[{"start":{"line":86,"column":12},"end":{"line":91,"column":13}},{"start":{"line":86,"column":12},"end":{"line":91,"column":13}}],"line":86},"10":{"loc":{"start":{"line":95,"column":12},"end":{"line":100,"column":13}},"type":"if","locations":[{"start":{"line":95,"column":12},"end":{"line":100,"column":13}},{"start":{"line":95,"column":12},"end":{"line":100,"column":13}}],"line":95},"11":{"loc":{"start":{"line":95,"column":16},"end":{"line":95,"column":115}},"type":"binary-expr","locations":[{"start":{"line":95,"column":16},"end":{"line":95,"column":60}},{"start":{"line":95,"column":64},"end":{"line":95,"column":115}}],"line":95}},"s":{"0":1,"1":8,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":71,"13":71,"14":71,"15":71,"16":71,"17":71,"18":71,"19":71,"20":71,"21":84,"22":84,"23":75,"24":69,"25":41,"26":28,"27":22,"28":21,"29":19,"30":2,"31":21,"32":21,"33":18,"34":18,"35":6,"36":12,"37":5,"38":7,"39":12,"40":12,"41":9,"42":3,"43":6,"44":6,"45":0,"46":154,"47":154,"48":154,"49":154,"50":154,"51":0,"52":0,"53":0,"54":0,"55":154,"56":96,"57":96,"58":0,"59":58,"60":25,"61":25,"62":1},"f":{"0":8,"1":71,"2":84,"3":21,"4":154,"5":25},"b":{"0":[1,1,1],"1":[7,1],"2":[8,8],"3":[41,28],"4":[19,2],"5":[6,12],"6":[5,7],"7":[3,6],"8":[6,0],"9":[0,154],"10":[96,0],"11":[96,3]},"inputSourceMap":{"version":3,"file":"C:/Users/oreak/IdeaProjects/project_team059/src/controller/InsightFacade.ts","sources":["C:/Users/oreak/IdeaProjects/project_team059/src/controller/InsightFacade.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n\tIInsightFacade,\n\tInsightDataset,\n\tInsightDatasetKind,\n\tInsightError,\n\tInsightResult,\n\tNotFoundError,\n\tResultTooLargeError,\n} from \"./IInsightFacade\";\nimport fs from \"fs-extra\";\nimport DatasetValidatorHelper from \"./DatasetValidatorHelper\";\nimport QueryEngine from \"./QueryEngine\";\nimport SectionDiskReader from \"./sections/SectionDiskReader\";\nimport SectionDiskWriter from \"./sections/SectionDiskWriter\";\nimport Section from \"./sections/Section\";\nimport RoomDiskReader from \"./rooms/RoomDiskReader\";\nimport RoomDiskWriter from \"./rooms/RoomDiskWriter\";\nimport Room from \"./rooms/Room\";\nimport AddSectionDataset from \"./sections/addSectionDataset\";\n\n/**\n * This is the main programmatic entry point for the project.\n * Method documentation is in IInsightFacade\n *\n */\nexport default class InsightFacade implements IInsightFacade {\n\t// tracks all sections added from a dataset using their associated id as the key\n\tpublic sectionsDatabase: Map<string, Section[]>;\n\tpublic roomsDatabase: Map<string, Room[]>;\n\n\t// service classes\n\tprivate datasetValidatorHelper: DatasetValidatorHelper;\n\tprivate qe: QueryEngine;\n\tprivate secDiskReader: SectionDiskReader;\n\tprivate secDiskWriter: SectionDiskWriter;\n\tprivate roomDiskReader: RoomDiskReader;\n\tprivate roomDiskWriter: RoomDiskWriter;\n\tprivate sectionHelper: AddSectionDataset;\n\n\tconstructor() {\n\t\t//Log.info(\"InsightFacadeImpl::init()\");\n\t\tthis.sectionsDatabase = new Map<string, []>();\n\t\tthis.roomsDatabase = new Map<string, Room[]>();\n\t\tthis.datasetValidatorHelper = new DatasetValidatorHelper();\n\t\tthis.qe = new QueryEngine(this.sectionsDatabase, this.roomsDatabase);\n\t\tthis.secDiskReader = new SectionDiskReader();\n\t\tthis.secDiskWriter = new SectionDiskWriter();\n\t\tthis.roomDiskReader = new RoomDiskReader();\n\t\tthis.roomDiskWriter = new RoomDiskWriter();\n\n\t\tthis.sectionHelper = new AddSectionDataset();\n\t\t// initialize dictionary for the fields\n\t}\n\n\tpublic async addDataset(id: string, content: string, kind: InsightDatasetKind): Promise<string[]> {\n\t\ttry {\n\t\t\tawait this.datasetValidatorHelper.validateIdStructure(id);\n\t\t\tawait this.datasetValidatorHelper.validateSectionAddition(id, this.sectionsDatabase, this.roomsDatabase);\n\n\t\t\tif (kind === InsightDatasetKind.Sections) {\n\t\t\t\treturn this.sectionHelper.addCourses(id, this.sectionsDatabase, content, kind);\n\t\t\t} else {\n\t\t\t\tawait this.roomDiskWriter.logRoomsDatasetOnDisk(content, id, this.roomsDatabase);\n\t\t\t\treturn fs.readdir(\"./data\");\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tif (err instanceof InsightError) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\tthrow new InsightError(`An unexpected error occurred: ${err}`);\n\t\t}\n\t}\n\n\tpublic async removeDataset(id: string): Promise<string> {\n\t\ttry {\n\t\t\tawait this.datasetValidatorHelper.validateIdStructure(id);\n\t\t\tconst datasetPath = `./data/${id}`;\n\t\t\tif (!(await fs.pathExists(datasetPath))) {\n\t\t\t\tthrow new NotFoundError(`Dataset with id ${id} not found.`);\n\t\t\t}\n\n\t\t\tif (this.sectionsDatabase.get(id)) {\n\t\t\t\tthis.sectionsDatabase.delete(id);\n\t\t\t} else {\n\t\t\t\tthis.roomsDatabase.delete(id);\n\t\t\t}\n\n\t\t\tawait fs.remove(`./data/${id}`);\n\n\t\t\t// return id name of set currently removed\n\t\t\treturn id;\n\t\t} catch (err) {\n\t\t\tif (err instanceof InsightError) {\n\t\t\t\tthrow new InsightError(\"\");\n\t\t\t}\n\n\t\t\tif (err instanceof NotFoundError) {\n\t\t\t\tthrow new NotFoundError(\"Not found\");\n\t\t\t}\n\t\t\t// Handle unexpected errors\n\t\t\tthrow new InsightError(\"An unexpected error occurred ${err.message}\");\n\t\t}\n\t}\n\n\tpublic async performQuery(query: unknown): Promise<InsightResult[]> {\n\t\tlet result: InsightResult[] = [];\n\t\ttry {\n\t\t\tconst currIDs = await fs.readdir(\"./data\");\n\t\t\t//console.log(currIDs)\n\t\t\tconst idRecords = await this.datasetValidatorHelper.separateRoomAndCourseIDs(currIDs);\n\t\t\t//console.log(idRecords.rooms, idRecords.courses)\n\n\t\t\tif (this.sectionsDatabase.size + this.roomsDatabase.size < currIDs.length) {\n\t\t\t\tconst cIDs = idRecords.sections;\n\t\t\t\tconst rIDs = idRecords.rooms;\n\t\t\t\t//console.log(rIDs)\n\t\t\t\tthis.sectionsDatabase = await this.secDiskReader.mapMissingSections(cIDs, this.sectionsDatabase);\n\t\t\t\t//console.log((this.sectionsDatabase.keys))\n\t\t\t\tthis.roomsDatabase = await this.roomDiskReader.mapMissingRooms(rIDs, this.roomsDatabase);\n\t\t\t}\n\t\t\t//console.log(currIDs);\n\t\t\t// on query, passes updated sectionsDatabase and roomsDatabase\n\t\t\tresult = await this.qe.query(query, this.sectionsDatabase, this.roomsDatabase);\n\t\t} catch (err) {\n\t\t\tif (err instanceof InsightError || err instanceof ResultTooLargeError) {\n\t\t\t\tthrow err;\n\t\t\t} else {\n\t\t\t\tthrow new InsightError(\"Unexpected error.\");\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic async listDatasets(): Promise<InsightDataset[]> {\n\t\t// reads the list of dataset ids already on disk\n\n\t\tconst currIDs = await fs.readdir(\"./data\");\n\n\t\t// reads their content info on disk and parses into InsightDataset[](works for rooms as well)\n\t\treturn this.secDiskReader.logInsightKindFromDisk(currIDs);\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"e75b5a8e15c6d2316e7db083239c491e42de5e2b","contentHash":"da17f93b9d49abdb1d531b000fb2941993a0b0271805118a73a17a513ca0bd1e"},"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\DatasetValidatorHelper.ts":{"path":"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\DatasetValidatorHelper.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":25},"end":{"line":6,"column":52}},"4":{"start":{"line":7,"column":19},"end":{"line":7,"column":55}},"5":{"start":{"line":10,"column":8},"end":{"line":12,"column":9}},"6":{"start":{"line":11,"column":12},"end":{"line":11,"column":76}},"7":{"start":{"line":13,"column":28},"end":{"line":13,"column":37}},"8":{"start":{"line":14,"column":8},"end":{"line":16,"column":9}},"9":{"start":{"line":15,"column":12},"end":{"line":15,"column":66}},"10":{"start":{"line":19,"column":8},"end":{"line":21,"column":9}},"11":{"start":{"line":20,"column":12},"end":{"line":20,"column":93}},"12":{"start":{"line":24,"column":23},"end":{"line":24,"column":38}},"13":{"start":{"line":25,"column":27},"end":{"line":25,"column":29}},"14":{"start":{"line":26,"column":24},"end":{"line":26,"column":26}},"15":{"start":{"line":27,"column":24},"end":{"line":38,"column":11}},"16":{"start":{"line":28,"column":31},"end":{"line":28,"column":53}},"17":{"start":{"line":29,"column":12},"end":{"line":37,"column":15}},"18":{"start":{"line":31,"column":39},"end":{"line":34,"column":13}},"19":{"start":{"line":36,"column":16},"end":{"line":36,"column":26}},"20":{"start":{"line":39,"column":8},"end":{"line":46,"column":11}},"21":{"start":{"line":40,"column":12},"end":{"line":45,"column":13}},"22":{"start":{"line":41,"column":16},"end":{"line":41,"column":36}},"23":{"start":{"line":44,"column":16},"end":{"line":44,"column":33}},"24":{"start":{"line":47,"column":8},"end":{"line":47,"column":56}},"25":{"start":{"line":50,"column":0},"end":{"line":50,"column":41}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":9,"column":4},"end":{"line":9,"column":5}},"loc":{"start":{"line":9,"column":34},"end":{"line":17,"column":5}},"line":9},"2":{"name":"(anonymous_2)","decl":{"start":{"line":18,"column":4},"end":{"line":18,"column":5}},"loc":{"start":{"line":18,"column":71},"end":{"line":22,"column":5}},"line":18},"3":{"name":"(anonymous_3)","decl":{"start":{"line":23,"column":4},"end":{"line":23,"column":5}},"loc":{"start":{"line":23,"column":43},"end":{"line":48,"column":5}},"line":23},"4":{"name":"(anonymous_4)","decl":{"start":{"line":27,"column":65},"end":{"line":27,"column":66}},"loc":{"start":{"line":27,"column":79},"end":{"line":38,"column":9}},"line":27},"5":{"name":"(anonymous_5)","decl":{"start":{"line":31,"column":22},"end":{"line":31,"column":23}},"loc":{"start":{"line":31,"column":39},"end":{"line":34,"column":13}},"line":31},"6":{"name":"(anonymous_6)","decl":{"start":{"line":35,"column":23},"end":{"line":35,"column":24}},"loc":{"start":{"line":35,"column":32},"end":{"line":37,"column":13}},"line":35},"7":{"name":"(anonymous_7)","decl":{"start":{"line":39,"column":24},"end":{"line":39,"column":25}},"loc":{"start":{"line":39,"column":46},"end":{"line":46,"column":9}},"line":39}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":10,"column":8},"end":{"line":12,"column":9}},"type":"if","locations":[{"start":{"line":10,"column":8},"end":{"line":12,"column":9}},{"start":{"line":10,"column":8},"end":{"line":12,"column":9}}],"line":10},"4":{"loc":{"start":{"line":10,"column":12},"end":{"line":10,"column":54}},"type":"binary-expr","locations":[{"start":{"line":10,"column":12},"end":{"line":10,"column":28}},{"start":{"line":10,"column":32},"end":{"line":10,"column":54}}],"line":10},"5":{"loc":{"start":{"line":14,"column":8},"end":{"line":16,"column":9}},"type":"if","locations":[{"start":{"line":14,"column":8},"end":{"line":16,"column":9}},{"start":{"line":14,"column":8},"end":{"line":16,"column":9}}],"line":14},"6":{"loc":{"start":{"line":19,"column":8},"end":{"line":21,"column":9}},"type":"if","locations":[{"start":{"line":19,"column":8},"end":{"line":21,"column":9}},{"start":{"line":19,"column":8},"end":{"line":21,"column":9}}],"line":19},"7":{"loc":{"start":{"line":19,"column":12},"end":{"line":19,"column":118}},"type":"binary-expr","locations":[{"start":{"line":19,"column":12},"end":{"line":19,"column":36}},{"start":{"line":19,"column":40},"end":{"line":19,"column":61}},{"start":{"line":19,"column":66},"end":{"line":19,"column":117}}],"line":19},"8":{"loc":{"start":{"line":40,"column":12},"end":{"line":45,"column":13}},"type":"if","locations":[{"start":{"line":40,"column":12},"end":{"line":45,"column":13}},{"start":{"line":40,"column":12},"end":{"line":45,"column":13}}],"line":40}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":146,"6":12,"7":134,"8":134,"9":0,"10":75,"11":6,"12":154,"13":154,"14":154,"15":154,"16":308,"17":308,"18":308,"19":0,"20":154,"21":308,"22":154,"23":154,"24":154,"25":1},"f":{"0":1,"1":146,"2":75,"3":154,"4":308,"5":308,"6":0,"7":308},"b":{"0":[1,1,1],"1":[0,1],"2":[1,1],"3":[12,134],"4":[146,139],"5":[0,134],"6":[6,69],"7":[75,73,71],"8":[154,154]},"inputSourceMap":{"version":3,"file":"C:/Users/oreak/IdeaProjects/project_team059/src/controller/DatasetValidatorHelper.ts","sources":["C:/Users/oreak/IdeaProjects/project_team059/src/controller/DatasetValidatorHelper.ts"],"names":[],"mappings":";;;;;AAAA,qDAAgD;AAChD,wDAA0B;AAI1B,MAAqB,sBAAsB;IAInC,KAAK,CAAC,mBAAmB,CAAC,EAAU;QAG1C,IAAI,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,MAAM,KAAK,CAAC,EAAE;YAC/C,MAAM,IAAI,6BAAY,CAAC,sBAAsB,CAAC,CAAC;SAC/C;QAGD,MAAM,WAAW,GAAG,SAAS,CAAC;QAC9B,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE;YAC1B,MAAM,IAAI,6BAAY,CAAC,YAAY,CAAC,CAAC;SACrC;IACF,CAAC;IAEM,KAAK,CAAC,uBAAuB,CACnC,EAAU,EACV,gBAAwC,EACxC,aAAkC;QAElC,IAAI,gBAAgB,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,aAAa,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,kBAAE,CAAC,UAAU,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC,EAAE;YAC/F,MAAM,IAAI,6BAAY,CAAC,mBAAmB,EAAE,kBAAkB,CAAC,CAAC;SAChE;IACF,CAAC;IAEM,KAAK,CAAC,wBAAwB,CAAC,MAAgB;QACrD,MAAM,MAAM,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,CAAC;QAC/B,MAAM,UAAU,GAAa,EAAE,CAAC;QAChC,MAAM,OAAO,GAAa,EAAE,CAAC;QAE7B,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,GAAG,CAChC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,EAAE,EAAE;YACnC,MAAM,UAAU,GAAG,UAAU,EAAE,UAAU,CAAC;YAE1C,OAAO,kBAAE;iBACP,UAAU,CAAC,UAAU,CAAC;iBACtB,IAAI,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;gBACtB,EAAE;gBACF,QAAQ,EAAE,UAAU;aACpB,CAAC,CAAC;iBACF,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;gBACd,MAAM,GAAG,CAAC;YACX,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CACF,CAAC;QAEF,OAAO,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE;YACpC,IAAI,QAAQ,EAAE;gBACb,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;aACpB;iBAAM;gBACN,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;aACjB;QACF,CAAC,CAAC,CAAC;QAKH,OAAO,EAAE,QAAQ,EAAE,UAAU,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC;IACjD,CAAC;CACD;AA9DD,yCA8DC","sourcesContent":["import { InsightError } from \"./IInsightFacade\";\nimport fs from \"fs-extra\";\nimport Section from \"./sections/Section\";\nimport Room from \"./rooms/Room\";\n\nexport default class DatasetValidatorHelper {\n\t// checks if a dataset id is valid to be added\n\n\t// checks if a dataset id is valid to be removed\n\tpublic async validateIdStructure(id: string): Promise<void> {\n\t\t// Validate ID follows proper format\n\n\t\tif (id.includes(\"_\") || id.trim().length === 0) {\n\t\t\tthrow new InsightError(\"Invalid ID structure\");\n\t\t}\n\n\t\t// Validate content based on its kind\n\t\tconst base64Regex = /^[^_]+$/;\n\t\tif (!base64Regex.test(id)) {\n\t\t\tthrow new InsightError(\"Invalid id\");\n\t\t}\n\t}\n\n\tpublic async validateSectionAddition(\n\t\tid: string,\n\t\tsectionsDatabase: Map<string, Section[]>,\n\t\troomsDatabase: Map<string, Room[]>\n\t): Promise<void> {\n\t\tif (sectionsDatabase.has(id) || roomsDatabase.has(id) || (await fs.pathExists(`./data/${id}`))) {\n\t\t\tthrow new InsightError(`Dataset with id ${id} already exists.`);\n\t\t}\n\t}\n\n\tpublic async separateRoomAndCourseIDs(allIds: string[]): Promise<{ sections: string[]; rooms: string[] }> {\n\t\tconst setIds = new Set(allIds);\n\t\tconst sectionIDs: string[] = [];\n\t\tconst roomIDs: string[] = [];\n\n\t\tconst results = await Promise.all(\n\t\t\tArray.from(setIds).map(async (id) => {\n\t\t\t\tconst coursePath = `./data/${id}/courses`;\n\n\t\t\t\treturn fs\n\t\t\t\t\t.pathExists(coursePath)\n\t\t\t\t\t.then((pathExists) => ({\n\t\t\t\t\t\tid,\n\t\t\t\t\t\tisCourse: pathExists,\n\t\t\t\t\t}))\n\t\t\t\t\t.catch((err) => {\n\t\t\t\t\t\tthrow err;\n\t\t\t\t\t});\n\t\t\t})\n\t\t);\n\n\t\tresults.forEach(({ id, isCourse }) => {\n\t\t\tif (isCourse) {\n\t\t\t\tsectionIDs.push(id);\n\t\t\t} else {\n\t\t\t\troomIDs.push(id);\n\t\t\t}\n\t\t});\n\n\t\t// console.log('Final Course IDs:', courseIDs);\n\t\t// console.log('Final Room IDs:', roomIDs);\n\n\t\treturn { sections: sectionIDs, rooms: roomIDs };\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"ed842c0410711c8021341e908433589f1eb1bede","contentHash":"aad17cf4b9b4d65e67b006cdcf4659867c2518b60309f24ace979bf7f175d079"},"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\QueryEngine.ts":{"path":"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\QueryEngine.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":25},"end":{"line":6,"column":52}},"4":{"start":{"line":7,"column":28},"end":{"line":7,"column":58}},"5":{"start":{"line":8,"column":21},"end":{"line":8,"column":61}},"6":{"start":{"line":9,"column":28},"end":{"line":9,"column":75}},"7":{"start":{"line":10,"column":27},"end":{"line":10,"column":73}},"8":{"start":{"line":20,"column":14},"end":{"line":20,"column":16}},"9":{"start":{"line":21,"column":23},"end":{"line":21,"column":25}},"10":{"start":{"line":22,"column":20},"end":{"line":22,"column":22}},"11":{"start":{"line":23,"column":16},"end":{"line":23,"column":21}},"12":{"start":{"line":24,"column":10},"end":{"line":24,"column":14}},"13":{"start":{"line":25,"column":15},"end":{"line":25,"column":20}},"14":{"start":{"line":27,"column":8},"end":{"line":27,"column":49}},"15":{"start":{"line":28,"column":8},"end":{"line":28,"column":43}},"16":{"start":{"line":29,"column":8},"end":{"line":29,"column":48}},"17":{"start":{"line":30,"column":8},"end":{"line":30,"column":77}},"18":{"start":{"line":31,"column":8},"end":{"line":31,"column":108}},"19":{"start":{"line":32,"column":8},"end":{"line":32,"column":106}},"20":{"start":{"line":33,"column":8},"end":{"line":33,"column":32}},"21":{"start":{"line":34,"column":8},"end":{"line":34,"column":26}},"22":{"start":{"line":35,"column":8},"end":{"line":35,"column":26}},"23":{"start":{"line":38,"column":8},"end":{"line":38,"column":49}},"24":{"start":{"line":39,"column":8},"end":{"line":39,"column":43}},"25":{"start":{"line":40,"column":8},"end":{"line":40,"column":59}},"26":{"start":{"line":41,"column":8},"end":{"line":41,"column":56}},"27":{"start":{"line":42,"column":8},"end":{"line":42,"column":108}},"28":{"start":{"line":43,"column":8},"end":{"line":43,"column":106}},"29":{"start":{"line":44,"column":8},"end":{"line":44,"column":32}},"30":{"start":{"line":45,"column":8},"end":{"line":45,"column":35}},"31":{"start":{"line":46,"column":8},"end":{"line":46,"column":31}},"32":{"start":{"line":47,"column":8},"end":{"line":47,"column":24}},"33":{"start":{"line":48,"column":8},"end":{"line":48,"column":26}},"34":{"start":{"line":49,"column":8},"end":{"line":49,"column":30}},"35":{"start":{"line":50,"column":8},"end":{"line":50,"column":20}},"36":{"start":{"line":53,"column":8},"end":{"line":53,"column":38}},"37":{"start":{"line":54,"column":26},"end":{"line":54,"column":28}},"38":{"start":{"line":55,"column":33},"end":{"line":55,"column":35}},"39":{"start":{"line":56,"column":21},"end":{"line":56,"column":23}},"40":{"start":{"line":57,"column":25},"end":{"line":57,"column":38}},"41":{"start":{"line":58,"column":8},"end":{"line":88,"column":9}},"42":{"start":{"line":59,"column":30},"end":{"line":59,"column":51}},"43":{"start":{"line":60,"column":32},"end":{"line":60,"column":99}},"44":{"start":{"line":60,"column":58},"end":{"line":60,"column":98}},"45":{"start":{"line":61,"column":12},"end":{"line":63,"column":13}},"46":{"start":{"line":62,"column":16},"end":{"line":62,"column":80}},"47":{"start":{"line":64,"column":12},"end":{"line":69,"column":13}},"48":{"start":{"line":65,"column":16},"end":{"line":65,"column":69}},"49":{"start":{"line":68,"column":16},"end":{"line":68,"column":79}},"50":{"start":{"line":70,"column":12},"end":{"line":75,"column":13}},"51":{"start":{"line":71,"column":16},"end":{"line":71,"column":109}},"52":{"start":{"line":74,"column":16},"end":{"line":74,"column":49}},"53":{"start":{"line":76,"column":12},"end":{"line":81,"column":13}},"54":{"start":{"line":77,"column":16},"end":{"line":77,"column":88}},"55":{"start":{"line":80,"column":16},"end":{"line":80,"column":81}},"56":{"start":{"line":84,"column":12},"end":{"line":86,"column":13}},"57":{"start":{"line":85,"column":16},"end":{"line":85,"column":26}},"58":{"start":{"line":87,"column":12},"end":{"line":87,"column":73}},"59":{"start":{"line":89,"column":8},"end":{"line":89,"column":22}},"60":{"start":{"line":92,"column":26},"end":{"line":92,"column":28}},"61":{"start":{"line":93,"column":8},"end":{"line":93,"column":30}},"62":{"start":{"line":94,"column":8},"end":{"line":115,"column":9}},"63":{"start":{"line":95,"column":12},"end":{"line":108,"column":13}},"64":{"start":{"line":96,"column":16},"end":{"line":96,"column":37}},"65":{"start":{"line":97,"column":16},"end":{"line":97,"column":35}},"66":{"start":{"line":99,"column":17},"end":{"line":108,"column":13}},"67":{"start":{"line":100,"column":16},"end":{"line":100,"column":88}},"68":{"start":{"line":103,"column":31},"end":{"line":103,"column":52}},"69":{"start":{"line":104,"column":31},"end":{"line":104,"column":54}},"70":{"start":{"line":105,"column":16},"end":{"line":105,"column":88}},"71":{"start":{"line":106,"column":16},"end":{"line":106,"column":80}},"72":{"start":{"line":107,"column":16},"end":{"line":107,"column":74}},"73":{"start":{"line":111,"column":12},"end":{"line":113,"column":13}},"74":{"start":{"line":112,"column":16},"end":{"line":112,"column":26}},"75":{"start":{"line":114,"column":12},"end":{"line":114,"column":82}},"76":{"start":{"line":116,"column":8},"end":{"line":116,"column":27}},"77":{"start":{"line":119,"column":33},"end":{"line":119,"column":35}},"78":{"start":{"line":121,"column":8},"end":{"line":121,"column":30}},"79":{"start":{"line":122,"column":8},"end":{"line":147,"column":9}},"80":{"start":{"line":123,"column":39},"end":{"line":123,"column":67}},"81":{"start":{"line":124,"column":32},"end":{"line":124,"column":117}},"82":{"start":{"line":124,"column":67},"end":{"line":124,"column":116}},"83":{"start":{"line":125,"column":12},"end":{"line":127,"column":13}},"84":{"start":{"line":126,"column":16},"end":{"line":126,"column":91}},"85":{"start":{"line":128,"column":12},"end":{"line":133,"column":13}},"86":{"start":{"line":129,"column":16},"end":{"line":129,"column":169}},"87":{"start":{"line":132,"column":16},"end":{"line":132,"column":93}},"88":{"start":{"line":134,"column":12},"end":{"line":140,"column":13}},"89":{"start":{"line":135,"column":16},"end":{"line":135,"column":116}},"90":{"start":{"line":136,"column":16},"end":{"line":136,"column":33}},"91":{"start":{"line":139,"column":16},"end":{"line":139,"column":93}},"92":{"start":{"line":143,"column":12},"end":{"line":145,"column":13}},"93":{"start":{"line":144,"column":16},"end":{"line":144,"column":26}},"94":{"start":{"line":146,"column":12},"end":{"line":146,"column":92}},"95":{"start":{"line":148,"column":8},"end":{"line":148,"column":34}},"96":{"start":{"line":151,"column":8},"end":{"line":151,"column":71}},"97":{"start":{"line":152,"column":8},"end":{"line":152,"column":65}},"98":{"start":{"line":153,"column":8},"end":{"line":153,"column":95}},"99":{"start":{"line":154,"column":8},"end":{"line":154,"column":20}},"100":{"start":{"line":157,"column":22},"end":{"line":157,"column":24}},"101":{"start":{"line":158,"column":22},"end":{"line":158,"column":24}},"102":{"start":{"line":159,"column":24},"end":{"line":159,"column":26}},"103":{"start":{"line":160,"column":8},"end":{"line":183,"column":9}},"104":{"start":{"line":161,"column":32},"end":{"line":161,"column":52}},"105":{"start":{"line":162,"column":32},"end":{"line":162,"column":99}},"106":{"start":{"line":162,"column":60},"end":{"line":162,"column":98}},"107":{"start":{"line":163,"column":12},"end":{"line":165,"column":13}},"108":{"start":{"line":164,"column":16},"end":{"line":164,"column":83}},"109":{"start":{"line":166,"column":12},"end":{"line":171,"column":13}},"110":{"start":{"line":167,"column":16},"end":{"line":167,"column":62}},"111":{"start":{"line":170,"column":16},"end":{"line":170,"column":81}},"112":{"start":{"line":172,"column":12},"end":{"line":175,"column":13}},"113":{"start":{"line":173,"column":16},"end":{"line":173,"column":93}},"114":{"start":{"line":174,"column":16},"end":{"line":174,"column":59}},"115":{"start":{"line":176,"column":12},"end":{"line":176,"column":87}},"116":{"start":{"line":179,"column":12},"end":{"line":181,"column":13}},"117":{"start":{"line":180,"column":16},"end":{"line":180,"column":26}},"118":{"start":{"line":182,"column":12},"end":{"line":182,"column":84}},"119":{"start":{"line":184,"column":8},"end":{"line":184,"column":23}},"120":{"start":{"line":187,"column":22},"end":{"line":187,"column":24}},"121":{"start":{"line":188,"column":22},"end":{"line":188,"column":24}},"122":{"start":{"line":189,"column":8},"end":{"line":205,"column":9}},"123":{"start":{"line":190,"column":12},"end":{"line":198,"column":13}},"124":{"start":{"line":191,"column":16},"end":{"line":191,"column":75}},"125":{"start":{"line":193,"column":17},"end":{"line":198,"column":13}},"126":{"start":{"line":194,"column":16},"end":{"line":194,"column":72}},"127":{"start":{"line":197,"column":16},"end":{"line":197,"column":85}},"128":{"start":{"line":199,"column":12},"end":{"line":204,"column":13}},"129":{"start":{"line":200,"column":16},"end":{"line":200,"column":87}},"130":{"start":{"line":203,"column":16},"end":{"line":203,"column":45}},"131":{"start":{"line":206,"column":8},"end":{"line":206,"column":49}},"132":{"start":{"line":207,"column":8},"end":{"line":207,"column":94}},"133":{"start":{"line":208,"column":8},"end":{"line":208,"column":77}},"134":{"start":{"line":209,"column":8},"end":{"line":209,"column":23}},"135":{"start":{"line":212,"column":24},"end":{"line":212,"column":55}},"136":{"start":{"line":213,"column":24},"end":{"line":213,"column":26}},"137":{"start":{"line":214,"column":8},"end":{"line":231,"column":9}},"138":{"start":{"line":215,"column":27},"end":{"line":215,"column":38}},"139":{"start":{"line":216,"column":26},"end":{"line":216,"column":46}},"140":{"start":{"line":217,"column":29},"end":{"line":217,"column":49}},"141":{"start":{"line":218,"column":12},"end":{"line":230,"column":13}},"142":{"start":{"line":219,"column":16},"end":{"line":219,"column":37}},"143":{"start":{"line":222,"column":16},"end":{"line":222,"column":143}},"144":{"start":{"line":223,"column":16},"end":{"line":223,"column":49}},"145":{"start":{"line":224,"column":16},"end":{"line":229,"column":17}},"146":{"start":{"line":225,"column":20},"end":{"line":225,"column":41}},"147":{"start":{"line":228,"column":20},"end":{"line":228,"column":96}},"148":{"start":{"line":232,"column":8},"end":{"line":232,"column":23}},"149":{"start":{"line":235,"column":8},"end":{"line":245,"column":9}},"150":{"start":{"line":236,"column":12},"end":{"line":241,"column":13}},"151":{"start":{"line":237,"column":16},"end":{"line":237,"column":28}},"152":{"start":{"line":240,"column":16},"end":{"line":240,"column":133}},"153":{"start":{"line":244,"column":12},"end":{"line":244,"column":25}},"154":{"start":{"line":248,"column":8},"end":{"line":260,"column":9}},"155":{"start":{"line":249,"column":12},"end":{"line":251,"column":13}},"156":{"start":{"line":250,"column":16},"end":{"line":250,"column":28}},"157":{"start":{"line":253,"column":13},"end":{"line":260,"column":9}},"158":{"start":{"line":254,"column":12},"end":{"line":256,"column":13}},"159":{"start":{"line":255,"column":16},"end":{"line":255,"column":28}},"160":{"start":{"line":259,"column":12},"end":{"line":259,"column":81}},"161":{"start":{"line":261,"column":8},"end":{"line":261,"column":21}},"162":{"start":{"line":264,"column":0},"end":{"line":264,"column":30}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":26,"column":4},"end":{"line":26,"column":5}},"loc":{"start":{"line":26,"column":49},"end":{"line":36,"column":5}},"line":26},"2":{"name":"(anonymous_2)","decl":{"start":{"line":37,"column":4},"end":{"line":37,"column":5}},"loc":{"start":{"line":37,"column":54},"end":{"line":51,"column":5}},"line":37},"3":{"name":"(anonymous_3)","decl":{"start":{"line":52,"column":4},"end":{"line":52,"column":5}},"loc":{"start":{"line":52,"column":31},"end":{"line":90,"column":5}},"line":52},"4":{"name":"(anonymous_4)","decl":{"start":{"line":60,"column":49},"end":{"line":60,"column":50}},"loc":{"start":{"line":60,"column":58},"end":{"line":60,"column":98}},"line":60},"5":{"name":"(anonymous_5)","decl":{"start":{"line":91,"column":4},"end":{"line":91,"column":5}},"loc":{"start":{"line":91,"column":29},"end":{"line":117,"column":5}},"line":91},"6":{"name":"(anonymous_6)","decl":{"start":{"line":118,"column":4},"end":{"line":118,"column":5}},"loc":{"start":{"line":118,"column":62},"end":{"line":149,"column":5}},"line":118},"7":{"name":"(anonymous_7)","decl":{"start":{"line":124,"column":58},"end":{"line":124,"column":59}},"loc":{"start":{"line":124,"column":67},"end":{"line":124,"column":116}},"line":124},"8":{"name":"(anonymous_8)","decl":{"start":{"line":150,"column":4},"end":{"line":150,"column":5}},"loc":{"start":{"line":150,"column":16},"end":{"line":155,"column":5}},"line":150},"9":{"name":"(anonymous_9)","decl":{"start":{"line":156,"column":4},"end":{"line":156,"column":5}},"loc":{"start":{"line":156,"column":53},"end":{"line":185,"column":5}},"line":156},"10":{"name":"(anonymous_10)","decl":{"start":{"line":162,"column":51},"end":{"line":162,"column":52}},"loc":{"start":{"line":162,"column":60},"end":{"line":162,"column":98}},"line":162},"11":{"name":"(anonymous_11)","decl":{"start":{"line":186,"column":4},"end":{"line":186,"column":5}},"loc":{"start":{"line":186,"column":64},"end":{"line":210,"column":5}},"line":186},"12":{"name":"(anonymous_12)","decl":{"start":{"line":211,"column":4},"end":{"line":211,"column":5}},"loc":{"start":{"line":211,"column":25},"end":{"line":233,"column":5}},"line":211},"13":{"name":"(anonymous_13)","decl":{"start":{"line":234,"column":4},"end":{"line":234,"column":5}},"loc":{"start":{"line":234,"column":38},"end":{"line":246,"column":5}},"line":234},"14":{"name":"(anonymous_14)","decl":{"start":{"line":247,"column":4},"end":{"line":247,"column":5}},"loc":{"start":{"line":247,"column":28},"end":{"line":262,"column":5}},"line":247}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":61,"column":12},"end":{"line":63,"column":13}},"type":"if","locations":[{"start":{"line":61,"column":12},"end":{"line":63,"column":13}},{"start":{"line":61,"column":12},"end":{"line":63,"column":13}}],"line":61},"4":{"loc":{"start":{"line":64,"column":12},"end":{"line":69,"column":13}},"type":"if","locations":[{"start":{"line":64,"column":12},"end":{"line":69,"column":13}},{"start":{"line":64,"column":12},"end":{"line":69,"column":13}}],"line":64},"5":{"loc":{"start":{"line":70,"column":12},"end":{"line":75,"column":13}},"type":"if","locations":[{"start":{"line":70,"column":12},"end":{"line":75,"column":13}},{"start":{"line":70,"column":12},"end":{"line":75,"column":13}}],"line":70},"6":{"loc":{"start":{"line":76,"column":12},"end":{"line":81,"column":13}},"type":"if","locations":[{"start":{"line":76,"column":12},"end":{"line":81,"column":13}},{"start":{"line":76,"column":12},"end":{"line":81,"column":13}}],"line":76},"7":{"loc":{"start":{"line":84,"column":12},"end":{"line":86,"column":13}},"type":"if","locations":[{"start":{"line":84,"column":12},"end":{"line":86,"column":13}},{"start":{"line":84,"column":12},"end":{"line":86,"column":13}}],"line":84},"8":{"loc":{"start":{"line":84,"column":16},"end":{"line":84,"column":115}},"type":"binary-expr","locations":[{"start":{"line":84,"column":16},"end":{"line":84,"column":60}},{"start":{"line":84,"column":64},"end":{"line":84,"column":115}}],"line":84},"9":{"loc":{"start":{"line":95,"column":12},"end":{"line":108,"column":13}},"type":"if","locations":[{"start":{"line":95,"column":12},"end":{"line":108,"column":13}},{"start":{"line":95,"column":12},"end":{"line":108,"column":13}}],"line":95},"10":{"loc":{"start":{"line":99,"column":17},"end":{"line":108,"column":13}},"type":"if","locations":[{"start":{"line":99,"column":17},"end":{"line":108,"column":13}},{"start":{"line":99,"column":17},"end":{"line":108,"column":13}}],"line":99},"11":{"loc":{"start":{"line":111,"column":12},"end":{"line":113,"column":13}},"type":"if","locations":[{"start":{"line":111,"column":12},"end":{"line":113,"column":13}},{"start":{"line":111,"column":12},"end":{"line":113,"column":13}}],"line":111},"12":{"loc":{"start":{"line":111,"column":16},"end":{"line":111,"column":115}},"type":"binary-expr","locations":[{"start":{"line":111,"column":16},"end":{"line":111,"column":60}},{"start":{"line":111,"column":64},"end":{"line":111,"column":115}}],"line":111},"13":{"loc":{"start":{"line":125,"column":12},"end":{"line":127,"column":13}},"type":"if","locations":[{"start":{"line":125,"column":12},"end":{"line":127,"column":13}},{"start":{"line":125,"column":12},"end":{"line":127,"column":13}}],"line":125},"14":{"loc":{"start":{"line":128,"column":12},"end":{"line":133,"column":13}},"type":"if","locations":[{"start":{"line":128,"column":12},"end":{"line":133,"column":13}},{"start":{"line":128,"column":12},"end":{"line":133,"column":13}}],"line":128},"15":{"loc":{"start":{"line":134,"column":12},"end":{"line":140,"column":13}},"type":"if","locations":[{"start":{"line":134,"column":12},"end":{"line":140,"column":13}},{"start":{"line":134,"column":12},"end":{"line":140,"column":13}}],"line":134},"16":{"loc":{"start":{"line":143,"column":12},"end":{"line":145,"column":13}},"type":"if","locations":[{"start":{"line":143,"column":12},"end":{"line":145,"column":13}},{"start":{"line":143,"column":12},"end":{"line":145,"column":13}}],"line":143},"17":{"loc":{"start":{"line":143,"column":16},"end":{"line":143,"column":115}},"type":"binary-expr","locations":[{"start":{"line":143,"column":16},"end":{"line":143,"column":60}},{"start":{"line":143,"column":64},"end":{"line":143,"column":115}}],"line":143},"18":{"loc":{"start":{"line":163,"column":12},"end":{"line":165,"column":13}},"type":"if","locations":[{"start":{"line":163,"column":12},"end":{"line":165,"column":13}},{"start":{"line":163,"column":12},"end":{"line":165,"column":13}}],"line":163},"19":{"loc":{"start":{"line":166,"column":12},"end":{"line":171,"column":13}},"type":"if","locations":[{"start":{"line":166,"column":12},"end":{"line":171,"column":13}},{"start":{"line":166,"column":12},"end":{"line":171,"column":13}}],"line":166},"20":{"loc":{"start":{"line":172,"column":12},"end":{"line":175,"column":13}},"type":"if","locations":[{"start":{"line":172,"column":12},"end":{"line":175,"column":13}},{"start":{"line":172,"column":12},"end":{"line":175,"column":13}}],"line":172},"21":{"loc":{"start":{"line":179,"column":12},"end":{"line":181,"column":13}},"type":"if","locations":[{"start":{"line":179,"column":12},"end":{"line":181,"column":13}},{"start":{"line":179,"column":12},"end":{"line":181,"column":13}}],"line":179},"22":{"loc":{"start":{"line":179,"column":16},"end":{"line":179,"column":115}},"type":"binary-expr","locations":[{"start":{"line":179,"column":16},"end":{"line":179,"column":60}},{"start":{"line":179,"column":64},"end":{"line":179,"column":115}}],"line":179},"23":{"loc":{"start":{"line":189,"column":8},"end":{"line":205,"column":9}},"type":"if","locations":[{"start":{"line":189,"column":8},"end":{"line":205,"column":9}},{"start":{"line":189,"column":8},"end":{"line":205,"column":9}}],"line":189},"24":{"loc":{"start":{"line":189,"column":12},"end":{"line":189,"column":44}},"type":"binary-expr","locations":[{"start":{"line":189,"column":12},"end":{"line":189,"column":25}},{"start":{"line":189,"column":29},"end":{"line":189,"column":44}}],"line":189},"25":{"loc":{"start":{"line":190,"column":12},"end":{"line":198,"column":13}},"type":"if","locations":[{"start":{"line":190,"column":12},"end":{"line":198,"column":13}},{"start":{"line":190,"column":12},"end":{"line":198,"column":13}}],"line":190},"26":{"loc":{"start":{"line":193,"column":17},"end":{"line":198,"column":13}},"type":"if","locations":[{"start":{"line":193,"column":17},"end":{"line":198,"column":13}},{"start":{"line":193,"column":17},"end":{"line":198,"column":13}}],"line":193},"27":{"loc":{"start":{"line":199,"column":12},"end":{"line":204,"column":13}},"type":"if","locations":[{"start":{"line":199,"column":12},"end":{"line":204,"column":13}},{"start":{"line":199,"column":12},"end":{"line":204,"column":13}}],"line":199},"28":{"loc":{"start":{"line":218,"column":12},"end":{"line":230,"column":13}},"type":"if","locations":[{"start":{"line":218,"column":12},"end":{"line":230,"column":13}},{"start":{"line":218,"column":12},"end":{"line":230,"column":13}}],"line":218},"29":{"loc":{"start":{"line":224,"column":16},"end":{"line":229,"column":17}},"type":"if","locations":[{"start":{"line":224,"column":16},"end":{"line":229,"column":17}},{"start":{"line":224,"column":16},"end":{"line":229,"column":17}}],"line":224},"30":{"loc":{"start":{"line":235,"column":8},"end":{"line":245,"column":9}},"type":"if","locations":[{"start":{"line":235,"column":8},"end":{"line":245,"column":9}},{"start":{"line":235,"column":8},"end":{"line":245,"column":9}}],"line":235},"31":{"loc":{"start":{"line":236,"column":12},"end":{"line":241,"column":13}},"type":"if","locations":[{"start":{"line":236,"column":12},"end":{"line":241,"column":13}},{"start":{"line":236,"column":12},"end":{"line":241,"column":13}}],"line":236},"32":{"loc":{"start":{"line":248,"column":8},"end":{"line":260,"column":9}},"type":"if","locations":[{"start":{"line":248,"column":8},"end":{"line":260,"column":9}},{"start":{"line":248,"column":8},"end":{"line":260,"column":9}}],"line":248},"33":{"loc":{"start":{"line":249,"column":12},"end":{"line":251,"column":13}},"type":"if","locations":[{"start":{"line":249,"column":12},"end":{"line":251,"column":13}},{"start":{"line":249,"column":12},"end":{"line":251,"column":13}}],"line":249},"34":{"loc":{"start":{"line":249,"column":16},"end":{"line":249,"column":102}},"type":"binary-expr","locations":[{"start":{"line":249,"column":16},"end":{"line":249,"column":57}},{"start":{"line":249,"column":61},"end":{"line":249,"column":102}}],"line":249},"35":{"loc":{"start":{"line":253,"column":13},"end":{"line":260,"column":9}},"type":"if","locations":[{"start":{"line":253,"column":13},"end":{"line":260,"column":9}},{"start":{"line":253,"column":13},"end":{"line":260,"column":9}}],"line":253},"36":{"loc":{"start":{"line":254,"column":12},"end":{"line":256,"column":13}},"type":"if","locations":[{"start":{"line":254,"column":12},"end":{"line":256,"column":13}},{"start":{"line":254,"column":12},"end":{"line":256,"column":13}}],"line":254},"37":{"loc":{"start":{"line":254,"column":16},"end":{"line":254,"column":96}},"type":"binary-expr","locations":[{"start":{"line":254,"column":16},"end":{"line":254,"column":54}},{"start":{"line":254,"column":58},"end":{"line":254,"column":96}}],"line":254}},"s":{"0":1,"1":3,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":71,"9":71,"10":71,"11":71,"12":71,"13":71,"14":71,"15":71,"16":71,"17":71,"18":71,"19":71,"20":71,"21":71,"22":71,"23":154,"24":154,"25":154,"26":154,"27":154,"28":154,"29":154,"30":154,"31":154,"32":154,"33":154,"34":154,"35":154,"36":154,"37":154,"38":154,"39":154,"40":154,"41":154,"42":154,"43":154,"44":347,"45":154,"46":4,"47":150,"48":147,"49":3,"50":107,"51":45,"52":62,"53":84,"54":83,"55":1,"56":96,"57":96,"58":0,"59":58,"60":147,"61":147,"62":147,"63":147,"64":13,"65":13,"66":134,"67":2,"68":132,"69":132,"70":132,"71":94,"72":94,"73":40,"74":40,"75":0,"76":94,"77":45,"78":45,"79":45,"80":45,"81":45,"82":94,"83":45,"84":5,"85":40,"86":40,"87":0,"88":34,"89":34,"90":22,"91":0,"92":23,"93":23,"94":0,"95":22,"96":22,"97":22,"98":22,"99":22,"100":83,"101":83,"102":83,"103":83,"104":83,"105":83,"106":149,"107":83,"108":4,"109":79,"110":79,"111":0,"112":74,"113":61,"114":48,"115":61,"116":25,"117":25,"118":0,"119":58,"120":61,"121":61,"122":61,"123":3,"124":1,"125":2,"126":2,"127":0,"128":3,"129":0,"130":3,"131":61,"132":58,"133":58,"134":58,"135":79,"136":79,"137":79,"138":212,"139":212,"140":212,"141":212,"142":36,"143":173,"144":171,"145":171,"146":171,"147":0,"148":74,"149":212,"150":39,"151":36,"152":3,"153":173,"154":171,"155":136,"156":136,"157":35,"158":35,"159":35,"160":0,"161":0,"162":1},"f":{"0":3,"1":71,"2":154,"3":154,"4":347,"5":147,"6":45,"7":94,"8":22,"9":83,"10":149,"11":61,"12":79,"13":212,"14":171},"b":{"0":[1,1,1],"1":[3,0],"2":[3,3],"3":[4,150],"4":[147,3],"5":[45,62],"6":[83,1],"7":[96,0],"8":[96,3],"9":[13,134],"10":[2,132],"11":[40,0],"12":[40,0],"13":[5,40],"14":[40,0],"15":[34,0],"16":[23,0],"17":[23,0],"18":[4,79],"19":[79,0],"20":[61,13],"21":[25,0],"22":[25,3],"23":[3,58],"24":[61,4],"25":[1,2],"26":[2,0],"27":[0,3],"28":[36,173],"29":[171,0],"30":[39,173],"31":[36,3],"32":[136,35],"33":[136,0],"34":[136,79],"35":[35,0],"36":[35,0],"37":[35,22]},"inputSourceMap":{"version":3,"file":"C:/Users/oreak/IdeaProjects/project_team059/src/controller/QueryEngine.ts","sources":["C:/Users/oreak/IdeaProjects/project_team059/src/controller/QueryEngine.ts"],"names":[],"mappings":"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","sourcesContent":["import { InsightError, InsightResult, ResultTooLargeError } from \"./IInsightFacade\";\nimport { QueryOrderHandler } from \"./QueryOrderHandler\";\nimport QueryUtils from \"./QueryUtils\";\nimport QueryEngineFilter from \"./QueryEngineFilter\";\nimport Section from \"./sections/Section\";\nimport Room from \"./rooms/Room\";\n//import DatasetValidatorHelper from \"./DatasetValidatorHelper\";\nimport QueryAggregation from \"./QueryAggregation\";\n\nexport default class QueryEngine {\n\tprivate sectionsDatabase: Map<string, Section[]>;\n\tprivate roomsDatabase: Map<string, Room[]>;\n\tprivate utils: QueryUtils;\n\tprivate QueryOrderHandler: QueryOrderHandler;\n\tprivate QueryEngineFilter: QueryEngineFilter;\n\tprivate QueryAggregation: QueryAggregation;\n\tprivate sDSList: string[];\n\tprivate rDSList: string[];\n\tprivate newCols: string[] = [];\n\tprivate queryingIDString = \"\";\n\tprivate sectionOrRoom = \"\";\n\tprivate isGrouped = false;\n\tprivate dir = \"UP\";\n\tprivate noFilter = false;\n\t//private datasetValidator: DatasetValidatorHelper;\n\n\tconstructor(sectionsDatabase: Map<string, Section[]>, roomsDatabase: Map<string, Room[]>) {\n\t\tthis.sectionsDatabase = sectionsDatabase;\n\t\tthis.roomsDatabase = roomsDatabase;\n\t\tthis.utils = new QueryUtils();\n\t\tthis.QueryOrderHandler = new QueryOrderHandler();\n\t\tthis.QueryEngineFilter = new QueryEngineFilter(this.sectionsDatabase, this.roomsDatabase);\n\t\tthis.QueryAggregation = new QueryAggregation(this.sectionsDatabase, this.roomsDatabase);\n\t\tthis.sectionOrRoom = \"\";\n\t\t//this.datasetValidator = new DatasetValidatorHelper();\n\t\tthis.sDSList = [];\n\t\tthis.rDSList = [];\n\t\t//console.log(this.rDSList);\n\t}\n\n\tprivate async querySetup(\n\t\tsectionsDatabase: Map<string, Section[]>,\n\t\troomsDatabase: Map<string, Room[]>\n\t): Promise<boolean> {\n\t\t/*\n\t\tconst idRecords = await this.datasetValidator.separateRoomAndCourseIDs(currIDs);\n\t\tthis.rDSList = idRecords.rooms;\n\t\tthis.sDSList = idRecords.sections;\n\t\t*/\n\t\tthis.sectionsDatabase = sectionsDatabase;\n\t\tthis.roomsDatabase = roomsDatabase;\n\t\tthis.sDSList = Array.from(sectionsDatabase.keys());\n\t\tthis.rDSList = Array.from(roomsDatabase.keys());\n\t\tthis.QueryEngineFilter = new QueryEngineFilter(this.sectionsDatabase, this.roomsDatabase);\n\t\tthis.QueryAggregation = new QueryAggregation(this.sectionsDatabase, this.roomsDatabase);\n\t\tthis.sectionOrRoom = \"\";\n\t\tthis.queryingIDString = \"\"; // restart on every query;\n\t\tthis.isGrouped = false;\n\t\tthis.dir = \"UP\";\n\t\tthis.newCols = [];\n\t\tthis.noFilter = false;\n\t\treturn true;\n\t}\n\n\tpublic async query(query: unknown, sD: Map<string, Section[]>, rD: Map<string, Room[]>): Promise<InsightResult[]> {\n\t\t//console.log(\"QUERY method\");\n\t\t//console.log(this.roomsDatabase.size);\n\t\tawait this.querySetup(sD, rD);\n\t\t//console.log(this.rDSList);\n\t\tlet filteredSOR: Object[] = [];\n\t\tlet transformedResults: Object[] = [];\n\t\tlet result: InsightResult[] = [];\n\t\tconst queryObj = Object(query);\n\t\t//console.log(queryObj)\n\t\ttry {\n\t\t\tconst queryKeys = Object.keys(queryObj);\n\t\t\t//console.log(queryKeys)\n\t\t\tconst invalidKeys = queryKeys.filter((key) => !this.utils.validQueryKeys.includes(key));\n\t\t\tif (invalidKeys.length > 0) {\n\t\t\t\tthrow new InsightError(\"Excess keys in query\");\n\t\t\t}\n\t\t\t// If WHERE key exists, filter all the sections, else throw InsightError\n\t\t\tif (\"WHERE\" in queryObj) {\n\t\t\t\tfilteredSOR = await this.handleWHERE(queryObj.WHERE);\n\t\t\t\t//console.log(filteredSOR)\n\t\t\t} else {\n\t\t\t\tthrow new InsightError(\"Query missing WHERE\");\n\t\t\t}\n\t\t\t//console.log(filteredSOR);\n\n\t\t\t// If TRANSFORMATIONS key exists, complete transformation on filtered sections\n\t\t\tif (\"TRANSFORMATIONS\" in queryObj) {\n\t\t\t\ttransformedResults = await this.handleTRANSFORMATIONS(queryObj.TRANSFORMATIONS, filteredSOR);\n\t\t\t\t//this.isGrouped = true;\n\t\t\t} else {\n\t\t\t\ttransformedResults = filteredSOR;\n\t\t\t}\n\t\t\t//console.log(transformedResults);\n\n\t\t\t// If OPTIONS key exists, collect InsightResults, else throw InsightError\n\t\t\tif (\"OPTIONS\" in queryObj) {\n\t\t\t\tresult = await this.handleOPTIONS(queryObj.OPTIONS, transformedResults);\n\t\t\t} else {\n\t\t\t\tthrow new InsightError(\"Query missing OPTIONS\");\n\t\t\t}\n\t\t\t//console.log(\"End result\");\n\t\t\t//console.log(result);\n\t\t} catch (err) {\n\t\t\tif (err instanceof InsightError || err instanceof ResultTooLargeError) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\tthrow new InsightError(\"Unexpected error.\");\n\t\t}\n\t\treturn result;\n\t}\n\n\t// handling section or room in filter\n\tprivate async handleWHERE(where: object): Promise<Object[]> {\n\t\tlet filteredSOR: Object[] = [];\n\t\tthis.noFilter = false;\n\t\t//console.log(\"WHERE WORKING\");\n\t\ttry {\n\t\t\tif (Object.keys(where).length === 0) {\n\t\t\t\tthis.noFilter = true;\n\t\t\t\treturn filteredSOR;\n\t\t\t} else if (Object.keys(where).length > 1) {\n\t\t\t\tthrow new InsightError(\"WHERE should only have 1 key\");\n\t\t\t} else {\n\t\t\t\tconst filter = Object.keys(where)[0];\n\t\t\t\tconst values = Object.values(where)[0];\n\n\t\t\t\t//TODO;\n\t\t\t\t//console.log(filter, values)\n\t\t\t\tfilteredSOR = await this.QueryEngineFilter.handleFilter(filter, values);\n\t\t\t\t//console.log(filteredSOR)\n\t\t\t\tthis.queryingIDString = this.QueryEngineFilter.queryingIDString;\n\n\t\t\t\tthis.sectionOrRoom = this.QueryEngineFilter.sectionOrRoom;\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tif (err instanceof InsightError || err instanceof ResultTooLargeError) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\tthrow new InsightError(\"Unexpected error in WHERE.\");\n\t\t}\n\t\treturn filteredSOR;\n\t}\n\n\t//TODO;\n\tprivate async handleTRANSFORMATIONS(transformations: object, filteredSOR: Object[]): Promise<Object[]> {\n\t\tlet transformedResults: Object[] = [];\n\t\tlet groupedResults: Record<string, any>;\n\t\t//const groupKeys;\n\t\tthis.isGrouped = true;\n\t\ttry {\n\t\t\tconst transformationKeys = Object.keys(transformations);\n\t\t\tconst invalidKeys = transformationKeys.filter((key) => !this.utils.validTransformationKeys.includes(key));\n\t\t\tif (invalidKeys.length > 0) {\n\t\t\t\tthrow new InsightError(\"Invalid keys in TRANSFORMATIONS\");\n\t\t\t}\n\t\t\tif (\"GROUP\" in transformations) {\n\t\t\t\tgroupedResults = await this.QueryAggregation.handleGroupBy(\n\t\t\t\t\ttransformations.GROUP,\n\t\t\t\t\tfilteredSOR,\n\t\t\t\t\tthis.noFilter,\n\t\t\t\t\tthis.queryingIDString,\n\t\t\t\t\tthis.sectionOrRoom\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthrow new InsightError(\"TRANSFORMATIONS missing GROUP key\");\n\t\t\t}\n\n\t\t\tif (\"APPLY\" in transformations) {\n\t\t\t\ttransformedResults = await this.QueryAggregation.handleApply(transformations.APPLY, groupedResults);\n\t\t\t\tthis.updateVar();\n\t\t\t\t//console.log(\"Promise resolved with:\", transformedResults);\n\t\t\t} else {\n\t\t\t\tthrow new InsightError(\"TRANSFORMATIONS missing APPLY key\");\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tif (err instanceof InsightError || err instanceof ResultTooLargeError) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\tthrow new InsightError(\"Unexpected error in TRANSFORMATIONS.\");\n\t\t}\n\t\treturn transformedResults;\n\t}\n\n\tprivate updateVar(): boolean {\n\t\tthis.queryingIDString = this.QueryAggregation.queryingIDString;\n\t\tthis.sectionOrRoom = this.QueryAggregation.sectionOrRoom;\n\t\tthis.newCols = this.QueryAggregation.groupKeys.concat(this.QueryAggregation.applyKeys);\n\t\t//console.log(this.newCols);\n\t\treturn true;\n\t}\n\n\tprivate async handleOPTIONS(options: object, transformedResults: Object[]): Promise<InsightResult[]> {\n\t\t//console.log(\"OPTIONS WORKING\");\n\t\tlet results: InsightResult[] = [];\n\t\tlet columns: string[] = [];\n\t\tlet orderKeys: string[] = [];\n\t\ttry {\n\t\t\tconst optionsKeys = Object.keys(options);\n\t\t\tconst invalidKeys = optionsKeys.filter((key) => !this.utils.validOptions.includes(key));\n\t\t\tif (invalidKeys.length > 0) {\n\t\t\t\tthrow new InsightError(\"Invalid keys in OPTIONS\");\n\t\t\t}\n\n\t\t\t// Done\n\t\t\tif (\"COLUMNS\" in options) {\n\t\t\t\tcolumns = this.handleCOLUMNS(options.COLUMNS);\n\t\t\t} else {\n\t\t\t\tthrow new InsightError(\"Query missing COLUMNS\");\n\t\t\t}\n\n\t\t\t//console.log(columns);\n\t\t\t// Done\n\t\t\tif (\"ORDER\" in options) {\n\t\t\t\torderKeys = await this.QueryOrderHandler.handleORDER(options.ORDER, columns);\n\t\t\t\tthis.dir = this.QueryOrderHandler.getDir();\n\t\t\t}\n\n\t\t\tresults = await this.completeQuery(transformedResults, columns, orderKeys);\n\t\t} catch (err) {\n\t\t\tif (err instanceof InsightError || err instanceof ResultTooLargeError) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\tthrow new InsightError(\"Unexpected error in OPTIONS.\");\n\t\t}\n\t\treturn results;\n\t}\n\n\tprivate async completeQuery(\n\t\ttransformedResults: Object[],\n\t\tcolumns: string[],\n\t\torderKeys: string[]\n\t): Promise<InsightResult[]> {\n\t\tlet results: InsightResult[] = [];\n\t\tlet dataset: Object[] | undefined = [];\n\t\t//console.log(\"COMPLETE QUERY WORKING\");\n\t\t// if no filters have been applied\n\t\tif (this.noFilter && !this.isGrouped) {\n\t\t\tif (this.sectionOrRoom === \"section\") {\n\t\t\t\tdataset = this.sectionsDatabase.get(this.queryingIDString);\n\t\t\t} else if (this.sectionOrRoom === \"room\") {\n\t\t\t\tdataset = this.roomsDatabase.get(this.queryingIDString);\n\t\t\t} else {\n\t\t\t\tthrow new InsightError(\"section or room undefined\");\n\t\t\t}\n\t\t\tif (dataset === undefined) {\n\t\t\t\t// should not be possible given current implementation of other methods for query\n\t\t\t\tthrow new InsightError(\"Can't find querying dataset\");\n\t\t\t} else {\n\t\t\t\ttransformedResults = dataset;\n\t\t\t}\n\t\t}\n\n\t\t//console.log(transformedResults.length);\n\t\tthis.utils.checkSize(transformedResults);\n\n\t\t//TODO\n\t\tresults = await this.utils.selectCOLUMNS(transformedResults, columns, this.isGrouped);\n\t\tresults = await this.utils.sortByOrder(results, orderKeys, this.dir);\n\t\treturn results;\n\t}\n\n\t// returns the columns as an array of strings (WORKING)\n\tprivate handleCOLUMNS(value: unknown): string[] {\n\t\t//console.log(\"COLUMNS WORKING\");\n\t\tconst columns = this.utils.coerceToArray(value); // checks if is an array, if so, coerce to array type\n\t\tconst results: string[] = [];\n\t\tfor (const key of columns) {\n\t\t\tconst keyStr = String(key);\n\t\t\tconst field = keyStr.split(\"_\")[1];\n\t\t\tconst idstring = keyStr.split(\"_\")[0];\n\n\t\t\tif (this.checkValidTransformColumn(keyStr)) {\n\t\t\t\tresults.push(keyStr);\n\t\t\t} else {\n\t\t\t\tthis.sectionOrRoom = this.utils.checkIDString(\n\t\t\t\t\tthis.sDSList,\n\t\t\t\t\tthis.rDSList,\n\t\t\t\t\tthis.sectionOrRoom,\n\t\t\t\t\tthis.queryingIDString,\n\t\t\t\t\tidstring\n\t\t\t\t);\n\t\t\t\tthis.queryingIDString = idstring;\n\n\t\t\t\t// checks if the field is a valid field\n\t\t\t\tif (this.checkValidColumn(field)) {\n\t\t\t\t\tresults.push(keyStr);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new InsightError(`Invalid key ${keyStr} in COLUMNS`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn results;\n\t}\n\n\tprivate checkValidTransformColumn(keyStr: string): boolean {\n\t\tif (this.isGrouped) {\n\t\t\tif (this.newCols.includes(keyStr)) {\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\tthrow new InsightError(\"Keys in COLUMNS must be in GROUP or APPLY when TRANSFORMATIONS is present\");\n\t\t\t}\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t// if the field is valid, return true, if sectionOrRoom is somehow empty throw error\n\tprivate checkValidColumn(field: string): boolean {\n\t\t//const field = keyStr.split(\"_\")[1];\n\t\tif (this.sectionOrRoom === \"section\") {\n\t\t\tif (this.utils.mFieldsSection.includes(field) || this.utils.sFieldsSection.includes(field)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} else if (this.sectionOrRoom === \"room\") {\n\t\t\tif (this.utils.mFieldsRoom.includes(field) || this.utils.sFieldsRoom.includes(field)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new InsightError(\"section or room undefined\");\n\t\t}\n\t\treturn false;\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"3dbc5e4388b5366e61343f569e82a76e3713eefa","contentHash":"555ab261930dfd0eaa221be02445a11b98a9e7357779ac790cb2deb98b44b89b"},"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\QueryOrderHandler.ts":{"path":"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\QueryOrderHandler.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":0},"end":{"line":6,"column":35}},"4":{"start":{"line":7,"column":25},"end":{"line":7,"column":52}},"5":{"start":{"line":8,"column":21},"end":{"line":8,"column":61}},"6":{"start":{"line":10,"column":16},"end":{"line":10,"column":31}},"7":{"start":{"line":11,"column":15},"end":{"line":11,"column":29}},"8":{"start":{"line":12,"column":12},"end":{"line":12,"column":38}},"9":{"start":{"line":13,"column":10},"end":{"line":13,"column":12}},"10":{"start":{"line":15,"column":8},"end":{"line":15,"column":24}},"11":{"start":{"line":18,"column":24},"end":{"line":18,"column":26}},"12":{"start":{"line":19,"column":8},"end":{"line":19,"column":24}},"13":{"start":{"line":20,"column":8},"end":{"line":51,"column":9}},"14":{"start":{"line":21,"column":29},"end":{"line":21,"column":42}},"15":{"start":{"line":22,"column":12},"end":{"line":22,"column":70}},"16":{"start":{"line":24,"column":13},"end":{"line":51,"column":9}},"17":{"start":{"line":25,"column":28},"end":{"line":25,"column":41}},"18":{"start":{"line":26,"column":29},"end":{"line":26,"column":49}},"19":{"start":{"line":27,"column":32},"end":{"line":27,"column":87}},"20":{"start":{"line":27,"column":57},"end":{"line":27,"column":86}},"21":{"start":{"line":28,"column":12},"end":{"line":30,"column":13}},"22":{"start":{"line":29,"column":16},"end":{"line":29,"column":81}},"23":{"start":{"line":31,"column":12},"end":{"line":41,"column":13}},"24":{"start":{"line":32,"column":16},"end":{"line":37,"column":17}},"25":{"start":{"line":33,"column":20},"end":{"line":33,"column":43}},"26":{"start":{"line":36,"column":20},"end":{"line":36,"column":83}},"27":{"start":{"line":40,"column":16},"end":{"line":40,"column":83}},"28":{"start":{"line":42,"column":12},"end":{"line":47,"column":13}},"29":{"start":{"line":43,"column":16},"end":{"line":43,"column":78}},"30":{"start":{"line":46,"column":16},"end":{"line":46,"column":84}},"31":{"start":{"line":50,"column":12},"end":{"line":50,"column":74}},"32":{"start":{"line":52,"column":8},"end":{"line":52,"column":25}},"33":{"start":{"line":55,"column":26},"end":{"line":55,"column":28}},"34":{"start":{"line":56,"column":8},"end":{"line":67,"column":9}},"35":{"start":{"line":57,"column":25},"end":{"line":57,"column":30}},"36":{"start":{"line":58,"column":12},"end":{"line":60,"column":13}},"37":{"start":{"line":59,"column":16},"end":{"line":59,"column":96}},"38":{"start":{"line":61,"column":12},"end":{"line":63,"column":13}},"39":{"start":{"line":62,"column":16},"end":{"line":62,"column":69}},"40":{"start":{"line":66,"column":12},"end":{"line":66,"column":94}},"41":{"start":{"line":68,"column":8},"end":{"line":68,"column":25}},"42":{"start":{"line":71,"column":8},"end":{"line":76,"column":9}},"43":{"start":{"line":72,"column":12},"end":{"line":72,"column":23}},"44":{"start":{"line":75,"column":12},"end":{"line":75,"column":84}},"45":{"start":{"line":79,"column":0},"end":{"line":79,"column":46}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":14,"column":4},"end":{"line":14,"column":5}},"loc":{"start":{"line":14,"column":13},"end":{"line":16,"column":5}},"line":14},"2":{"name":"(anonymous_2)","decl":{"start":{"line":17,"column":4},"end":{"line":17,"column":5}},"loc":{"start":{"line":17,"column":38},"end":{"line":53,"column":5}},"line":17},"3":{"name":"(anonymous_3)","decl":{"start":{"line":27,"column":48},"end":{"line":27,"column":49}},"loc":{"start":{"line":27,"column":57},"end":{"line":27,"column":86}},"line":27},"4":{"name":"(anonymous_4)","decl":{"start":{"line":54,"column":4},"end":{"line":54,"column":5}},"loc":{"start":{"line":54,"column":42},"end":{"line":69,"column":5}},"line":54},"5":{"name":"(anonymous_5)","decl":{"start":{"line":70,"column":4},"end":{"line":70,"column":5}},"loc":{"start":{"line":70,"column":36},"end":{"line":77,"column":5}},"line":70}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":20,"column":8},"end":{"line":51,"column":9}},"type":"if","locations":[{"start":{"line":20,"column":8},"end":{"line":51,"column":9}},{"start":{"line":20,"column":8},"end":{"line":51,"column":9}}],"line":20},"4":{"loc":{"start":{"line":24,"column":13},"end":{"line":51,"column":9}},"type":"if","locations":[{"start":{"line":24,"column":13},"end":{"line":51,"column":9}},{"start":{"line":24,"column":13},"end":{"line":51,"column":9}}],"line":24},"5":{"loc":{"start":{"line":28,"column":12},"end":{"line":30,"column":13}},"type":"if","locations":[{"start":{"line":28,"column":12},"end":{"line":30,"column":13}},{"start":{"line":28,"column":12},"end":{"line":30,"column":13}}],"line":28},"6":{"loc":{"start":{"line":31,"column":12},"end":{"line":41,"column":13}},"type":"if","locations":[{"start":{"line":31,"column":12},"end":{"line":41,"column":13}},{"start":{"line":31,"column":12},"end":{"line":41,"column":13}}],"line":31},"7":{"loc":{"start":{"line":32,"column":16},"end":{"line":37,"column":17}},"type":"if","locations":[{"start":{"line":32,"column":16},"end":{"line":37,"column":17}},{"start":{"line":32,"column":16},"end":{"line":37,"column":17}}],"line":32},"8":{"loc":{"start":{"line":42,"column":12},"end":{"line":47,"column":13}},"type":"if","locations":[{"start":{"line":42,"column":12},"end":{"line":47,"column":13}},{"start":{"line":42,"column":12},"end":{"line":47,"column":13}}],"line":42},"9":{"loc":{"start":{"line":56,"column":8},"end":{"line":67,"column":9}},"type":"if","locations":[{"start":{"line":56,"column":8},"end":{"line":67,"column":9}},{"start":{"line":56,"column":8},"end":{"line":67,"column":9}}],"line":56},"10":{"loc":{"start":{"line":58,"column":12},"end":{"line":60,"column":13}},"type":"if","locations":[{"start":{"line":58,"column":12},"end":{"line":60,"column":13}},{"start":{"line":58,"column":12},"end":{"line":60,"column":13}}],"line":58},"11":{"loc":{"start":{"line":71,"column":8},"end":{"line":76,"column":9}},"type":"if","locations":[{"start":{"line":71,"column":8},"end":{"line":76,"column":9}},{"start":{"line":71,"column":8},"end":{"line":76,"column":9}}],"line":71}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":71,"7":71,"8":71,"9":71,"10":48,"11":61,"12":61,"13":61,"14":43,"15":43,"16":18,"17":18,"18":18,"19":18,"20":34,"21":18,"22":1,"23":17,"24":16,"25":13,"26":3,"27":1,"28":13,"29":12,"30":1,"31":0,"32":48,"33":12,"34":12,"35":11,"36":11,"37":2,"38":9,"39":12,"40":1,"41":6,"42":55,"43":51,"44":4,"45":1},"f":{"0":1,"1":48,"2":61,"3":34,"4":12,"5":55},"b":{"0":[1,1,1],"1":[1,0],"2":[1,1],"3":[43,18],"4":[18,0],"5":[1,17],"6":[16,1],"7":[13,3],"8":[12,1],"9":[11,1],"10":[2,9],"11":[51,4]},"inputSourceMap":{"version":3,"file":"C:/Users/oreak/IdeaProjects/project_team059/src/controller/QueryOrderHandler.ts","sources":["C:/Users/oreak/IdeaProjects/project_team059/src/controller/QueryOrderHandler.ts"],"names":[],"mappings":"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","sourcesContent":["import { InsightError } from \"./IInsightFacade\";\nimport QueryUtils from \"./QueryUtils\";\n\nexport class QueryOrderHandler {\n\t// returns the order key as a string (WORKING)\n\tprivate validSort: string[] = [\"dir\", \"keys\"];\n\tprivate validDir: string[] = [\"UP\", \"DOWN\"];\n\tprivate utils = new QueryUtils();\n\tprivate dir = \"\";\n\n\tpublic getDir(): string {\n\t\treturn this.dir;\n\t}\n\n\tpublic async handleORDER(value: unknown, columns: string[]): Promise<string[]> {\n\t\tlet orderKeys: string[] = [];\n\t\tthis.dir = \"UP\";\n\n\t\t// if only one order key\n\t\tif (typeof value === \"string\") {\n\t\t\t//console.log(value);\n\t\t\t//console.log(\"order as a string\");\n\t\t\tconst valueStr = String(value);\n\t\t\torderKeys.push(this.checkKeyInColumns(valueStr, columns));\n\t\t} else if (typeof value === \"object\") {\n\t\t\t//console.log(\"order as an object\");\n\t\t\t//console.log(value);\n\t\t\tconst sortObj = Object(value);\n\t\t\tconst sortKeys = Object.keys(sortObj);\n\t\t\tconst invalidKeys = sortKeys.filter((key) => !this.validSort.includes(key));\n\n\t\t\t//console.log(sortKeys);\n\t\t\tif (invalidKeys.length > 0) {\n\t\t\t\tthrow new InsightError(\"Invalid keys in ORDER\");\n\t\t\t}\n\n\t\t\tif (\"dir\" in sortObj) {\n\t\t\t\t//console.log(typeof sortObj.dir);\n\t\t\t\t//console.log(\"reached dir in sorKeys\");\n\t\t\t\t//console.log(sortObj.dir);\n\t\t\t\t// changed from sortObj.dir in this.validDir\n\t\t\t\tif (this.validDir.includes(sortObj.dir)) {\n\t\t\t\t\t//console.log(\"WORKING\");\n\t\t\t\t\tthis.dir = sortObj.dir;\n\t\t\t\t} else {\n\t\t\t\t\t//console.log(\"Test\");\n\t\t\t\t\t//console.log(sortObj.dir);\n\t\t\t\t\tthrow new InsightError(\"Invalid 'dir' value\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow new InsightError(\"ORDER missing 'dir' key\");\n\t\t\t}\n\n\t\t\tif (\"keys\" in sortObj) {\n\t\t\t\torderKeys = await this.handleOrderKeys(sortObj.keys, columns);\n\t\t\t} else {\n\t\t\t\tthrow new InsightError(\"ORDER missing 'keys' key\");\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new InsightError(\"Invalid ORDER type\");\n\t\t}\n\t\treturn orderKeys;\n\t}\n\n\tprivate async handleOrderKeys(value: unknown, columns: string[]): Promise<string[]> {\n\t\tconst orderKeys: string[] = [];\n\t\tif (this.utils.isStringArray(value)) {\n\t\t\tconst keys = value as string[];\n\t\t\tif (keys.length === 0) {\n\t\t\t\tthrow new InsightError(\"ORDER keys must be a non-empty array\");\n\t\t\t}\n\t\t\tfor (const key of keys) {\n\t\t\t\torderKeys.push(this.checkKeyInColumns(key, columns));\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new InsightError(\"ORDER keys must be an array of strings\");\n\t\t}\n\t\treturn orderKeys;\n\t}\n\n\t// checks if the key is in columns, if not, throw error\n\tprivate checkKeyInColumns(key: string, columns: string[]): string {\n\t\tif (columns.includes(key)) {\n\t\t\treturn key;\n\t\t} else {\n\t\t\tthrow new InsightError(\"ORDER key must be in COLUMNS\");\n\t\t}\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"b7085cebdbb3922da1a1058dc96a10c2c2821221","contentHash":"a3ad2cd53f27018e89ca4708df9fb03e1b532c6a1e211914feb04ff5254e16ec"},"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\QueryUtils.ts":{"path":"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\QueryUtils.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":25},"end":{"line":3,"column":52}},"2":{"start":{"line":5,"column":22},"end":{"line":5,"column":35}},"3":{"start":{"line":6,"column":18},"end":{"line":6,"column":36}},"4":{"start":{"line":7,"column":21},"end":{"line":7,"column":66}},"5":{"start":{"line":8,"column":21},"end":{"line":8,"column":61}},"6":{"start":{"line":9,"column":18},"end":{"line":9,"column":101}},"7":{"start":{"line":10,"column":18},"end":{"line":10,"column":41}},"8":{"start":{"line":11,"column":19},"end":{"line":11,"column":39}},"9":{"start":{"line":12,"column":21},"end":{"line":12,"column":60}},"10":{"start":{"line":13,"column":30},"end":{"line":13,"column":48}},"11":{"start":{"line":14,"column":23},"end":{"line":14,"column":60}},"12":{"start":{"line":16,"column":8},"end":{"line":21,"column":9}},"13":{"start":{"line":17,"column":12},"end":{"line":17,"column":25}},"14":{"start":{"line":20,"column":12},"end":{"line":20,"column":69}},"15":{"start":{"line":24,"column":29},"end":{"line":24,"column":33}},"16":{"start":{"line":25,"column":8},"end":{"line":30,"column":9}},"17":{"start":{"line":26,"column":12},"end":{"line":26,"column":144}},"18":{"start":{"line":29,"column":12},"end":{"line":29,"column":24}},"19":{"start":{"line":33,"column":8},"end":{"line":43,"column":9}},"20":{"start":{"line":34,"column":12},"end":{"line":34,"column":27}},"21":{"start":{"line":37,"column":12},"end":{"line":42,"column":15}},"22":{"start":{"line":38,"column":16},"end":{"line":41,"column":22}},"23":{"start":{"line":39,"column":20},"end":{"line":39,"column":108}},"24":{"start":{"line":39,"column":55},"end":{"line":39,"column":106}},"25":{"start":{"line":40,"column":20},"end":{"line":40,"column":37}},"26":{"start":{"line":46,"column":8},"end":{"line":62,"column":9}},"27":{"start":{"line":47,"column":27},"end":{"line":47,"column":39}},"28":{"start":{"line":48,"column":27},"end":{"line":48,"column":39}},"29":{"start":{"line":49,"column":29},"end":{"line":49,"column":30}},"30":{"start":{"line":50,"column":12},"end":{"line":58,"column":13}},"31":{"start":{"line":52,"column":16},"end":{"line":52,"column":78}},"32":{"start":{"line":55,"column":29},"end":{"line":55,"column":43}},"33":{"start":{"line":56,"column":29},"end":{"line":56,"column":43}},"34":{"start":{"line":57,"column":16},"end":{"line":57,"column":70}},"35":{"start":{"line":59,"column":12},"end":{"line":61,"column":13}},"36":{"start":{"line":60,"column":16},"end":{"line":60,"column":63}},"37":{"start":{"line":63,"column":8},"end":{"line":63,"column":17}},"38":{"start":{"line":66,"column":24},"end":{"line":79,"column":10}},"39":{"start":{"line":67,"column":31},"end":{"line":67,"column":33}},"40":{"start":{"line":68,"column":30},"end":{"line":68,"column":36}},"41":{"start":{"line":69,"column":12},"end":{"line":77,"column":15}},"42":{"start":{"line":70,"column":30},"end":{"line":70,"column":50}},"43":{"start":{"line":71,"column":16},"end":{"line":76,"column":17}},"44":{"start":{"line":72,"column":20},"end":{"line":72,"column":59}},"45":{"start":{"line":75,"column":20},"end":{"line":75,"column":58}},"46":{"start":{"line":78,"column":12},"end":{"line":78,"column":30}},"47":{"start":{"line":80,"column":8},"end":{"line":80,"column":23}},"48":{"start":{"line":84,"column":8},"end":{"line":95,"column":9}},"49":{"start":{"line":85,"column":12},"end":{"line":85,"column":67}},"50":{"start":{"line":85,"column":46},"end":{"line":85,"column":65}},"51":{"start":{"line":87,"column":13},"end":{"line":95,"column":9}},"52":{"start":{"line":88,"column":12},"end":{"line":88,"column":67}},"53":{"start":{"line":88,"column":46},"end":{"line":88,"column":65}},"54":{"start":{"line":90,"column":13},"end":{"line":95,"column":9}},"55":{"start":{"line":91,"column":12},"end":{"line":91,"column":69}},"56":{"start":{"line":91,"column":46},"end":{"line":91,"column":67}},"57":{"start":{"line":94,"column":12},"end":{"line":94,"column":75}},"58":{"start":{"line":96,"column":8},"end":{"line":96,"column":23}},"59":{"start":{"line":99,"column":28},"end":{"line":99,"column":37}},"60":{"start":{"line":100,"column":29},"end":{"line":102,"column":10}},"61":{"start":{"line":101,"column":12},"end":{"line":101,"column":77}},"62":{"start":{"line":103,"column":28},"end":{"line":103,"column":49}},"63":{"start":{"line":104,"column":8},"end":{"line":106,"column":11}},"64":{"start":{"line":105,"column":12},"end":{"line":105,"column":66}},"65":{"start":{"line":107,"column":8},"end":{"line":117,"column":9}},"66":{"start":{"line":108,"column":12},"end":{"line":110,"column":13}},"67":{"start":{"line":109,"column":16},"end":{"line":109,"column":25}},"68":{"start":{"line":111,"column":28},"end":{"line":111,"column":46}},"69":{"start":{"line":112,"column":12},"end":{"line":116,"column":15}},"70":{"start":{"line":113,"column":16},"end":{"line":115,"column":17}},"71":{"start":{"line":114,"column":20},"end":{"line":114,"column":44}},"72":{"start":{"line":118,"column":8},"end":{"line":118,"column":66}},"73":{"start":{"line":118,"column":44},"end":{"line":118,"column":64}},"74":{"start":{"line":121,"column":8},"end":{"line":123,"column":9}},"75":{"start":{"line":122,"column":12},"end":{"line":122,"column":78}},"76":{"start":{"line":126,"column":32},"end":{"line":126,"column":49}},"77":{"start":{"line":127,"column":8},"end":{"line":129,"column":9}},"78":{"start":{"line":128,"column":12},"end":{"line":128,"column":128}},"79":{"start":{"line":130,"column":31},"end":{"line":130,"column":57}},"80":{"start":{"line":131,"column":8},"end":{"line":131,"column":49}},"81":{"start":{"line":134,"column":8},"end":{"line":142,"column":9}},"82":{"start":{"line":135,"column":12},"end":{"line":135,"column":68}},"83":{"start":{"line":137,"column":13},"end":{"line":142,"column":9}},"84":{"start":{"line":138,"column":12},"end":{"line":138,"column":91}},"85":{"start":{"line":141,"column":12},"end":{"line":141,"column":33}},"86":{"start":{"line":145,"column":8},"end":{"line":153,"column":9}},"87":{"start":{"line":146,"column":12},"end":{"line":146,"column":29}},"88":{"start":{"line":148,"column":13},"end":{"line":153,"column":9}},"89":{"start":{"line":149,"column":12},"end":{"line":149,"column":26}},"90":{"start":{"line":152,"column":12},"end":{"line":152,"column":92}},"91":{"start":{"line":156,"column":8},"end":{"line":156,"column":87}},"92":{"start":{"line":156,"column":61},"end":{"line":156,"column":85}},"93":{"start":{"line":159,"column":0},"end":{"line":159,"column":29}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":15,"column":4},"end":{"line":15,"column":5}},"loc":{"start":{"line":15,"column":25},"end":{"line":22,"column":5}},"line":15},"1":{"name":"(anonymous_1)","decl":{"start":{"line":23,"column":4},"end":{"line":23,"column":5}},"loc":{"start":{"line":23,"column":34},"end":{"line":31,"column":5}},"line":23},"2":{"name":"(anonymous_2)","decl":{"start":{"line":32,"column":4},"end":{"line":32,"column":5}},"loc":{"start":{"line":32,"column":47},"end":{"line":44,"column":5}},"line":32},"3":{"name":"(anonymous_3)","decl":{"start":{"line":37,"column":31},"end":{"line":37,"column":32}},"loc":{"start":{"line":37,"column":44},"end":{"line":42,"column":13}},"line":37},"4":{"name":"(anonymous_4)","decl":{"start":{"line":38,"column":27},"end":{"line":38,"column":28}},"loc":{"start":{"line":38,"column":33},"end":{"line":41,"column":17}},"line":38},"5":{"name":"(anonymous_5)","decl":{"start":{"line":39,"column":33},"end":{"line":39,"column":34}},"loc":{"start":{"line":39,"column":55},"end":{"line":39,"column":106}},"line":39},"6":{"name":"(anonymous_6)","decl":{"start":{"line":45,"column":4},"end":{"line":45,"column":5}},"loc":{"start":{"line":45,"column":51},"end":{"line":64,"column":5}},"line":45},"7":{"name":"(anonymous_7)","decl":{"start":{"line":65,"column":4},"end":{"line":65,"column":5}},"loc":{"start":{"line":65,"column":64},"end":{"line":81,"column":5}},"line":65},"8":{"name":"(anonymous_8)","decl":{"start":{"line":66,"column":47},"end":{"line":66,"column":48}},"loc":{"start":{"line":66,"column":59},"end":{"line":79,"column":9}},"line":66},"9":{"name":"(anonymous_9)","decl":{"start":{"line":69,"column":28},"end":{"line":69,"column":29}},"loc":{"start":{"line":69,"column":40},"end":{"line":77,"column":13}},"line":69},"10":{"name":"(anonymous_10)","decl":{"start":{"line":82,"column":4},"end":{"line":82,"column":5}},"loc":{"start":{"line":82,"column":57},"end":{"line":97,"column":5}},"line":82},"11":{"name":"(anonymous_11)","decl":{"start":{"line":85,"column":37},"end":{"line":85,"column":38}},"loc":{"start":{"line":85,"column":46},"end":{"line":85,"column":65}},"line":85},"12":{"name":"(anonymous_12)","decl":{"start":{"line":88,"column":37},"end":{"line":88,"column":38}},"loc":{"start":{"line":88,"column":46},"end":{"line":88,"column":65}},"line":88},"13":{"name":"(anonymous_13)","decl":{"start":{"line":91,"column":37},"end":{"line":91,"column":38}},"loc":{"start":{"line":91,"column":46},"end":{"line":91,"column":67}},"line":91},"14":{"name":"(anonymous_14)","decl":{"start":{"line":98,"column":4},"end":{"line":98,"column":5}},"loc":{"start":{"line":98,"column":32},"end":{"line":119,"column":5}},"line":98},"15":{"name":"(anonymous_15)","decl":{"start":{"line":100,"column":44},"end":{"line":100,"column":45}},"loc":{"start":{"line":100,"column":69},"end":{"line":102,"column":9}},"line":100},"16":{"name":"(anonymous_16)","decl":{"start":{"line":104,"column":28},"end":{"line":104,"column":29}},"loc":{"start":{"line":104,"column":37},"end":{"line":106,"column":9}},"line":104},"17":{"name":"(anonymous_17)","decl":{"start":{"line":112,"column":33},"end":{"line":112,"column":34}},"loc":{"start":{"line":112,"column":42},"end":{"line":116,"column":13}},"line":112},"18":{"name":"(anonymous_18)","decl":{"start":{"line":118,"column":35},"end":{"line":118,"column":36}},"loc":{"start":{"line":118,"column":44},"end":{"line":118,"column":64}},"line":118},"19":{"name":"(anonymous_19)","decl":{"start":{"line":120,"column":4},"end":{"line":120,"column":5}},"loc":{"start":{"line":120,"column":18},"end":{"line":124,"column":5}},"line":120},"20":{"name":"(anonymous_20)","decl":{"start":{"line":125,"column":4},"end":{"line":125,"column":5}},"loc":{"start":{"line":125,"column":21},"end":{"line":132,"column":5}},"line":125},"21":{"name":"(anonymous_21)","decl":{"start":{"line":133,"column":4},"end":{"line":133,"column":5}},"loc":{"start":{"line":133,"column":76},"end":{"line":143,"column":5}},"line":133},"22":{"name":"(anonymous_22)","decl":{"start":{"line":144,"column":4},"end":{"line":144,"column":5}},"loc":{"start":{"line":144,"column":48},"end":{"line":154,"column":5}},"line":144},"23":{"name":"(anonymous_23)","decl":{"start":{"line":155,"column":4},"end":{"line":155,"column":5}},"loc":{"start":{"line":155,"column":25},"end":{"line":157,"column":5}},"line":155},"24":{"name":"(anonymous_24)","decl":{"start":{"line":156,"column":51},"end":{"line":156,"column":52}},"loc":{"start":{"line":156,"column":61},"end":{"line":156,"column":85}},"line":156}},"branchMap":{"0":{"loc":{"start":{"line":16,"column":8},"end":{"line":21,"column":9}},"type":"if","locations":[{"start":{"line":16,"column":8},"end":{"line":21,"column":9}},{"start":{"line":16,"column":8},"end":{"line":21,"column":9}}],"line":16},"1":{"loc":{"start":{"line":25,"column":8},"end":{"line":30,"column":9}},"type":"if","locations":[{"start":{"line":25,"column":8},"end":{"line":30,"column":9}},{"start":{"line":25,"column":8},"end":{"line":30,"column":9}}],"line":25},"2":{"loc":{"start":{"line":33,"column":8},"end":{"line":43,"column":9}},"type":"if","locations":[{"start":{"line":33,"column":8},"end":{"line":43,"column":9}},{"start":{"line":33,"column":8},"end":{"line":43,"column":9}}],"line":33},"3":{"loc":{"start":{"line":50,"column":12},"end":{"line":58,"column":13}},"type":"if","locations":[{"start":{"line":50,"column":12},"end":{"line":58,"column":13}},{"start":{"line":50,"column":12},"end":{"line":58,"column":13}}],"line":50},"4":{"loc":{"start":{"line":50,"column":16},"end":{"line":51,"column":74}},"type":"binary-expr","locations":[{"start":{"line":50,"column":17},"end":{"line":50,"column":43}},{"start":{"line":50,"column":47},"end":{"line":50,"column":73}},{"start":{"line":51,"column":17},"end":{"line":51,"column":43}},{"start":{"line":51,"column":47},"end":{"line":51,"column":73}}],"line":50},"5":{"loc":{"start":{"line":52,"column":29},"end":{"line":52,"column":77}},"type":"cond-expr","locations":[{"start":{"line":52,"column":49},"end":{"line":52,"column":50}},{"start":{"line":52,"column":53},"end":{"line":52,"column":77}}],"line":52},"6":{"loc":{"start":{"line":52,"column":53},"end":{"line":52,"column":77}},"type":"cond-expr","locations":[{"start":{"line":52,"column":71},"end":{"line":52,"column":73}},{"start":{"line":52,"column":76},"end":{"line":52,"column":77}}],"line":52},"7":{"loc":{"start":{"line":57,"column":29},"end":{"line":57,"column":69}},"type":"cond-expr","locations":[{"start":{"line":57,"column":45},"end":{"line":57,"column":46}},{"start":{"line":57,"column":49},"end":{"line":57,"column":69}}],"line":57},"8":{"loc":{"start":{"line":57,"column":49},"end":{"line":57,"column":69}},"type":"cond-expr","locations":[{"start":{"line":57,"column":63},"end":{"line":57,"column":65}},{"start":{"line":57,"column":68},"end":{"line":57,"column":69}}],"line":57},"9":{"loc":{"start":{"line":59,"column":12},"end":{"line":61,"column":13}},"type":"if","locations":[{"start":{"line":59,"column":12},"end":{"line":61,"column":13}},{"start":{"line":59,"column":12},"end":{"line":61,"column":13}}],"line":59},"10":{"loc":{"start":{"line":60,"column":23},"end":{"line":60,"column":62}},"type":"cond-expr","locations":[{"start":{"line":60,"column":38},"end":{"line":60,"column":48}},{"start":{"line":60,"column":51},"end":{"line":60,"column":62}}],"line":60},"11":{"loc":{"start":{"line":71,"column":16},"end":{"line":76,"column":17}},"type":"if","locations":[{"start":{"line":71,"column":16},"end":{"line":76,"column":17}},{"start":{"line":71,"column":16},"end":{"line":76,"column":17}}],"line":71},"12":{"loc":{"start":{"line":84,"column":8},"end":{"line":95,"column":9}},"type":"if","locations":[{"start":{"line":84,"column":8},"end":{"line":95,"column":9}},{"start":{"line":84,"column":8},"end":{"line":95,"column":9}}],"line":84},"13":{"loc":{"start":{"line":87,"column":13},"end":{"line":95,"column":9}},"type":"if","locations":[{"start":{"line":87,"column":13},"end":{"line":95,"column":9}},{"start":{"line":87,"column":13},"end":{"line":95,"column":9}}],"line":87},"14":{"loc":{"start":{"line":90,"column":13},"end":{"line":95,"column":9}},"type":"if","locations":[{"start":{"line":90,"column":13},"end":{"line":95,"column":9}},{"start":{"line":90,"column":13},"end":{"line":95,"column":9}}],"line":90},"15":{"loc":{"start":{"line":101,"column":19},"end":{"line":101,"column":76}},"type":"cond-expr","locations":[{"start":{"line":101,"column":56},"end":{"line":101,"column":65}},{"start":{"line":101,"column":68},"end":{"line":101,"column":76}}],"line":101},"16":{"loc":{"start":{"line":105,"column":34},"end":{"line":105,"column":59}},"type":"binary-expr","locations":[{"start":{"line":105,"column":34},"end":{"line":105,"column":54}},{"start":{"line":105,"column":58},"end":{"line":105,"column":59}}],"line":105},"17":{"loc":{"start":{"line":108,"column":12},"end":{"line":110,"column":13}},"type":"if","locations":[{"start":{"line":108,"column":12},"end":{"line":110,"column":13}},{"start":{"line":108,"column":12},"end":{"line":110,"column":13}}],"line":108},"18":{"loc":{"start":{"line":113,"column":16},"end":{"line":115,"column":17}},"type":"if","locations":[{"start":{"line":113,"column":16},"end":{"line":115,"column":17}},{"start":{"line":113,"column":16},"end":{"line":115,"column":17}}],"line":113},"19":{"loc":{"start":{"line":121,"column":8},"end":{"line":123,"column":9}},"type":"if","locations":[{"start":{"line":121,"column":8},"end":{"line":123,"column":9}},{"start":{"line":121,"column":8},"end":{"line":123,"column":9}}],"line":121},"20":{"loc":{"start":{"line":127,"column":8},"end":{"line":129,"column":9}},"type":"if","locations":[{"start":{"line":127,"column":8},"end":{"line":129,"column":9}},{"start":{"line":127,"column":8},"end":{"line":129,"column":9}}],"line":127},"21":{"loc":{"start":{"line":134,"column":8},"end":{"line":142,"column":9}},"type":"if","locations":[{"start":{"line":134,"column":8},"end":{"line":142,"column":9}},{"start":{"line":134,"column":8},"end":{"line":142,"column":9}}],"line":134},"22":{"loc":{"start":{"line":137,"column":13},"end":{"line":142,"column":9}},"type":"if","locations":[{"start":{"line":137,"column":13},"end":{"line":142,"column":9}},{"start":{"line":137,"column":13},"end":{"line":142,"column":9}}],"line":137},"23":{"loc":{"start":{"line":145,"column":8},"end":{"line":153,"column":9}},"type":"if","locations":[{"start":{"line":145,"column":8},"end":{"line":153,"column":9}},{"start":{"line":145,"column":8},"end":{"line":153,"column":9}}],"line":145},"24":{"loc":{"start":{"line":148,"column":13},"end":{"line":153,"column":9}},"type":"if","locations":[{"start":{"line":148,"column":13},"end":{"line":153,"column":9}},{"start":{"line":148,"column":13},"end":{"line":153,"column":9}}],"line":148},"25":{"loc":{"start":{"line":156,"column":15},"end":{"line":156,"column":86}},"type":"binary-expr","locations":[{"start":{"line":156,"column":15},"end":{"line":156,"column":35}},{"start":{"line":156,"column":39},"end":{"line":156,"column":86}}],"line":156}},"s":{"0":1,"1":1,"2":592,"3":592,"4":592,"5":592,"6":592,"7":592,"8":592,"9":592,"10":592,"11":592,"12":219,"13":217,"14":2,"15":61,"16":61,"17":3,"18":58,"19":58,"20":13,"21":45,"22":45,"23":45,"24":60536,"25":45,"26":60536,"27":61061,"28":61061,"29":61061,"30":61061,"31":61061,"32":0,"33":0,"34":0,"35":61061,"36":53288,"37":7248,"38":58,"39":9158,"40":9158,"41":9158,"42":27891,"43":27891,"44":1073,"45":26818,"46":9158,"47":58,"48":110,"49":9,"50":517260,"51":101,"52":99,"53":3441180,"54":2,"55":2,"56":129224,"57":0,"58":110,"59":32,"60":32,"61":36,"62":32,"63":32,"64":151341,"65":32,"66":68,"67":32,"68":36,"69":36,"70":154549,"71":21465,"72":32,"73":151341,"74":195,"75":3,"76":39,"77":39,"78":2,"79":37,"80":37,"81":393,"82":134,"83":259,"84":3,"85":256,"86":134,"87":57,"88":77,"89":60,"90":17,"91":52,"92":66,"93":1},"f":{"0":219,"1":61,"2":58,"3":45,"4":45,"5":60536,"6":60536,"7":58,"8":9158,"9":27891,"10":110,"11":517260,"12":3441180,"13":129224,"14":32,"15":36,"16":151341,"17":154549,"18":151341,"19":195,"20":39,"21":393,"22":134,"23":52,"24":66},"b":{"0":[217,2],"1":[3,58],"2":[13,45],"3":[61061,0],"4":[61061,14851,46210,46210],"5":[7773,53288],"6":[30822,22466],"7":[0,0],"8":[0,0],"9":[53288,7773],"10":[50948,2340],"11":[1073,26818],"12":[9,101],"13":[99,2],"14":[2,0],"15":[14,22],"16":[151341,151341],"17":[32,36],"18":[21465,133084],"19":[3,192],"20":[2,37],"21":[134,259],"22":[3,256],"23":[57,77],"24":[60,17],"25":[52,51]},"inputSourceMap":{"version":3,"file":"C:/Users/oreak/IdeaProjects/project_team059/src/controller/QueryUtils.ts","sources":["C:/Users/oreak/IdeaProjects/project_team059/src/controller/QueryUtils.ts"],"names":[],"mappings":"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","sourcesContent":["import { InsightError, InsightResult, ResultTooLargeError } from \"./IInsightFacade\";\n\nexport default class QueryUtils {\n\tpublic logicComparator: string[] = [\"AND\", \"OR\"];\n\tpublic mComparator: string[] = [\"LT\", \"GT\", \"EQ\"];\n\tpublic sFieldsSection: string[] = [\"uuid\", \"id\", \"title\", \"instructor\", \"dept\"];\n\tpublic mFieldsSection: string[] = [\"year\", \"avg\", \"pass\", \"fail\", \"audit\"];\n\tpublic sFieldsRoom: string[] = [\"fullname\", \"shortname\", \"number\", \"name\", \"address\", \"type\", \"furniture\", \"href\"];\n\tpublic mFieldsRoom: string[] = [\"lat\", \"lon\", \"seats\"];\n\tpublic validOptions: string[] = [\"COLUMNS\", \"ORDER\"];\n\tpublic validQueryKeys: string[] = [\"WHERE\", \"OPTIONS\", \"TRANSFORMATIONS\"];\n\tpublic validTransformationKeys: string[] = [\"GROUP\", \"APPLY\"];\n\tpublic validApplyTokens: string[] = [\"MAX\", \"MIN\", \"AVG\", \"SUM\", \"COUNT\"];\n\t//public validSort: string[] = [\"dir\", \"keys\"];\n\n\tpublic coerceToArray(value: unknown): unknown[] {\n\t\tif (Array.isArray(value)) {\n\t\t\treturn value;\n\t\t} else {\n\t\t\tthrow new InsightError(\"Not an array.\");\n\t\t}\n\t}\n\n\tpublic checkSize(transformedResults: Object[]): boolean {\n\t\tconst maxQuerySize = 5000;\n\t\tif (transformedResults.length > maxQuerySize) {\n\t\t\tthrow new ResultTooLargeError(\n\t\t\t\t\"The result is too big. Only queries with a maximum of 5000 results are supported.\"\n\t\t\t);\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t// DONE?\n\tpublic async sortByOrder(results: InsightResult[], orderKeys: string[], dir: string): Promise<InsightResult[]> {\n\t\tif (orderKeys.length === 0) {\n\t\t\treturn results;\n\t\t} else {\n\t\t\t// Perform the sorting asynchronously\n\t\t\treturn new Promise((resolve) => {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tresults.sort((recordA, recordB) => this.sortFunction(recordA, recordB, orderKeys, dir));\n\t\t\t\t\t// Resolve the promise with the sorted results\n\t\t\t\t\tresolve(results);\n\t\t\t\t}, 0);\n\t\t\t});\n\t\t}\n\t}\n\n\t// helper function for sortByOrder\n\tprivate sortFunction(recordA: InsightResult, recordB: InsightResult, orderKeys: string[], dir: string): number {\n\t\tfor (const key of orderKeys) {\n\t\t\tconst valueA = recordA[key];\n\t\t\tconst valueB = recordB[key];\n\t\t\tlet comparison = 0;\n\n\t\t\tif (\n\t\t\t\t(typeof valueA === \"string\" && typeof valueB === \"string\") ||\n\t\t\t\t(typeof valueA === \"number\" && typeof valueB === \"number\")\n\t\t\t) {\n\t\t\t\tcomparison = valueA === valueB ? 0 : valueA < valueB ? -1 : 1;\n\t\t\t} else {\n\t\t\t\tconst strA = String(valueA);\n\t\t\t\tconst strB = String(valueB);\n\t\t\t\tcomparison = strA === strB ? 0 : strA < strB ? -1 : 1;\n\t\t\t}\n\n\t\t\t// if there’s a difference --> apply the sorting direction and move to the next key to break tie\n\t\t\tif (comparison !== 0) {\n\t\t\t\treturn dir === \"UP\" ? comparison : -comparison;\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t}\n\n\t// select columns of the transformedResults (transformedResults may be a transformed objects, sections, or rooms)\n\tpublic async selectCOLUMNS(\n\t\ttransformedResults: Object[],\n\t\tcolumns: string[],\n\t\tisGrouped: boolean\n\t): Promise<InsightResult[]> {\n\t\tconst results = transformedResults.map((result) => {\n\t\t\tconst currRecord: InsightResult = {};\n\t\t\tconst resultObj = result as Record<string, any>;\n\n\t\t\tcolumns.forEach((column) => {\n\t\t\t\tconst field = column.split(\"_\")[1];\n\t\t\t\t// using the implementation of individuals fields of rooms and sections\n\t\t\t\tif (isGrouped) {\n\t\t\t\t\tcurrRecord[column] = resultObj[column];\n\t\t\t\t} else {\n\t\t\t\t\tcurrRecord[column] = resultObj[field];\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn currRecord;\n\t\t});\n\t\treturn results;\n\t}\n\n\t// REQUIRES: mfield valid, input is a number, dataset is valid, filter is valid\n\t// helper function for handleMCompare\n\tpublic async filterMCompare(dataset: Object[], filter: string, mfield: string, input: number): Promise<Object[]> {\n\t\tlet results: Object[];\n\t\t//console.log(\"FILTER MCOMPARISON WORKING\");\n\t\tif (filter === \"LT\") {\n\t\t\tresults = dataset.filter((SOR) => (SOR as Record<string, any>)[mfield] < input);\n\t\t} else if (filter === \"GT\") {\n\t\t\tresults = dataset.filter((SOR) => (SOR as Record<string, any>)[mfield] > input);\n\t\t} else if (filter === \"EQ\") {\n\t\t\tresults = dataset.filter((SOR) => (SOR as Record<string, any>)[mfield] === input);\n\t\t} else {\n\t\t\tthrow new InsightError(\"Invalid MComparator\");\n\t\t}\n\t\treturn results;\n\t}\n\n\tpublic async mergeAndList(andList: Object[][]): Promise<Object[]> {\n\t\t// make a map\n\t\tconst SORCountMap = new Map<Object, number>();\n\n\t\t// find the shortest list\n\t\tconst shortestList = andList.reduce((shortest, currArray) => {\n\t\t\treturn currArray.length < shortest.length ? currArray : shortest;\n\t\t});\n\n\t\t// turn into a set for faster lookup\n\t\tconst shortestSet = new Set(shortestList);\n\n\t\t// add all section in shortest list to map and increment count by 1\n\t\tshortestSet.forEach((SOR) => {\n\t\t\tSORCountMap.set(SOR, (SORCountMap.get(SOR) || 0) + 1);\n\t\t});\n\n\t\t// iterate through each array of section\n\t\tfor (const currArray of andList) {\n\t\t\t// skip comparison with itself\n\t\t\tif (currArray === shortestList) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst currSet = new Set(currArray);\n\n\t\t\t// only keep sections or rooms in the shortest list that are also in the current array\n\t\t\tshortestList.forEach((SOR) => {\n\t\t\t\tif (!currSet.has(SOR)) {\n\t\t\t\t\tSORCountMap.delete(SOR); // Remove sections not found in currArray\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// filter the shortest list to include only sections present in all arrays\n\t\treturn shortestList.filter((SOR) => SORCountMap.has(SOR));\n\t}\n\n\tpublic isObject(obj: unknown): void {\n\t\tif (Array.isArray(obj)) {\n\t\t\tthrow new InsightError(\"Invalid object present\");\n\t\t}\n\t}\n\n\tpublic testRegex(input: string): RegExp {\n\t\tconst validInputRegex = /^[*]?[^*]*[*]?$/;\n\t\tif (!validInputRegex.test(input)) {\n\t\t\tthrow new InsightError(\" Asterisks (*) can only be the first or last characters of input strings\");\n\t\t}\n\t\t// fix this return, figure out what sfield is, how to match it, and how to access\n\t\tconst processedInput = input.replace(/\\*/g, \".*\");\n\t\treturn new RegExp(`^${processedInput}$`); // Use case-insensitive matching\n\t}\n\n\t// checks if the idstring is valid, if it is return the type of dataset it refers to\n\tpublic checkIDString(\n\t\tsDSList: string[],\n\t\trDSList: string[],\n\t\tsectionOrRoom: string,\n\t\tqueryingIDString: string,\n\t\tidStr: string\n\t): string {\n\t\t// check if a dataset has already been referenced if not return whether its a section or a room DS\n\t\t//console.log(queryingIDString);\n\t\tif (queryingIDString === \"\") {\n\t\t\treturn this.checkSectionOrRoom(sDSList, rDSList, idStr);\n\t\t} else if (queryingIDString !== idStr) {\n\t\t\tthrow new InsightError(\"Cannot reference multiple datasets.\");\n\t\t} else {\n\t\t\treturn sectionOrRoom;\n\t\t}\n\t}\n\n\t// checks if the idstr is in sectionsDS or roomsDS, otherwise throw error that the ds is not added\n\tpublic checkSectionOrRoom(sDSList: string[], rDSList: string[], idStr: string): string {\n\t\tif (sDSList.includes(idStr)) {\n\t\t\treturn \"section\";\n\t\t} else if (rDSList.includes(idStr)) {\n\t\t\treturn \"room\";\n\t\t} else {\n\t\t\tthrow new InsightError(`Dataset with id: ${idStr} not added.`);\n\t\t}\n\t}\n\n\t// checks if the array is a string array\n\tpublic isStringArray(value: unknown): boolean {\n\t\treturn Array.isArray(value) && value.every((item) => typeof item === \"string\");\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"a7b81d82654977687cc064824a3e7039c067d0ae","contentHash":"dea4e0df241659cc34c2bdd31bae0c0517fceab99bc75cf6b6176a74cea29148"},"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\QueryEngineFilter.ts":{"path":"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\QueryEngineFilter.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":25},"end":{"line":6,"column":52}},"4":{"start":{"line":7,"column":21},"end":{"line":7,"column":61}},"5":{"start":{"line":18,"column":8},"end":{"line":18,"column":35}},"6":{"start":{"line":19,"column":8},"end":{"line":19,"column":49}},"7":{"start":{"line":20,"column":8},"end":{"line":20,"column":43}},"8":{"start":{"line":21,"column":8},"end":{"line":21,"column":48}},"9":{"start":{"line":22,"column":8},"end":{"line":22,"column":32}},"10":{"start":{"line":23,"column":8},"end":{"line":23,"column":59}},"11":{"start":{"line":24,"column":8},"end":{"line":24,"column":56}},"12":{"start":{"line":25,"column":8},"end":{"line":25,"column":30}},"13":{"start":{"line":28,"column":8},"end":{"line":28,"column":49}},"14":{"start":{"line":29,"column":8},"end":{"line":29,"column":43}},"15":{"start":{"line":30,"column":8},"end":{"line":30,"column":31}},"16":{"start":{"line":31,"column":8},"end":{"line":31,"column":31}},"17":{"start":{"line":35,"column":8},"end":{"line":68,"column":9}},"18":{"start":{"line":36,"column":12},"end":{"line":61,"column":13}},"19":{"start":{"line":37,"column":16},"end":{"line":37,"column":68}},"20":{"start":{"line":39,"column":17},"end":{"line":61,"column":13}},"21":{"start":{"line":40,"column":16},"end":{"line":40,"column":43}},"22":{"start":{"line":41,"column":37},"end":{"line":41,"column":61}},"23":{"start":{"line":42,"column":16},"end":{"line":57,"column":17}},"24":{"start":{"line":44,"column":24},"end":{"line":46,"column":25}},"25":{"start":{"line":45,"column":28},"end":{"line":45,"column":90}},"26":{"start":{"line":47,"column":24},"end":{"line":47,"column":69}},"27":{"start":{"line":48,"column":24},"end":{"line":48,"column":30}},"28":{"start":{"line":50,"column":24},"end":{"line":50,"column":66}},"29":{"start":{"line":51,"column":24},"end":{"line":51,"column":30}},"30":{"start":{"line":53,"column":24},"end":{"line":55,"column":25}},"31":{"start":{"line":54,"column":28},"end":{"line":54,"column":104}},"32":{"start":{"line":56,"column":24},"end":{"line":56,"column":77}},"33":{"start":{"line":60,"column":16},"end":{"line":60,"column":89}},"34":{"start":{"line":64,"column":12},"end":{"line":66,"column":13}},"35":{"start":{"line":65,"column":16},"end":{"line":65,"column":26}},"36":{"start":{"line":67,"column":12},"end":{"line":67,"column":73}},"37":{"start":{"line":69,"column":8},"end":{"line":69,"column":23}},"38":{"start":{"line":72,"column":8},"end":{"line":92,"column":9}},"39":{"start":{"line":73,"column":12},"end":{"line":73,"column":36}},"40":{"start":{"line":76,"column":26},"end":{"line":76,"column":28}},"41":{"start":{"line":77,"column":12},"end":{"line":85,"column":13}},"42":{"start":{"line":78,"column":16},"end":{"line":78,"column":75}},"43":{"start":{"line":80,"column":17},"end":{"line":85,"column":13}},"44":{"start":{"line":81,"column":16},"end":{"line":81,"column":72}},"45":{"start":{"line":84,"column":16},"end":{"line":84,"column":103}},"46":{"start":{"line":86,"column":12},"end":{"line":91,"column":13}},"47":{"start":{"line":87,"column":16},"end":{"line":87,"column":88}},"48":{"start":{"line":90,"column":16},"end":{"line":90,"column":31}},"49":{"start":{"line":95,"column":8},"end":{"line":106,"column":9}},"50":{"start":{"line":96,"column":38},"end":{"line":96,"column":76}},"51":{"start":{"line":97,"column":28},"end":{"line":97,"column":51}},"52":{"start":{"line":98,"column":42},"end":{"line":98,"column":68}},"53":{"start":{"line":99,"column":12},"end":{"line":99,"column":76}},"54":{"start":{"line":99,"column":43},"end":{"line":99,"column":74}},"55":{"start":{"line":102,"column":12},"end":{"line":104,"column":13}},"56":{"start":{"line":103,"column":16},"end":{"line":103,"column":26}},"57":{"start":{"line":105,"column":12},"end":{"line":105,"column":85}},"58":{"start":{"line":109,"column":8},"end":{"line":133,"column":9}},"59":{"start":{"line":110,"column":29},"end":{"line":110,"column":47}},"60":{"start":{"line":111,"column":27},"end":{"line":111,"column":45}},"61":{"start":{"line":112,"column":12},"end":{"line":112,"column":139}},"62":{"start":{"line":113,"column":12},"end":{"line":113,"column":45}},"63":{"start":{"line":114,"column":28},"end":{"line":114,"column":51}},"64":{"start":{"line":115,"column":31},"end":{"line":115,"column":58}},"65":{"start":{"line":116,"column":12},"end":{"line":125,"column":13}},"66":{"start":{"line":117,"column":16},"end":{"line":119,"column":17}},"67":{"start":{"line":118,"column":20},"end":{"line":118,"column":81}},"68":{"start":{"line":118,"column":51},"end":{"line":118,"column":79}},"69":{"start":{"line":121,"column":17},"end":{"line":125,"column":13}},"70":{"start":{"line":122,"column":16},"end":{"line":124,"column":17}},"71":{"start":{"line":123,"column":20},"end":{"line":123,"column":81}},"72":{"start":{"line":123,"column":51},"end":{"line":123,"column":79}},"73":{"start":{"line":126,"column":12},"end":{"line":126,"column":68}},"74":{"start":{"line":129,"column":12},"end":{"line":131,"column":13}},"75":{"start":{"line":130,"column":16},"end":{"line":130,"column":26}},"76":{"start":{"line":132,"column":12},"end":{"line":132,"column":88}},"77":{"start":{"line":136,"column":8},"end":{"line":159,"column":9}},"78":{"start":{"line":137,"column":29},"end":{"line":137,"column":47}},"79":{"start":{"line":138,"column":27},"end":{"line":138,"column":45}},"80":{"start":{"line":139,"column":12},"end":{"line":139,"column":139}},"81":{"start":{"line":140,"column":12},"end":{"line":140,"column":45}},"82":{"start":{"line":141,"column":28},"end":{"line":141,"column":51}},"83":{"start":{"line":142,"column":12},"end":{"line":151,"column":13}},"84":{"start":{"line":143,"column":16},"end":{"line":145,"column":17}},"85":{"start":{"line":144,"column":20},"end":{"line":144,"column":85}},"86":{"start":{"line":147,"column":17},"end":{"line":151,"column":13}},"87":{"start":{"line":148,"column":16},"end":{"line":150,"column":17}},"88":{"start":{"line":149,"column":20},"end":{"line":149,"column":85}},"89":{"start":{"line":152,"column":12},"end":{"line":152,"column":68}},"90":{"start":{"line":155,"column":12},"end":{"line":157,"column":13}},"91":{"start":{"line":156,"column":16},"end":{"line":156,"column":26}},"92":{"start":{"line":158,"column":12},"end":{"line":158,"column":73}},"93":{"start":{"line":162,"column":8},"end":{"line":179,"column":9}},"94":{"start":{"line":163,"column":36},"end":{"line":163,"column":67}},"95":{"start":{"line":164,"column":12},"end":{"line":172,"column":13}},"96":{"start":{"line":165,"column":16},"end":{"line":165,"column":55}},"97":{"start":{"line":167,"column":17},"end":{"line":172,"column":13}},"98":{"start":{"line":168,"column":16},"end":{"line":168,"column":54}},"99":{"start":{"line":171,"column":16},"end":{"line":171,"column":84}},"100":{"start":{"line":175,"column":12},"end":{"line":177,"column":13}},"101":{"start":{"line":176,"column":16},"end":{"line":176,"column":26}},"102":{"start":{"line":178,"column":12},"end":{"line":178,"column":73}},"103":{"start":{"line":182,"column":32},"end":{"line":182,"column":34}},"104":{"start":{"line":183,"column":8},"end":{"line":185,"column":9}},"105":{"start":{"line":184,"column":12},"end":{"line":184,"column":85}},"106":{"start":{"line":186,"column":8},"end":{"line":194,"column":9}},"107":{"start":{"line":187,"column":12},"end":{"line":193,"column":13}},"108":{"start":{"line":188,"column":28},"end":{"line":188,"column":89}},"109":{"start":{"line":189,"column":16},"end":{"line":189,"column":42}},"110":{"start":{"line":192,"column":16},"end":{"line":192,"column":74}},"111":{"start":{"line":195,"column":24},"end":{"line":195,"column":58}},"112":{"start":{"line":196,"column":8},"end":{"line":198,"column":9}},"113":{"start":{"line":197,"column":12},"end":{"line":197,"column":30}},"114":{"start":{"line":199,"column":27},"end":{"line":199,"column":59}},"115":{"start":{"line":200,"column":8},"end":{"line":200,"column":26}},"116":{"start":{"line":203,"column":23},"end":{"line":203,"column":25}},"117":{"start":{"line":204,"column":8},"end":{"line":206,"column":9}},"118":{"start":{"line":205,"column":12},"end":{"line":205,"column":84}},"119":{"start":{"line":207,"column":8},"end":{"line":214,"column":9}},"120":{"start":{"line":208,"column":12},"end":{"line":213,"column":13}},"121":{"start":{"line":209,"column":16},"end":{"line":209,"column":91}},"122":{"start":{"line":212,"column":16},"end":{"line":212,"column":74}},"123":{"start":{"line":215,"column":31},"end":{"line":215,"column":56}},"124":{"start":{"line":216,"column":8},"end":{"line":216,"column":37}},"125":{"start":{"line":219,"column":0},"end":{"line":219,"column":36}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":17,"column":4},"end":{"line":17,"column":5}},"loc":{"start":{"line":17,"column":49},"end":{"line":26,"column":5}},"line":17},"2":{"name":"(anonymous_2)","decl":{"start":{"line":27,"column":4},"end":{"line":27,"column":5}},"loc":{"start":{"line":27,"column":62},"end":{"line":32,"column":5}},"line":27},"3":{"name":"(anonymous_3)","decl":{"start":{"line":33,"column":4},"end":{"line":33,"column":5}},"loc":{"start":{"line":33,"column":38},"end":{"line":70,"column":5}},"line":33},"4":{"name":"(anonymous_4)","decl":{"start":{"line":71,"column":4},"end":{"line":71,"column":5}},"loc":{"start":{"line":71,"column":23},"end":{"line":93,"column":5}},"line":71},"5":{"name":"(anonymous_5)","decl":{"start":{"line":94,"column":4},"end":{"line":94,"column":5}},"loc":{"start":{"line":94,"column":40},"end":{"line":107,"column":5}},"line":94},"6":{"name":"(anonymous_6)","decl":{"start":{"line":99,"column":34},"end":{"line":99,"column":35}},"loc":{"start":{"line":99,"column":43},"end":{"line":99,"column":74}},"line":99},"7":{"name":"(anonymous_7)","decl":{"start":{"line":108,"column":4},"end":{"line":108,"column":5}},"loc":{"start":{"line":108,"column":41},"end":{"line":134,"column":5}},"line":108},"8":{"name":"(anonymous_8)","decl":{"start":{"line":118,"column":42},"end":{"line":118,"column":43}},"loc":{"start":{"line":118,"column":51},"end":{"line":118,"column":79}},"line":118},"9":{"name":"(anonymous_9)","decl":{"start":{"line":123,"column":42},"end":{"line":123,"column":43}},"loc":{"start":{"line":123,"column":51},"end":{"line":123,"column":79}},"line":123},"10":{"name":"(anonymous_10)","decl":{"start":{"line":135,"column":4},"end":{"line":135,"column":5}},"loc":{"start":{"line":135,"column":49},"end":{"line":160,"column":5}},"line":135},"11":{"name":"(anonymous_11)","decl":{"start":{"line":161,"column":4},"end":{"line":161,"column":5}},"loc":{"start":{"line":161,"column":47},"end":{"line":180,"column":5}},"line":161},"12":{"name":"(anonymous_12)","decl":{"start":{"line":181,"column":4},"end":{"line":181,"column":5}},"loc":{"start":{"line":181,"column":27},"end":{"line":201,"column":5}},"line":181},"13":{"name":"(anonymous_13)","decl":{"start":{"line":202,"column":4},"end":{"line":202,"column":5}},"loc":{"start":{"line":202,"column":26},"end":{"line":217,"column":5}},"line":202}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":36,"column":12},"end":{"line":61,"column":13}},"type":"if","locations":[{"start":{"line":36,"column":12},"end":{"line":61,"column":13}},{"start":{"line":36,"column":12},"end":{"line":61,"column":13}}],"line":36},"4":{"loc":{"start":{"line":39,"column":17},"end":{"line":61,"column":13}},"type":"if","locations":[{"start":{"line":39,"column":17},"end":{"line":61,"column":13}},{"start":{"line":39,"column":17},"end":{"line":61,"column":13}}],"line":39},"5":{"loc":{"start":{"line":39,"column":21},"end":{"line":39,"column":99}},"type":"binary-expr","locations":[{"start":{"line":39,"column":21},"end":{"line":39,"column":60}},{"start":{"line":39,"column":64},"end":{"line":39,"column":79}},{"start":{"line":39,"column":83},"end":{"line":39,"column":99}}],"line":39},"6":{"loc":{"start":{"line":42,"column":16},"end":{"line":57,"column":17}},"type":"switch","locations":[{"start":{"line":43,"column":20},"end":{"line":48,"column":30}},{"start":{"line":49,"column":20},"end":{"line":51,"column":30}},{"start":{"line":52,"column":20},"end":{"line":56,"column":77}}],"line":42},"7":{"loc":{"start":{"line":44,"column":24},"end":{"line":46,"column":25}},"type":"if","locations":[{"start":{"line":44,"column":24},"end":{"line":46,"column":25}},{"start":{"line":44,"column":24},"end":{"line":46,"column":25}}],"line":44},"8":{"loc":{"start":{"line":53,"column":24},"end":{"line":55,"column":25}},"type":"if","locations":[{"start":{"line":53,"column":24},"end":{"line":55,"column":25}},{"start":{"line":53,"column":24},"end":{"line":55,"column":25}}],"line":53},"9":{"loc":{"start":{"line":64,"column":12},"end":{"line":66,"column":13}},"type":"if","locations":[{"start":{"line":64,"column":12},"end":{"line":66,"column":13}},{"start":{"line":64,"column":12},"end":{"line":66,"column":13}}],"line":64},"10":{"loc":{"start":{"line":64,"column":16},"end":{"line":64,"column":115}},"type":"binary-expr","locations":[{"start":{"line":64,"column":16},"end":{"line":64,"column":60}},{"start":{"line":64,"column":64},"end":{"line":64,"column":115}}],"line":64},"11":{"loc":{"start":{"line":72,"column":8},"end":{"line":92,"column":9}},"type":"if","locations":[{"start":{"line":72,"column":8},"end":{"line":92,"column":9}},{"start":{"line":72,"column":8},"end":{"line":92,"column":9}}],"line":72},"12":{"loc":{"start":{"line":77,"column":12},"end":{"line":85,"column":13}},"type":"if","locations":[{"start":{"line":77,"column":12},"end":{"line":85,"column":13}},{"start":{"line":77,"column":12},"end":{"line":85,"column":13}}],"line":77},"13":{"loc":{"start":{"line":80,"column":17},"end":{"line":85,"column":13}},"type":"if","locations":[{"start":{"line":80,"column":17},"end":{"line":85,"column":13}},{"start":{"line":80,"column":17},"end":{"line":85,"column":13}}],"line":80},"14":{"loc":{"start":{"line":86,"column":12},"end":{"line":91,"column":13}},"type":"if","locations":[{"start":{"line":86,"column":12},"end":{"line":91,"column":13}},{"start":{"line":86,"column":12},"end":{"line":91,"column":13}}],"line":86},"15":{"loc":{"start":{"line":102,"column":12},"end":{"line":104,"column":13}},"type":"if","locations":[{"start":{"line":102,"column":12},"end":{"line":104,"column":13}},{"start":{"line":102,"column":12},"end":{"line":104,"column":13}}],"line":102},"16":{"loc":{"start":{"line":102,"column":16},"end":{"line":102,"column":115}},"type":"binary-expr","locations":[{"start":{"line":102,"column":16},"end":{"line":102,"column":60}},{"start":{"line":102,"column":64},"end":{"line":102,"column":115}}],"line":102},"17":{"loc":{"start":{"line":116,"column":12},"end":{"line":125,"column":13}},"type":"if","locations":[{"start":{"line":116,"column":12},"end":{"line":125,"column":13}},{"start":{"line":116,"column":12},"end":{"line":125,"column":13}}],"line":116},"18":{"loc":{"start":{"line":117,"column":16},"end":{"line":119,"column":17}},"type":"if","locations":[{"start":{"line":117,"column":16},"end":{"line":119,"column":17}},{"start":{"line":117,"column":16},"end":{"line":119,"column":17}}],"line":117},"19":{"loc":{"start":{"line":121,"column":17},"end":{"line":125,"column":13}},"type":"if","locations":[{"start":{"line":121,"column":17},"end":{"line":125,"column":13}},{"start":{"line":121,"column":17},"end":{"line":125,"column":13}}],"line":121},"20":{"loc":{"start":{"line":122,"column":16},"end":{"line":124,"column":17}},"type":"if","locations":[{"start":{"line":122,"column":16},"end":{"line":124,"column":17}},{"start":{"line":122,"column":16},"end":{"line":124,"column":17}}],"line":122},"21":{"loc":{"start":{"line":129,"column":12},"end":{"line":131,"column":13}},"type":"if","locations":[{"start":{"line":129,"column":12},"end":{"line":131,"column":13}},{"start":{"line":129,"column":12},"end":{"line":131,"column":13}}],"line":129},"22":{"loc":{"start":{"line":129,"column":16},"end":{"line":129,"column":115}},"type":"binary-expr","locations":[{"start":{"line":129,"column":16},"end":{"line":129,"column":60}},{"start":{"line":129,"column":64},"end":{"line":129,"column":115}}],"line":129},"23":{"loc":{"start":{"line":142,"column":12},"end":{"line":151,"column":13}},"type":"if","locations":[{"start":{"line":142,"column":12},"end":{"line":151,"column":13}},{"start":{"line":142,"column":12},"end":{"line":151,"column":13}}],"line":142},"24":{"loc":{"start":{"line":143,"column":16},"end":{"line":145,"column":17}},"type":"if","locations":[{"start":{"line":143,"column":16},"end":{"line":145,"column":17}},{"start":{"line":143,"column":16},"end":{"line":145,"column":17}}],"line":143},"25":{"loc":{"start":{"line":147,"column":17},"end":{"line":151,"column":13}},"type":"if","locations":[{"start":{"line":147,"column":17},"end":{"line":151,"column":13}},{"start":{"line":147,"column":17},"end":{"line":151,"column":13}}],"line":147},"26":{"loc":{"start":{"line":148,"column":16},"end":{"line":150,"column":17}},"type":"if","locations":[{"start":{"line":148,"column":16},"end":{"line":150,"column":17}},{"start":{"line":148,"column":16},"end":{"line":150,"column":17}}],"line":148},"27":{"loc":{"start":{"line":155,"column":12},"end":{"line":157,"column":13}},"type":"if","locations":[{"start":{"line":155,"column":12},"end":{"line":157,"column":13}},{"start":{"line":155,"column":12},"end":{"line":157,"column":13}}],"line":155},"28":{"loc":{"start":{"line":155,"column":16},"end":{"line":155,"column":115}},"type":"binary-expr","locations":[{"start":{"line":155,"column":16},"end":{"line":155,"column":60}},{"start":{"line":155,"column":64},"end":{"line":155,"column":115}}],"line":155},"29":{"loc":{"start":{"line":164,"column":12},"end":{"line":172,"column":13}},"type":"if","locations":[{"start":{"line":164,"column":12},"end":{"line":172,"column":13}},{"start":{"line":164,"column":12},"end":{"line":172,"column":13}}],"line":164},"30":{"loc":{"start":{"line":167,"column":17},"end":{"line":172,"column":13}},"type":"if","locations":[{"start":{"line":167,"column":17},"end":{"line":172,"column":13}},{"start":{"line":167,"column":17},"end":{"line":172,"column":13}}],"line":167},"31":{"loc":{"start":{"line":175,"column":12},"end":{"line":177,"column":13}},"type":"if","locations":[{"start":{"line":175,"column":12},"end":{"line":177,"column":13}},{"start":{"line":175,"column":12},"end":{"line":177,"column":13}}],"line":175},"32":{"loc":{"start":{"line":175,"column":16},"end":{"line":175,"column":115}},"type":"binary-expr","locations":[{"start":{"line":175,"column":16},"end":{"line":175,"column":60}},{"start":{"line":175,"column":64},"end":{"line":175,"column":115}}],"line":175},"33":{"loc":{"start":{"line":183,"column":8},"end":{"line":185,"column":9}},"type":"if","locations":[{"start":{"line":183,"column":8},"end":{"line":185,"column":9}},{"start":{"line":183,"column":8},"end":{"line":185,"column":9}}],"line":183},"34":{"loc":{"start":{"line":187,"column":12},"end":{"line":193,"column":13}},"type":"if","locations":[{"start":{"line":187,"column":12},"end":{"line":193,"column":13}},{"start":{"line":187,"column":12},"end":{"line":193,"column":13}}],"line":187},"35":{"loc":{"start":{"line":187,"column":16},"end":{"line":187,"column":55}},"type":"binary-expr","locations":[{"start":{"line":187,"column":16},"end":{"line":187,"column":39}},{"start":{"line":187,"column":43},"end":{"line":187,"column":55}}],"line":187},"36":{"loc":{"start":{"line":196,"column":8},"end":{"line":198,"column":9}},"type":"if","locations":[{"start":{"line":196,"column":8},"end":{"line":198,"column":9}},{"start":{"line":196,"column":8},"end":{"line":198,"column":9}}],"line":196},"37":{"loc":{"start":{"line":204,"column":8},"end":{"line":206,"column":9}},"type":"if","locations":[{"start":{"line":204,"column":8},"end":{"line":206,"column":9}},{"start":{"line":204,"column":8},"end":{"line":206,"column":9}}],"line":204},"38":{"loc":{"start":{"line":208,"column":12},"end":{"line":213,"column":13}},"type":"if","locations":[{"start":{"line":208,"column":12},"end":{"line":213,"column":13}},{"start":{"line":208,"column":12},"end":{"line":213,"column":13}}],"line":208},"39":{"loc":{"start":{"line":208,"column":16},"end":{"line":208,"column":55}},"type":"binary-expr","locations":[{"start":{"line":208,"column":16},"end":{"line":208,"column":39}},{"start":{"line":208,"column":43},"end":{"line":208,"column":55}}],"line":208}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":225,"6":225,"7":225,"8":225,"9":225,"10":225,"11":225,"12":225,"13":0,"14":0,"15":0,"16":0,"17":266,"18":266,"19":66,"20":200,"21":195,"22":192,"23":191,"24":47,"25":2,"26":45,"27":45,"28":19,"29":19,"30":125,"31":2,"32":123,"33":5,"34":13,"35":12,"36":1,"37":253,"38":172,"39":0,"40":172,"41":172,"42":119,"43":53,"44":53,"45":0,"46":172,"47":0,"48":172,"49":19,"50":19,"51":19,"52":19,"53":19,"54":1227628,"55":0,"56":0,"57":0,"58":45,"59":45,"60":45,"61":45,"62":39,"63":39,"64":39,"65":37,"66":33,"67":30,"68":1938360,"69":4,"70":4,"71":2,"72":728,"73":5,"74":13,"75":13,"76":0,"77":123,"78":123,"79":123,"80":123,"81":114,"82":114,"83":114,"84":65,"85":63,"86":49,"87":49,"88":47,"89":4,"90":13,"91":13,"92":0,"93":66,"94":66,"95":64,"96":53,"97":11,"98":11,"99":0,"100":2,"101":2,"102":0,"103":53,"104":53,"105":2,"106":51,"107":103,"108":102,"109":102,"110":1,"111":50,"112":34,"113":2,"114":32,"115":32,"116":11,"117":11,"118":0,"119":11,"120":14,"121":13,"122":1,"123":10,"124":9,"125":1},"f":{"0":1,"1":225,"2":0,"3":266,"4":172,"5":19,"6":1227628,"7":45,"8":1938360,"9":728,"10":123,"11":66,"12":53,"13":11},"b":{"0":[1,1,1],"1":[1,0],"2":[1,1],"3":[66,200],"4":[195,5],"5":[200,74,26],"6":[47,19,125],"7":[2,45],"8":[2,123],"9":[12,1],"10":[13,1],"11":[0,172],"12":[119,53],"13":[53,0],"14":[0,172],"15":[0,0],"16":[0,0],"17":[33,4],"18":[30,3],"19":[4,0],"20":[2,2],"21":[13,0],"22":[13,0],"23":[65,49],"24":[63,2],"25":[49,0],"26":[47,2],"27":[13,0],"28":[13,0],"29":[53,11],"30":[11,0],"31":[2,0],"32":[2,0],"33":[2,51],"34":[102,1],"35":[103,102],"36":[2,32],"37":[0,11],"38":[13,1],"39":[14,13]},"inputSourceMap":{"version":3,"file":"C:/Users/oreak/IdeaProjects/project_team059/src/controller/QueryEngineFilter.ts","sources":["C:/Users/oreak/IdeaProjects/project_team059/src/controller/QueryEngineFilter.ts"],"names":[],"mappings":"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","sourcesContent":["import { InsightError, ResultTooLargeError } from \"./IInsightFacade\";\nimport QueryUtils from \"./QueryUtils\";\nimport Section from \"./sections/Section\";\nimport Room from \"./rooms/Room\";\n\nexport default class QueryEngineFilter {\n\tpublic queryingIDString: string;\n\tprivate sectionsDatabase: Map<string, Section[]>;\n\tprivate roomsDatabase: Map<string, Room[]>;\n\tprivate utils: QueryUtils;\n\tpublic sectionOrRoom: string;\n\tprivate sDSList: string[];\n\tprivate rDSList: string[];\n\tprivate currDataset: Object[];\n\n\tconstructor(sectionsDatabase: Map<string, Section[]>, roomsDatabase: Map<string, Room[]>) {\n\t\tthis.queryingIDString = \"\";\n\t\tthis.sectionsDatabase = sectionsDatabase;\n\t\tthis.roomsDatabase = roomsDatabase;\n\t\tthis.utils = new QueryUtils();\n\t\tthis.sectionOrRoom = \"\";\n\t\tthis.sDSList = Array.from(sectionsDatabase.keys());\n\t\tthis.rDSList = Array.from(roomsDatabase.keys());\n\t\tthis.currDataset = [];\n\t}\n\n\tpublic setDBs(\n\t\tsectionsDatabase: Map<string, Section[]>,\n\t\troomsDatabase: Map<string, Room[]>,\n\t\tsDSList: string[],\n\t\trDSList: string[]\n\t): void {\n\t\tthis.sectionsDatabase = sectionsDatabase;\n\t\tthis.roomsDatabase = roomsDatabase;\n\t\tthis.rDSList = rDSList;\n\t\tthis.sDSList = sDSList;\n\t}\n\n\tpublic async handleFilter(filter: string, value: unknown): Promise<Object[]> {\n\t\tlet promise: Promise<Object[]>;\n\t\ttry {\n\t\t\t//console.log(\"Filter running\");\n\t\t\t//console.log(filter);\n\t\t\t//console.log(this.sDSList, this.rDSList)\n\t\t\tif (this.utils.logicComparator.includes(filter)) {\n\t\t\t\tpromise = this.handleLogicComparison(filter, value);\n\t\t\t} else if (this.utils.mComparator.includes(filter) || filter === \"IS\" || filter === \"NOT\") {\n\t\t\t\tthis.utils.isObject(value);\n\t\t\t\tconst [key, input] = Object.entries(value as Record<string, any>)[0];\n\t\t\t\t//console.log(key)\n\t\t\t\tswitch (filter) {\n\t\t\t\t\tcase \"IS\":\n\t\t\t\t\t\tif (typeof input !== \"string\") {\n\t\t\t\t\t\t\tthrow new InsightError(\"Invalid skey type.\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpromise = this.handleSComparison(key, input);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"NOT\":\n\t\t\t\t\t\tpromise = this.handleNegation(key, input);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault: // mComparator\n\t\t\t\t\t\tif (typeof input !== \"number\") {\n\t\t\t\t\t\t\tthrow new InsightError(`Invalid input type for ${filter}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpromise = this.handleMComparison(filter, key, input);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow new InsightError(`Invalid filter key: ${filter}`);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tif (err instanceof InsightError || err instanceof ResultTooLargeError) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\tthrow new InsightError(\"Unexpected error.\");\n\t\t}\n\t\treturn promise;\n\t}\n\n\tprivate async getDataset(): Promise<Object[]> {\n\t\tif (this.currDataset.length !== 0) {\n\t\t\treturn this.currDataset;\n\t\t} else {\n\t\t\tlet dataset: Object[] | undefined = [];\n\t\t\tif (this.sectionOrRoom === \"section\") {\n\t\t\t\tdataset = this.sectionsDatabase.get(this.queryingIDString);\n\t\t\t} else if (this.sectionOrRoom === \"room\") {\n\t\t\t\tdataset = this.roomsDatabase.get(this.queryingIDString);\n\t\t\t} else {\n\t\t\t\tthrow new InsightError(\"sections or room not defined in getDataset.\");\n\t\t\t}\n\t\t\tif (dataset === undefined) {\n\t\t\t\t// should not be possible given current implementation of other methods for query\n\t\t\t\tthrow new InsightError(\"Can't find querying dataset.\");\n\t\t\t} else {\n\t\t\t\t//console.log(dataset.length);\n\t\t\t\treturn dataset;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async handleNegation(filter: string, value: unknown): Promise<Object[]> {\n\t\ttry {\n\t\t\tconst nonNegatedResults = await this.handleFilter(filter, value);\n\t\t\tconst dataset = await this.getDataset();\n\t\t\t// use a set instead -> faster?\n\t\t\tconst resolvedNonNegatedSet = new Set(nonNegatedResults);\n\n\t\t\t// Filter using the Set for faster lookups\n\t\t\treturn dataset.filter((SOR) => !resolvedNonNegatedSet.has(SOR));\n\t\t} catch (err) {\n\t\t\tif (err instanceof InsightError || err instanceof ResultTooLargeError) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\tthrow new InsightError(\"Unexpected error in Negation.\");\n\t\t}\n\t}\n\n\tprivate async handleSComparison(skey: string, input: string): Promise<Object[]> {\n\t\ttry {\n\t\t\t// split on underscore\n\t\t\tconst idstring = skey.split(\"_\")[0];\n\t\t\tconst sfield = skey.split(\"_\")[1];\n\n\t\t\t// check if database contains dataset with idstring\n\t\t\t//this.utils.checkIDString(this.sectionsDatabase, this.queryingIDString, idstring);\n\t\t\tthis.sectionOrRoom = this.utils.checkIDString(\n\t\t\t\tthis.sDSList,\n\t\t\t\tthis.rDSList,\n\t\t\t\tthis.sectionOrRoom,\n\t\t\t\tthis.queryingIDString,\n\t\t\t\tidstring\n\t\t\t);\n\t\t\tthis.queryingIDString = idstring;\n\n\t\t\t// query based on idstring\n\t\t\tconst dataset = await this.getDataset();\n\t\t\tconst inputRegex = this.utils.testRegex(input); // Use case-insensitive matching\n\t\t\tif (this.sectionOrRoom === \"section\") {\n\t\t\t\tif (this.utils.sFieldsSection.includes(sfield)) {\n\t\t\t\t\treturn dataset.filter((SOR) => inputRegex.test((SOR as Record<string, any>)[sfield]));\n\t\t\t\t}\n\t\t\t} else if (this.sectionOrRoom === \"room\") {\n\t\t\t\tif (this.utils.sFieldsRoom.includes(sfield)) {\n\t\t\t\t\treturn dataset.filter((SOR) => inputRegex.test((SOR as Record<string, any>)[sfield]));\n\t\t\t\t}\n\t\t\t}\n\t\t\tthrow new InsightError(\"Invalid sKey\");\n\t\t\t/*\n\t\t\tif (this.utils.sFields.includes(sfield)) {\n\t\t\t\tconst fieldIndex = this.utils.sFields.indexOf(sfield);\n\t\t\t\tconst inputRegex = this.utils.testRegex(input); // Use case-insensitive matching\n\t\t\t\treturn datasetSections.filter((section) => inputRegex.test(section.getSFieldByIndex(fieldIndex)));\n\t\t\t} else {\n\t\t\t\tthrow new InsightError(\"Invalid sKey\");\n\t\t\t}*/\n\t\t} catch (err) {\n\t\t\tif (err instanceof InsightError || err instanceof ResultTooLargeError) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\tthrow new InsightError(\"Unexpected error in SComparison.\");\n\t\t}\n\t}\n\n\tprivate async handleMComparison(filter: string, mkey: string, input: number): Promise<Object[]> {\n\t\t//console.log(\"HANDLING MCOMPARISON\");\n\t\t//console.log(\"mkey: \" + mkey);\n\t\t//console.log(\"input: \" + input);\n\t\ttry {\n\t\t\tconst idstring = mkey.split(\"_\")[0];\n\t\t\tconst mfield = mkey.split(\"_\")[1];\n\n\t\t\t// check if database contains dataset with idstring\n\t\t\t//this.utils.checkIDString(this.sectionsDatabase, this.queryingIDString, idstring);\n\t\t\tthis.sectionOrRoom = this.utils.checkIDString(\n\t\t\t\tthis.sDSList,\n\t\t\t\tthis.rDSList,\n\t\t\t\tthis.sectionOrRoom,\n\t\t\t\tthis.queryingIDString,\n\t\t\t\tidstring\n\t\t\t);\n\t\t\tthis.queryingIDString = idstring;\n\n\t\t\tconst dataset = await this.getDataset();\n\t\t\tif (this.sectionOrRoom === \"section\") {\n\t\t\t\tif (this.utils.mFieldsSection.includes(mfield)) {\n\t\t\t\t\treturn this.utils.filterMCompare(dataset, filter, mfield, input);\n\t\t\t\t}\n\t\t\t} else if (this.sectionOrRoom === \"room\") {\n\t\t\t\tif (this.utils.mFieldsRoom.includes(mfield)) {\n\t\t\t\t\treturn this.utils.filterMCompare(dataset, filter, mfield, input);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthrow new InsightError(\"Invalid mKey\");\n\t\t\t/*\n\t\t\tif (this.utils.mFields.includes(mfield)) {\n\t\t\t\tconst fieldIndex = this.utils.mFields.indexOf(mfield);\n\t\t\t\treturn this.utils.filterMCompare(datasetSections, filter, fieldIndex, input);\n\t\t\t} else {\n\t\t\t\tthrow new InsightError(\"Invalid mKey\");\n\t\t\t}*/\n\t\t} catch (err) {\n\t\t\tif (err instanceof InsightError || err instanceof ResultTooLargeError) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\tthrow new InsightError(\"Unexpected error.\");\n\t\t}\n\t}\n\n\tprivate async handleLogicComparison(filter: string, value: unknown): Promise<Object[]> {\n\t\ttry {\n\t\t\tconst comparisonArray: unknown[] = this.utils.coerceToArray(value);\n\t\t\tif (filter === \"AND\") {\n\t\t\t\treturn this.handleAND(comparisonArray);\n\t\t\t} else if (filter === \"OR\") {\n\t\t\t\treturn this.handleOR(comparisonArray);\n\t\t\t} else {\n\t\t\t\tthrow new InsightError(\"Invalid Logic Comparator\");\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tif (err instanceof InsightError || err instanceof ResultTooLargeError) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\tthrow new InsightError(\"Unexpected error.\");\n\t\t}\n\t}\n\n\tprivate async handleAND(value: unknown[]): Promise<Object[]> {\n\t\tconst andListPromises: Promise<Object[]>[] = [];\n\t\tif (value.length === 0) {\n\t\t\tthrow new InsightError(\"AND must be a non-empty array\");\n\t\t}\n\t\tfor (const obj of value) {\n\t\t\tif (typeof obj === \"object\" && obj !== null) {\n\t\t\t\tconst key: Promise<Object[]> = this.handleFilter(\n\t\t\t\t\tObject.keys(obj)[0] as string,\n\t\t\t\t\tObject.values(obj)[0] as unknown\n\t\t\t\t);\n\t\t\t\tandListPromises.push(key);\n\t\t\t} else {\n\t\t\t\tthrow new InsightError(\"Invalid Object\");\n\t\t\t}\n\t\t}\n\t\tconst andList = await Promise.all(andListPromises);\n\t\t/*console.log(andList.length);\n\t\tfor (const list of andList) {\n\t\t\tconsole.log(list.length);\n\t\t}*/\n\t\t// only one filter applied\n\t\tif (andList.length === 1) {\n\t\t\treturn andList[0];\n\t\t}\n\t\tconst mergedList = this.utils.mergeAndList(andList);\n\t\t//console.log((await mergedList).length);\n\t\treturn mergedList;\n\t}\n\n\tprivate async handleOR(value: unknown[]): Promise<Object[]> {\n\t\tconst orList: Promise<Object[]>[] = [];\n\t\tif (value.length === 0) {\n\t\t\tthrow new InsightError(\"OR must be a non-empty array\");\n\t\t}\n\n\t\tfor (const obj of value) {\n\t\t\tif (typeof obj === \"object\" && obj !== null) {\n\t\t\t\torList.push(this.handleFilter(Object.keys(obj)[0] as string, Object.values(obj)[0] as unknown));\n\t\t\t} else {\n\t\t\t\tthrow new InsightError(\"Invalid Object\");\n\t\t\t}\n\t\t}\n\t\tconst resolvedOrList = await Promise.all(orList);\n\t\treturn resolvedOrList.flat();\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"20de4ab5726ddd6b9068ea7533adddfa5d7234ce","contentHash":"5749b8fa23f53e232ed567ad3e691e01f8905d0ac98c6e0b68d5088cb828ffa9"},"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\QueryAggregation.ts":{"path":"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\QueryAggregation.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":21},"end":{"line":6,"column":61}},"4":{"start":{"line":7,"column":25},"end":{"line":7,"column":52}},"5":{"start":{"line":8,"column":21},"end":{"line":8,"column":59}},"6":{"start":{"line":20,"column":8},"end":{"line":20,"column":49}},"7":{"start":{"line":21,"column":8},"end":{"line":21,"column":43}},"8":{"start":{"line":22,"column":8},"end":{"line":22,"column":48}},"9":{"start":{"line":23,"column":8},"end":{"line":23,"column":32}},"10":{"start":{"line":24,"column":8},"end":{"line":24,"column":35}},"11":{"start":{"line":25,"column":8},"end":{"line":25,"column":59}},"12":{"start":{"line":26,"column":8},"end":{"line":26,"column":56}},"13":{"start":{"line":27,"column":8},"end":{"line":27,"column":28}},"14":{"start":{"line":28,"column":8},"end":{"line":28,"column":28}},"15":{"start":{"line":31,"column":8},"end":{"line":31,"column":49}},"16":{"start":{"line":32,"column":8},"end":{"line":32,"column":43}},"17":{"start":{"line":33,"column":8},"end":{"line":33,"column":31}},"18":{"start":{"line":34,"column":8},"end":{"line":34,"column":31}},"19":{"start":{"line":37,"column":8},"end":{"line":37,"column":43}},"20":{"start":{"line":38,"column":8},"end":{"line":38,"column":49}},"21":{"start":{"line":39,"column":22},"end":{"line":39,"column":24}},"22":{"start":{"line":40,"column":29},"end":{"line":40,"column":31}},"23":{"start":{"line":41,"column":8},"end":{"line":41,"column":58}},"24":{"start":{"line":42,"column":8},"end":{"line":47,"column":9}},"25":{"start":{"line":43,"column":12},"end":{"line":43,"column":46}},"26":{"start":{"line":46,"column":12},"end":{"line":46,"column":34}},"27":{"start":{"line":48,"column":8},"end":{"line":48,"column":57}},"28":{"start":{"line":49,"column":8},"end":{"line":49,"column":30}},"29":{"start":{"line":52,"column":8},"end":{"line":71,"column":15}},"30":{"start":{"line":53,"column":12},"end":{"line":69,"column":20}},"31":{"start":{"line":54,"column":30},"end":{"line":54,"column":47}},"32":{"start":{"line":55,"column":36},"end":{"line":55,"column":46}},"33":{"start":{"line":56,"column":37},"end":{"line":56,"column":54}},"34":{"start":{"line":57,"column":16},"end":{"line":67,"column":17}},"35":{"start":{"line":58,"column":20},"end":{"line":60,"column":21}},"36":{"start":{"line":59,"column":24},"end":{"line":59,"column":55}},"37":{"start":{"line":61,"column":20},"end":{"line":61,"column":56}},"38":{"start":{"line":64,"column":20},"end":{"line":66,"column":21}},"39":{"start":{"line":65,"column":24},"end":{"line":65,"column":55}},"40":{"start":{"line":68,"column":16},"end":{"line":68,"column":49}},"41":{"start":{"line":70,"column":12},"end":{"line":70,"column":23}},"42":{"start":{"line":74,"column":22},"end":{"line":74,"column":24}},"43":{"start":{"line":75,"column":8},"end":{"line":83,"column":9}},"44":{"start":{"line":76,"column":12},"end":{"line":76,"column":71}},"45":{"start":{"line":78,"column":13},"end":{"line":83,"column":9}},"46":{"start":{"line":79,"column":12},"end":{"line":79,"column":68}},"47":{"start":{"line":82,"column":12},"end":{"line":82,"column":99}},"48":{"start":{"line":84,"column":8},"end":{"line":89,"column":9}},"49":{"start":{"line":85,"column":12},"end":{"line":85,"column":84}},"50":{"start":{"line":88,"column":12},"end":{"line":88,"column":27}},"51":{"start":{"line":92,"column":26},"end":{"line":92,"column":28}},"52":{"start":{"line":93,"column":8},"end":{"line":116,"column":9}},"53":{"start":{"line":94,"column":29},"end":{"line":94,"column":60}},"54":{"start":{"line":95,"column":12},"end":{"line":112,"column":13}},"55":{"start":{"line":96,"column":16},"end":{"line":96,"column":91}},"56":{"start":{"line":99,"column":16},"end":{"line":111,"column":17}},"57":{"start":{"line":100,"column":35},"end":{"line":100,"column":46}},"58":{"start":{"line":101,"column":34},"end":{"line":101,"column":54}},"59":{"start":{"line":102,"column":37},"end":{"line":102,"column":57}},"60":{"start":{"line":103,"column":20},"end":{"line":103,"column":147}},"61":{"start":{"line":104,"column":20},"end":{"line":104,"column":53}},"62":{"start":{"line":105,"column":20},"end":{"line":110,"column":21}},"63":{"start":{"line":106,"column":24},"end":{"line":106,"column":47}},"64":{"start":{"line":109,"column":24},"end":{"line":109,"column":98}},"65":{"start":{"line":115,"column":12},"end":{"line":115,"column":84}},"66":{"start":{"line":117,"column":8},"end":{"line":117,"column":25}},"67":{"start":{"line":120,"column":8},"end":{"line":132,"column":9}},"68":{"start":{"line":121,"column":12},"end":{"line":123,"column":13}},"69":{"start":{"line":122,"column":16},"end":{"line":122,"column":28}},"70":{"start":{"line":125,"column":13},"end":{"line":132,"column":9}},"71":{"start":{"line":126,"column":12},"end":{"line":128,"column":13}},"72":{"start":{"line":127,"column":16},"end":{"line":127,"column":28}},"73":{"start":{"line":131,"column":12},"end":{"line":131,"column":81}},"74":{"start":{"line":133,"column":8},"end":{"line":133,"column":21}},"75":{"start":{"line":136,"column":33},"end":{"line":136,"column":35}},"76":{"start":{"line":137,"column":25},"end":{"line":137,"column":27}},"77":{"start":{"line":138,"column":8},"end":{"line":138,"column":55}},"78":{"start":{"line":139,"column":8},"end":{"line":139,"column":49}},"79":{"start":{"line":140,"column":8},"end":{"line":140,"column":89}},"80":{"start":{"line":141,"column":8},"end":{"line":141,"column":34}},"81":{"start":{"line":144,"column":24},"end":{"line":144,"column":26}},"82":{"start":{"line":145,"column":8},"end":{"line":155,"column":9}},"83":{"start":{"line":146,"column":27},"end":{"line":146,"column":41}},"84":{"start":{"line":147,"column":26},"end":{"line":147,"column":73}},"85":{"start":{"line":148,"column":12},"end":{"line":148,"column":32}},"86":{"start":{"line":151,"column":12},"end":{"line":154,"column":13}},"87":{"start":{"line":152,"column":35},"end":{"line":152,"column":58}},"88":{"start":{"line":153,"column":16},"end":{"line":153,"column":129}},"89":{"start":{"line":156,"column":8},"end":{"line":156,"column":23}},"90":{"start":{"line":159,"column":22},"end":{"line":159,"column":24}},"91":{"start":{"line":160,"column":8},"end":{"line":162,"column":9}},"92":{"start":{"line":160,"column":21},"end":{"line":160,"column":22}},"93":{"start":{"line":161,"column":12},"end":{"line":161,"column":100}},"94":{"start":{"line":163,"column":8},"end":{"line":165,"column":9}},"95":{"start":{"line":164,"column":12},"end":{"line":164,"column":108}},"96":{"start":{"line":166,"column":8},"end":{"line":166,"column":21}},"97":{"start":{"line":169,"column":8},"end":{"line":174,"column":9}},"98":{"start":{"line":170,"column":12},"end":{"line":170,"column":36}},"99":{"start":{"line":173,"column":12},"end":{"line":173,"column":28}},"100":{"start":{"line":177,"column":22},"end":{"line":177,"column":45}},"101":{"start":{"line":178,"column":32},"end":{"line":178,"column":34}},"102":{"start":{"line":179,"column":25},"end":{"line":179,"column":26}},"103":{"start":{"line":180,"column":8},"end":{"line":182,"column":9}},"104":{"start":{"line":181,"column":12},"end":{"line":181,"column":45}},"105":{"start":{"line":183,"column":8},"end":{"line":214,"column":9}},"106":{"start":{"line":184,"column":12},"end":{"line":205,"column":13}},"107":{"start":{"line":185,"column":16},"end":{"line":185,"column":52}},"108":{"start":{"line":187,"column":17},"end":{"line":205,"column":13}},"109":{"start":{"line":188,"column":16},"end":{"line":188,"column":52}},"110":{"start":{"line":190,"column":17},"end":{"line":205,"column":13}},"111":{"start":{"line":191,"column":30},"end":{"line":191,"column":131}},"112":{"start":{"line":191,"column":67},"end":{"line":191,"column":101}},"113":{"start":{"line":192,"column":32},"end":{"line":192,"column":54}},"114":{"start":{"line":193,"column":28},"end":{"line":193,"column":54}},"115":{"start":{"line":194,"column":16},"end":{"line":194,"column":53}},"116":{"start":{"line":196,"column":17},"end":{"line":205,"column":13}},"117":{"start":{"line":197,"column":28},"end":{"line":197,"column":137}},"118":{"start":{"line":197,"column":72},"end":{"line":197,"column":106}},"119":{"start":{"line":198,"column":16},"end":{"line":198,"column":53}},"120":{"start":{"line":200,"column":17},"end":{"line":205,"column":13}},"121":{"start":{"line":201,"column":16},"end":{"line":201,"column":67}},"122":{"start":{"line":204,"column":16},"end":{"line":204,"column":79}},"123":{"start":{"line":208,"column":12},"end":{"line":213,"column":13}},"124":{"start":{"line":209,"column":16},"end":{"line":209,"column":67}},"125":{"start":{"line":212,"column":16},"end":{"line":212,"column":79}},"126":{"start":{"line":217,"column":28},"end":{"line":217,"column":51}},"127":{"start":{"line":218,"column":8},"end":{"line":236,"column":9}},"128":{"start":{"line":219,"column":12},"end":{"line":224,"column":13}},"129":{"start":{"line":220,"column":16},"end":{"line":220,"column":32}},"130":{"start":{"line":223,"column":16},"end":{"line":223,"column":32}},"131":{"start":{"line":226,"column":13},"end":{"line":236,"column":9}},"132":{"start":{"line":227,"column":12},"end":{"line":232,"column":13}},"133":{"start":{"line":228,"column":16},"end":{"line":228,"column":32}},"134":{"start":{"line":231,"column":16},"end":{"line":231,"column":32}},"135":{"start":{"line":235,"column":12},"end":{"line":235,"column":83}},"136":{"start":{"line":239,"column":27},"end":{"line":239,"column":29}},"137":{"start":{"line":240,"column":25},"end":{"line":240,"column":56}},"138":{"start":{"line":241,"column":35},"end":{"line":241,"column":44}},"139":{"start":{"line":242,"column":8},"end":{"line":262,"column":9}},"140":{"start":{"line":243,"column":12},"end":{"line":261,"column":13}},"141":{"start":{"line":244,"column":16},"end":{"line":244,"column":83}},"142":{"start":{"line":247,"column":32},"end":{"line":247,"column":44}},"143":{"start":{"line":248,"column":16},"end":{"line":250,"column":17}},"144":{"start":{"line":249,"column":20},"end":{"line":249,"column":99}},"145":{"start":{"line":251,"column":33},"end":{"line":251,"column":56}},"146":{"start":{"line":252,"column":41},"end":{"line":252,"column":66}},"147":{"start":{"line":253,"column":16},"end":{"line":258,"column":17}},"148":{"start":{"line":254,"column":20},"end":{"line":254,"column":100}},"149":{"start":{"line":256,"column":21},"end":{"line":258,"column":17}},"150":{"start":{"line":257,"column":20},"end":{"line":257,"column":96}},"151":{"start":{"line":259,"column":40},"end":{"line":259,"column":79}},"152":{"start":{"line":260,"column":16},"end":{"line":260,"column":55}},"153":{"start":{"line":263,"column":8},"end":{"line":263,"column":26}},"154":{"start":{"line":266,"column":8},"end":{"line":286,"column":9}},"155":{"start":{"line":267,"column":12},"end":{"line":267,"column":78}},"156":{"start":{"line":270,"column":40},"end":{"line":270,"column":64}},"157":{"start":{"line":271,"column":12},"end":{"line":273,"column":13}},"158":{"start":{"line":272,"column":16},"end":{"line":272,"column":93}},"159":{"start":{"line":274,"column":26},"end":{"line":274,"column":83}},"160":{"start":{"line":275,"column":24},"end":{"line":275,"column":61}},"161":{"start":{"line":276,"column":12},"end":{"line":278,"column":13}},"162":{"start":{"line":277,"column":16},"end":{"line":277,"column":89}},"163":{"start":{"line":279,"column":26},"end":{"line":279,"column":43}},"164":{"start":{"line":280,"column":12},"end":{"line":285,"column":13}},"165":{"start":{"line":281,"column":16},"end":{"line":281,"column":44}},"166":{"start":{"line":284,"column":16},"end":{"line":284,"column":84}},"167":{"start":{"line":289,"column":8},"end":{"line":300,"column":9}},"168":{"start":{"line":290,"column":12},"end":{"line":290,"column":85}},"169":{"start":{"line":293,"column":29},"end":{"line":293,"column":42}},"170":{"start":{"line":294,"column":12},"end":{"line":299,"column":13}},"171":{"start":{"line":295,"column":16},"end":{"line":295,"column":32}},"172":{"start":{"line":298,"column":16},"end":{"line":298,"column":84}},"173":{"start":{"line":303,"column":0},"end":{"line":303,"column":35}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":19,"column":4},"end":{"line":19,"column":5}},"loc":{"start":{"line":19,"column":49},"end":{"line":29,"column":5}},"line":19},"2":{"name":"(anonymous_2)","decl":{"start":{"line":30,"column":4},"end":{"line":30,"column":5}},"loc":{"start":{"line":30,"column":62},"end":{"line":35,"column":5}},"line":30},"3":{"name":"(anonymous_3)","decl":{"start":{"line":36,"column":4},"end":{"line":36,"column":5}},"loc":{"start":{"line":36,"column":87},"end":{"line":50,"column":5}},"line":36},"4":{"name":"(anonymous_4)","decl":{"start":{"line":51,"column":4},"end":{"line":51,"column":5}},"loc":{"start":{"line":51,"column":31},"end":{"line":72,"column":5}},"line":51},"5":{"name":"(anonymous_5)","decl":{"start":{"line":52,"column":30},"end":{"line":52,"column":31}},"loc":{"start":{"line":52,"column":44},"end":{"line":71,"column":9}},"line":52},"6":{"name":"(anonymous_6)","decl":{"start":{"line":53,"column":34},"end":{"line":53,"column":35}},"loc":{"start":{"line":53,"column":61},"end":{"line":69,"column":13}},"line":53},"7":{"name":"(anonymous_7)","decl":{"start":{"line":73,"column":4},"end":{"line":73,"column":5}},"loc":{"start":{"line":73,"column":23},"end":{"line":90,"column":5}},"line":73},"8":{"name":"(anonymous_8)","decl":{"start":{"line":91,"column":4},"end":{"line":91,"column":5}},"loc":{"start":{"line":91,"column":32},"end":{"line":118,"column":5}},"line":91},"9":{"name":"(anonymous_9)","decl":{"start":{"line":119,"column":4},"end":{"line":119,"column":5}},"loc":{"start":{"line":119,"column":25},"end":{"line":134,"column":5}},"line":119},"10":{"name":"(anonymous_10)","decl":{"start":{"line":135,"column":4},"end":{"line":135,"column":5}},"loc":{"start":{"line":135,"column":45},"end":{"line":142,"column":5}},"line":135},"11":{"name":"(anonymous_11)","decl":{"start":{"line":143,"column":4},"end":{"line":143,"column":5}},"loc":{"start":{"line":143,"column":79},"end":{"line":157,"column":5}},"line":143},"12":{"name":"(anonymous_12)","decl":{"start":{"line":158,"column":4},"end":{"line":158,"column":5}},"loc":{"start":{"line":158,"column":47},"end":{"line":167,"column":5}},"line":158},"13":{"name":"(anonymous_13)","decl":{"start":{"line":168,"column":4},"end":{"line":168,"column":5}},"loc":{"start":{"line":168,"column":49},"end":{"line":175,"column":5}},"line":168},"14":{"name":"(anonymous_14)","decl":{"start":{"line":176,"column":4},"end":{"line":176,"column":5}},"loc":{"start":{"line":176,"column":45},"end":{"line":215,"column":5}},"line":176},"15":{"name":"(anonymous_15)","decl":{"start":{"line":191,"column":53},"end":{"line":191,"column":54}},"loc":{"start":{"line":191,"column":67},"end":{"line":191,"column":101}},"line":191},"16":{"name":"(anonymous_16)","decl":{"start":{"line":197,"column":58},"end":{"line":197,"column":59}},"loc":{"start":{"line":197,"column":72},"end":{"line":197,"column":106}},"line":197},"17":{"name":"(anonymous_17)","decl":{"start":{"line":216,"column":4},"end":{"line":216,"column":5}},"loc":{"start":{"line":216,"column":30},"end":{"line":237,"column":5}},"line":216},"18":{"name":"(anonymous_18)","decl":{"start":{"line":238,"column":4},"end":{"line":238,"column":5}},"loc":{"start":{"line":238,"column":33},"end":{"line":264,"column":5}},"line":238},"19":{"name":"(anonymous_19)","decl":{"start":{"line":265,"column":4},"end":{"line":265,"column":5}},"loc":{"start":{"line":265,"column":39},"end":{"line":287,"column":5}},"line":265},"20":{"name":"(anonymous_20)","decl":{"start":{"line":288,"column":4},"end":{"line":288,"column":5}},"loc":{"start":{"line":288,"column":27},"end":{"line":301,"column":5}},"line":288}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":42,"column":8},"end":{"line":47,"column":9}},"type":"if","locations":[{"start":{"line":42,"column":8},"end":{"line":47,"column":9}},{"start":{"line":42,"column":8},"end":{"line":47,"column":9}}],"line":42},"4":{"loc":{"start":{"line":57,"column":16},"end":{"line":67,"column":17}},"type":"if","locations":[{"start":{"line":57,"column":16},"end":{"line":67,"column":17}},{"start":{"line":57,"column":16},"end":{"line":67,"column":17}}],"line":57},"5":{"loc":{"start":{"line":58,"column":20},"end":{"line":60,"column":21}},"type":"if","locations":[{"start":{"line":58,"column":20},"end":{"line":60,"column":21}},{"start":{"line":58,"column":20},"end":{"line":60,"column":21}}],"line":58},"6":{"loc":{"start":{"line":64,"column":20},"end":{"line":66,"column":21}},"type":"if","locations":[{"start":{"line":64,"column":20},"end":{"line":66,"column":21}},{"start":{"line":64,"column":20},"end":{"line":66,"column":21}}],"line":64},"7":{"loc":{"start":{"line":75,"column":8},"end":{"line":83,"column":9}},"type":"if","locations":[{"start":{"line":75,"column":8},"end":{"line":83,"column":9}},{"start":{"line":75,"column":8},"end":{"line":83,"column":9}}],"line":75},"8":{"loc":{"start":{"line":78,"column":13},"end":{"line":83,"column":9}},"type":"if","locations":[{"start":{"line":78,"column":13},"end":{"line":83,"column":9}},{"start":{"line":78,"column":13},"end":{"line":83,"column":9}}],"line":78},"9":{"loc":{"start":{"line":84,"column":8},"end":{"line":89,"column":9}},"type":"if","locations":[{"start":{"line":84,"column":8},"end":{"line":89,"column":9}},{"start":{"line":84,"column":8},"end":{"line":89,"column":9}}],"line":84},"10":{"loc":{"start":{"line":93,"column":8},"end":{"line":116,"column":9}},"type":"if","locations":[{"start":{"line":93,"column":8},"end":{"line":116,"column":9}},{"start":{"line":93,"column":8},"end":{"line":116,"column":9}}],"line":93},"11":{"loc":{"start":{"line":95,"column":12},"end":{"line":112,"column":13}},"type":"if","locations":[{"start":{"line":95,"column":12},"end":{"line":112,"column":13}},{"start":{"line":95,"column":12},"end":{"line":112,"column":13}}],"line":95},"12":{"loc":{"start":{"line":105,"column":20},"end":{"line":110,"column":21}},"type":"if","locations":[{"start":{"line":105,"column":20},"end":{"line":110,"column":21}},{"start":{"line":105,"column":20},"end":{"line":110,"column":21}}],"line":105},"13":{"loc":{"start":{"line":120,"column":8},"end":{"line":132,"column":9}},"type":"if","locations":[{"start":{"line":120,"column":8},"end":{"line":132,"column":9}},{"start":{"line":120,"column":8},"end":{"line":132,"column":9}}],"line":120},"14":{"loc":{"start":{"line":121,"column":12},"end":{"line":123,"column":13}},"type":"if","locations":[{"start":{"line":121,"column":12},"end":{"line":123,"column":13}},{"start":{"line":121,"column":12},"end":{"line":123,"column":13}}],"line":121},"15":{"loc":{"start":{"line":121,"column":16},"end":{"line":121,"column":102}},"type":"binary-expr","locations":[{"start":{"line":121,"column":16},"end":{"line":121,"column":57}},{"start":{"line":121,"column":61},"end":{"line":121,"column":102}}],"line":121},"16":{"loc":{"start":{"line":125,"column":13},"end":{"line":132,"column":9}},"type":"if","locations":[{"start":{"line":125,"column":13},"end":{"line":132,"column":9}},{"start":{"line":125,"column":13},"end":{"line":132,"column":9}}],"line":125},"17":{"loc":{"start":{"line":126,"column":12},"end":{"line":128,"column":13}},"type":"if","locations":[{"start":{"line":126,"column":12},"end":{"line":128,"column":13}},{"start":{"line":126,"column":12},"end":{"line":128,"column":13}}],"line":126},"18":{"loc":{"start":{"line":126,"column":16},"end":{"line":126,"column":96}},"type":"binary-expr","locations":[{"start":{"line":126,"column":16},"end":{"line":126,"column":54}},{"start":{"line":126,"column":58},"end":{"line":126,"column":96}}],"line":126},"19":{"loc":{"start":{"line":145,"column":8},"end":{"line":155,"column":9}},"type":"if","locations":[{"start":{"line":145,"column":8},"end":{"line":155,"column":9}},{"start":{"line":145,"column":8},"end":{"line":155,"column":9}}],"line":145},"20":{"loc":{"start":{"line":169,"column":8},"end":{"line":174,"column":9}},"type":"if","locations":[{"start":{"line":169,"column":8},"end":{"line":174,"column":9}},{"start":{"line":169,"column":8},"end":{"line":174,"column":9}}],"line":169},"21":{"loc":{"start":{"line":183,"column":8},"end":{"line":214,"column":9}},"type":"if","locations":[{"start":{"line":183,"column":8},"end":{"line":214,"column":9}},{"start":{"line":183,"column":8},"end":{"line":214,"column":9}}],"line":183},"22":{"loc":{"start":{"line":184,"column":12},"end":{"line":205,"column":13}},"type":"if","locations":[{"start":{"line":184,"column":12},"end":{"line":205,"column":13}},{"start":{"line":184,"column":12},"end":{"line":205,"column":13}}],"line":184},"23":{"loc":{"start":{"line":187,"column":17},"end":{"line":205,"column":13}},"type":"if","locations":[{"start":{"line":187,"column":17},"end":{"line":205,"column":13}},{"start":{"line":187,"column":17},"end":{"line":205,"column":13}}],"line":187},"24":{"loc":{"start":{"line":190,"column":17},"end":{"line":205,"column":13}},"type":"if","locations":[{"start":{"line":190,"column":17},"end":{"line":205,"column":13}},{"start":{"line":190,"column":17},"end":{"line":205,"column":13}}],"line":190},"25":{"loc":{"start":{"line":196,"column":17},"end":{"line":205,"column":13}},"type":"if","locations":[{"start":{"line":196,"column":17},"end":{"line":205,"column":13}},{"start":{"line":196,"column":17},"end":{"line":205,"column":13}}],"line":196},"26":{"loc":{"start":{"line":200,"column":17},"end":{"line":205,"column":13}},"type":"if","locations":[{"start":{"line":200,"column":17},"end":{"line":205,"column":13}},{"start":{"line":200,"column":17},"end":{"line":205,"column":13}}],"line":200},"27":{"loc":{"start":{"line":208,"column":12},"end":{"line":213,"column":13}},"type":"if","locations":[{"start":{"line":208,"column":12},"end":{"line":213,"column":13}},{"start":{"line":208,"column":12},"end":{"line":213,"column":13}}],"line":208},"28":{"loc":{"start":{"line":218,"column":8},"end":{"line":236,"column":9}},"type":"if","locations":[{"start":{"line":218,"column":8},"end":{"line":236,"column":9}},{"start":{"line":218,"column":8},"end":{"line":236,"column":9}}],"line":218},"29":{"loc":{"start":{"line":219,"column":12},"end":{"line":224,"column":13}},"type":"if","locations":[{"start":{"line":219,"column":12},"end":{"line":224,"column":13}},{"start":{"line":219,"column":12},"end":{"line":224,"column":13}}],"line":219},"30":{"loc":{"start":{"line":226,"column":13},"end":{"line":236,"column":9}},"type":"if","locations":[{"start":{"line":226,"column":13},"end":{"line":236,"column":9}},{"start":{"line":226,"column":13},"end":{"line":236,"column":9}}],"line":226},"31":{"loc":{"start":{"line":227,"column":12},"end":{"line":232,"column":13}},"type":"if","locations":[{"start":{"line":227,"column":12},"end":{"line":232,"column":13}},{"start":{"line":227,"column":12},"end":{"line":232,"column":13}}],"line":227},"32":{"loc":{"start":{"line":243,"column":12},"end":{"line":261,"column":13}},"type":"if","locations":[{"start":{"line":243,"column":12},"end":{"line":261,"column":13}},{"start":{"line":243,"column":12},"end":{"line":261,"column":13}}],"line":243},"33":{"loc":{"start":{"line":248,"column":16},"end":{"line":250,"column":17}},"type":"if","locations":[{"start":{"line":248,"column":16},"end":{"line":250,"column":17}},{"start":{"line":248,"column":16},"end":{"line":250,"column":17}}],"line":248},"34":{"loc":{"start":{"line":253,"column":16},"end":{"line":258,"column":17}},"type":"if","locations":[{"start":{"line":253,"column":16},"end":{"line":258,"column":17}},{"start":{"line":253,"column":16},"end":{"line":258,"column":17}}],"line":253},"35":{"loc":{"start":{"line":256,"column":21},"end":{"line":258,"column":17}},"type":"if","locations":[{"start":{"line":256,"column":21},"end":{"line":258,"column":17}},{"start":{"line":256,"column":21},"end":{"line":258,"column":17}}],"line":256},"36":{"loc":{"start":{"line":266,"column":8},"end":{"line":286,"column":9}},"type":"if","locations":[{"start":{"line":266,"column":8},"end":{"line":286,"column":9}},{"start":{"line":266,"column":8},"end":{"line":286,"column":9}}],"line":266},"37":{"loc":{"start":{"line":271,"column":12},"end":{"line":273,"column":13}},"type":"if","locations":[{"start":{"line":271,"column":12},"end":{"line":273,"column":13}},{"start":{"line":271,"column":12},"end":{"line":273,"column":13}}],"line":271},"38":{"loc":{"start":{"line":276,"column":12},"end":{"line":278,"column":13}},"type":"if","locations":[{"start":{"line":276,"column":12},"end":{"line":278,"column":13}},{"start":{"line":276,"column":12},"end":{"line":278,"column":13}}],"line":276},"39":{"loc":{"start":{"line":280,"column":12},"end":{"line":285,"column":13}},"type":"if","locations":[{"start":{"line":280,"column":12},"end":{"line":285,"column":13}},{"start":{"line":280,"column":12},"end":{"line":285,"column":13}}],"line":280},"40":{"loc":{"start":{"line":289,"column":8},"end":{"line":300,"column":9}},"type":"if","locations":[{"start":{"line":289,"column":8},"end":{"line":300,"column":9}},{"start":{"line":289,"column":8},"end":{"line":300,"column":9}}],"line":289},"41":{"loc":{"start":{"line":294,"column":12},"end":{"line":299,"column":13}},"type":"if","locations":[{"start":{"line":294,"column":12},"end":{"line":299,"column":13}},{"start":{"line":294,"column":12},"end":{"line":299,"column":13}}],"line":294}},"s":{"0":1,"1":2,"2":1,"3":1,"4":1,"5":1,"6":225,"7":225,"8":225,"9":225,"10":225,"11":225,"12":225,"13":225,"14":225,"15":0,"16":0,"17":0,"18":0,"19":40,"20":40,"21":40,"22":40,"23":40,"24":34,"25":4,"26":30,"27":34,"28":34,"29":34,"30":10044,"31":13892,"32":13892,"33":13892,"34":13892,"35":10044,"36":2224,"37":10044,"38":3848,"39":558,"40":13892,"41":10044,"42":4,"43":4,"44":0,"45":4,"46":4,"47":0,"48":4,"49":0,"50":4,"51":40,"52":40,"53":40,"54":40,"55":1,"56":39,"57":52,"58":52,"59":52,"60":52,"61":49,"62":49,"63":47,"64":2,"65":0,"66":34,"67":77,"68":0,"69":0,"70":77,"71":77,"72":73,"73":0,"74":4,"75":34,"76":34,"77":34,"78":24,"79":24,"80":22,"81":1440,"82":1440,"83":1202,"84":1202,"85":1200,"86":238,"87":1416,"88":1416,"89":1436,"90":1202,"91":1202,"92":1202,"93":1930,"94":1202,"95":1244,"96":1200,"97":1930,"98":1838,"99":92,"100":1244,"101":1244,"102":1244,"103":1244,"104":6654,"105":1244,"106":1158,"107":89,"108":1069,"109":378,"110":691,"111":221,"112":1252,"113":221,"114":221,"115":221,"116":470,"117":42,"118":296,"119":42,"120":428,"121":428,"122":0,"123":86,"124":84,"125":2,"126":3174,"127":3174,"128":0,"129":0,"130":0,"131":3174,"132":3174,"133":2996,"134":178,"135":0,"136":34,"137":34,"138":34,"139":34,"140":36,"141":1,"142":35,"143":35,"144":1,"145":34,"146":34,"147":34,"148":3,"149":31,"150":1,"151":30,"152":26,"153":24,"154":30,"155":0,"156":30,"157":30,"158":0,"159":30,"160":29,"161":29,"162":1,"163":28,"164":28,"165":26,"166":2,"167":30,"168":0,"169":30,"170":30,"171":29,"172":1,"173":1},"f":{"0":2,"1":225,"2":0,"3":40,"4":34,"5":10044,"6":13892,"7":4,"8":40,"9":77,"10":34,"11":1440,"12":1202,"13":1930,"14":1244,"15":1252,"16":296,"17":3174,"18":34,"19":30,"20":30},"b":{"0":[1,1,1],"1":[1,1],"2":[2,2],"3":[4,30],"4":[10044,3848],"5":[2224,7820],"6":[558,3290],"7":[0,4],"8":[4,0],"9":[0,4],"10":[40,0],"11":[1,39],"12":[47,2],"13":[0,77],"14":[0,0],"15":[0,0],"16":[77,0],"17":[73,4],"18":[77,13],"19":[1202,238],"20":[1838,92],"21":[1158,86],"22":[89,1069],"23":[378,691],"24":[221,470],"25":[42,428],"26":[428,0],"27":[84,2],"28":[0,3174],"29":[0,0],"30":[3174,0],"31":[2996,178],"32":[1,35],"33":[1,34],"34":[3,31],"35":[1,30],"36":[0,30],"37":[0,30],"38":[1,28],"39":[26,2],"40":[0,30],"41":[29,1]},"inputSourceMap":{"version":3,"file":"C:/Users/oreak/IdeaProjects/project_team059/src/controller/QueryAggregation.ts","sources":["C:/Users/oreak/IdeaProjects/project_team059/src/controller/QueryAggregation.ts"],"names":[],"mappings":";;;;;AAEA,8DAAsC;AACtC,qDAAgD;AAChD,4DAAiC;AAEjC,MAAqB,gBAAgB;IAC5B,gBAAgB,CAAyB;IACzC,aAAa,CAAsB;IACnC,KAAK,CAAa;IACnB,aAAa,CAAS;IACtB,gBAAgB,CAAS;IACxB,OAAO,CAAW;IAClB,OAAO,CAAW;IACnB,SAAS,CAAW;IACpB,SAAS,CAAW;IAE3B,YAAY,gBAAwC,EAAE,aAAkC;QACvF,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;QACzC,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,KAAK,GAAG,IAAI,oBAAU,EAAE,CAAC;QAC9B,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;QACxB,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC;QAC3B,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,CAAC,CAAC;QACnD,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC,CAAC;QAChD,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;QACpB,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;IACrB,CAAC;IAEM,MAAM,CACZ,gBAAwC,EACxC,aAAkC,EAClC,OAAiB,EACjB,OAAiB;QAEjB,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;QACzC,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACxB,CAAC;IAEM,KAAK,CAAC,aAAa,CACzB,KAAc,EACd,WAAqB,EACrB,QAAiB,EACjB,gBAAwB,EACxB,aAAqB;QAErB,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;QAEzC,IAAI,OAAO,GAAa,EAAE,CAAC;QAC3B,IAAI,cAAc,GAAwB,EAAE,CAAC;QAG7C,IAAI,CAAC,SAAS,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QAGlD,IAAI,QAAQ,EAAE;YACb,OAAO,GAAG,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC;SAClC;aAAM;YACN,OAAO,GAAG,WAAW,CAAC;SACtB;QAED,cAAc,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;QAEjD,OAAO,cAAc,CAAC;IACvB,CAAC;IAGO,KAAK,CAAC,WAAW,CAAC,OAAiB;QAC1C,OAAO,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;YAElC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,SAAS,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE;gBAE/C,MAAM,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBAGhC,MAAM,WAAW,GAAI,GAA2B,CAAC,KAAK,CAAC,CAAC;gBACxD,MAAM,YAAY,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC;gBAGvC,IAAI,KAAK,KAAK,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;oBACxC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,EAAE;wBAC/B,YAAY,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC;qBAC/B;oBACD,YAAY,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;iBACpC;qBAAM;oBAEN,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,EAAE;wBAC/B,YAAY,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC;qBAC/B;iBACD;gBAED,OAAO,YAAY,CAAC,WAAW,CAAC,CAAC;YAClC,CAAC,EAAE,GAAG,CAAC,CAAC;YAER,OAAO,GAAG,CAAC;QACZ,CAAC,EAAE,EAAE,CAAC,CAAC;IACR,CAAC;IAEO,KAAK,CAAC,UAAU;QACvB,IAAI,OAAO,GAAyB,EAAE,CAAC;QACvC,IAAI,IAAI,CAAC,aAAa,KAAK,SAAS,EAAE;YACrC,OAAO,GAAG,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;SAC3D;aAAM,IAAI,IAAI,CAAC,aAAa,KAAK,MAAM,EAAE;YACzC,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;SACxD;aAAM;YACN,MAAM,IAAI,6BAAY,CAAC,6CAA6C,CAAC,CAAC;SACtE;QACD,IAAI,OAAO,KAAK,SAAS,EAAE;YAE1B,MAAM,IAAI,6BAAY,CAAC,8BAA8B,CAAC,CAAC;SACvD;aAAM;YAEN,OAAO,OAAO,CAAC;SACf;IACF,CAAC;IAEO,KAAK,CAAC,cAAc,CAAC,KAAc;QAC1C,MAAM,SAAS,GAAa,EAAE,CAAC;QAC/B,IAAI,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,KAAK,CAAC,EAAE;YACpC,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YACjD,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;gBAC1B,MAAM,IAAI,6BAAY,CAAC,iCAAiC,CAAC,CAAC;aAC1D;iBAAM;gBACN,KAAK,MAAM,GAAG,IAAI,QAAQ,EAAE;oBAC3B,MAAM,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;oBAC3B,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;oBACnC,MAAM,QAAQ,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;oBAEtC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,CAC5C,IAAI,CAAC,OAAO,EACZ,IAAI,CAAC,OAAO,EACZ,IAAI,CAAC,aAAa,EAClB,IAAI,CAAC,gBAAgB,EACrB,QAAQ,CACR,CAAC;oBACF,IAAI,CAAC,gBAAgB,GAAG,QAAQ,CAAC;oBAGjC,IAAI,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,EAAE;wBAC9B,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;qBACvB;yBAAM;wBACN,MAAM,IAAI,6BAAY,CAAC,eAAe,MAAM,WAAW,CAAC,CAAC;qBACzD;iBACD;aACD;SACD;aAAM;YACN,MAAM,IAAI,6BAAY,CAAC,8BAA8B,CAAC,CAAC;SACvD;QACD,OAAO,SAAS,CAAC;IAClB,CAAC;IAGO,aAAa,CAAC,KAAa;QAClC,IAAI,IAAI,CAAC,aAAa,KAAK,SAAS,EAAE;YACrC,IAAI,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;gBAC3F,OAAO,IAAI,CAAC;aACZ;SACD;aAAM,IAAI,IAAI,CAAC,aAAa,KAAK,MAAM,EAAE;YACzC,IAAI,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;gBACrF,OAAO,IAAI,CAAC;aACZ;SACD;aAAM;YACN,MAAM,IAAI,6BAAY,CAAC,2BAA2B,CAAC,CAAC;SACpD;QACD,OAAO,KAAK,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,WAAW,CAAC,KAAc,EAAE,cAAmC;QAC3E,IAAI,kBAAkB,GAAa,EAAE,CAAC;QACtC,IAAI,UAAU,GAAqC,EAAE,CAAC;QAGtD,UAAU,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;QAC/C,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAEzC,kBAAkB,GAAG,IAAI,CAAC,mBAAmB,CAAC,cAAc,EAAE,UAAU,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QAEjF,OAAO,kBAAkB,CAAC;IAC3B,CAAC;IAyGO,mBAAmB,CAC1B,cAA8C,EAC9C,UAA4C,EAC5C,gBAAwB,EACxB,OAAiB;QAEjB,MAAM,OAAO,GAAa,EAAE,CAAC;QAC7B,IAAI,gBAAgB,KAAK,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE;YAC/C,MAAM,MAAM,GAAa,cAA0B,CAAC;YACpD,MAAM,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC;YAC9D,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACpB;aAAM;YAEN,KAAK,MAAM,OAAO,IAAI,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,EAAE;gBAClD,MAAM,UAAU,GAAG,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;gBAC3C,OAAO,CAAC,IAAI,CACX,GAAG,IAAI,CAAC,mBAAmB,CACzB,cAAsC,CAAC,OAAO,CAAC,EAChD,UAAU,EACV,gBAAgB,GAAG,CAAC,EACpB,UAAU,CACV,CACD,CAAC;aACF;SAYD;QACD,OAAO,OAAO,CAAC;IAChB,CAAC;IAcO,aAAa,CAAC,MAAgB,EAAE,OAAiB,EAAE,UAA4C;QACtG,MAAM,KAAK,GAAwB,EAAE,CAAC;QACtC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC/C,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,wBAAwB,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;SACxF;QACD,KAAK,MAAM,QAAQ,IAAI,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;YAC/C,KAAK,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;SAChG;QAED,OAAO,KAAK,CAAC;IACd,CAAC;IAEO,wBAAwB,CAAC,QAAgB,EAAE,QAAgB;QAGlE,IAAI,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,KAAK,QAAQ,EAAE;YAC/C,OAAO,MAAM,CAAC,QAAQ,CAAC,CAAC;SACxB;aAAM;YACN,OAAO,QAAQ,CAAC;SAChB;IACF,CAAC;IAEO,cAAc,CAAC,KAAa,EAAE,SAAiB,EAAE,MAAgB;QACxE,MAAM,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QACtC,MAAM,eAAe,GAAU,EAAE,CAAC;QAClC,MAAM,QAAQ,GAAG,CAAC,CAAC;QAEnB,KAAK,MAAM,GAAG,IAAI,MAAM,EAAE;YAEzB,eAAe,CAAC,IAAI,CAAE,GAA2B,CAAC,KAAK,CAAC,CAAC,CAAC;SAC1D;QAID,IAAI,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,KAAK,QAAQ,EAAE;YAChD,IAAI,KAAK,KAAK,KAAK,EAAE;gBACpB,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,eAAe,CAAC,CAAC;aACpC;iBAAM,IAAI,KAAK,KAAK,KAAK,EAAE;gBAC3B,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,eAAe,CAAC,CAAC;aACpC;iBAAM,IAAI,KAAK,KAAK,KAAK,EAAE;gBAC3B,MAAM,KAAK,GAAY,eAAe,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,oBAAO,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,IAAI,oBAAO,CAAC,CAAC,CAAC,CAAC,CAAC;gBACnG,MAAM,OAAO,GAAW,eAAe,CAAC,MAAM,CAAC;gBAC/C,MAAM,GAAG,GAAG,KAAK,CAAC,QAAQ,EAAE,GAAG,OAAO,CAAC;gBACvC,OAAO,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;aACrC;iBAAM,IAAI,KAAK,KAAK,KAAK,EAAE;gBAC3B,MAAM,GAAG,GAAG,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,oBAAO,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,IAAI,oBAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAChG,OAAO,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;aACrC;iBAAM,IAAI,KAAK,KAAK,OAAO,EAAE;gBAC7B,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,eAAe,CAAC,CAAC,CAAC,MAAM,CAAC;aACnD;iBAAM;gBACN,MAAM,IAAI,6BAAY,CAAC,qBAAqB,CAAC,CAAC;aAC9C;SACD;aAAM;YACN,IAAI,KAAK,KAAK,OAAO,EAAE;gBACtB,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,eAAe,CAAC,CAAC,CAAC,MAAM,CAAC;aACnD;iBAAM;gBACN,MAAM,IAAI,6BAAY,CAAC,qBAAqB,CAAC,CAAC;aAC9C;SACD;IACF,CAAC;IAcO,cAAc,CAAC,SAAiB;QACvC,MAAM,WAAW,GAAG,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5C,IAAI,IAAI,CAAC,aAAa,KAAK,SAAS,EAAE;YACrC,IAAI,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE;gBACpD,OAAO,QAAQ,CAAC;aAChB;iBAAM;gBACN,OAAO,QAAQ,CAAC;aAChB;SACD;aAAM,IAAI,IAAI,CAAC,aAAa,KAAK,MAAM,EAAE;YACzC,IAAI,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE;gBACjD,OAAO,QAAQ,CAAC;aAChB;iBAAM;gBACN,OAAO,QAAQ,CAAC;aAChB;SACD;aAAM;YACN,MAAM,IAAI,6BAAY,CAAC,6BAA6B,CAAC,CAAC;SACtD;IACF,CAAC;IAEO,KAAK,CAAC,eAAe,CAAC,KAAc;QAC3C,MAAM,UAAU,GAAqC,EAAE,CAAC;QACxD,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QACjD,MAAM,kBAAkB,GAAG,SAAS,CAAC;QAErC,KAAK,MAAM,IAAI,IAAI,QAAQ,EAAE;YAC5B,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;gBAC7B,MAAM,IAAI,6BAAY,CAAC,yBAAyB,CAAC,CAAC;aAClD;iBAAM;gBACN,MAAM,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;gBAC7B,IAAI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;oBACtC,MAAM,IAAI,6BAAY,CAAC,qCAAqC,CAAC,CAAC;iBAC9D;gBACD,MAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;gBACzC,MAAM,gBAAgB,GAAG,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;gBACnD,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;oBACvC,MAAM,IAAI,6BAAY,CAAC,sCAAsC,CAAC,CAAC;iBAC/D;qBAAM,IAAI,QAAQ,IAAI,UAAU,EAAE;oBAClC,MAAM,IAAI,6BAAY,CAAC,kCAAkC,CAAC,CAAC;iBAC3D;gBACD,MAAM,eAAe,GAAG,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,CAAC;gBAChE,UAAU,CAAC,QAAQ,CAAC,GAAG,eAAe,CAAC;aACvC;SACD;QACD,OAAO,UAAU,CAAC;IACnB,CAAC;IAEO,gBAAgB,CAAC,gBAAyB;QACjD,IAAI,OAAO,gBAAgB,KAAK,QAAQ,EAAE;YACzC,MAAM,IAAI,6BAAY,CAAC,wBAAwB,CAAC,CAAC;SACjD;aAAM;YACN,MAAM,mBAAmB,GAAG,MAAM,CAAC,gBAAgB,CAAC,CAAC;YACrD,IAAI,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;gBAClD,MAAM,IAAI,6BAAY,CAAC,mCAAmC,CAAC,CAAC;aAC5D;YAED,MAAM,KAAK,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACxE,MAAM,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,CAAC;YAIlD,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;gBAC5B,MAAM,IAAI,6BAAY,CAAC,+BAA+B,CAAC,CAAC;aACxD;YACD,MAAM,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YAChC,IAAI,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,EAAE;gBAC9B,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;aAC5B;iBAAM;gBACN,MAAM,IAAI,6BAAY,CAAC,0BAA0B,CAAC,CAAC;aACnD;SACD;IACF,CAAC;IAEO,eAAe,CAAC,KAAc;QACrC,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAC9B,MAAM,IAAI,6BAAY,CAAC,+BAA+B,CAAC,CAAC;SACxD;aAAM;YACN,MAAM,QAAQ,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;YAC/B,IAAI,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;gBACnD,OAAO,QAAQ,CAAC;aAChB;iBAAM;gBACN,MAAM,IAAI,6BAAY,CAAC,0BAA0B,CAAC,CAAC;aACnD;SACD;IACF,CAAC;CACD;AAxeD,mCAweC","sourcesContent":["import Room from \"./rooms/Room\";\nimport Section from \"./sections/Section\";\nimport QueryUtils from \"./QueryUtils\";\nimport { InsightError } from \"./IInsightFacade\";\nimport Decimal from \"decimal.js\";\n\nexport default class QueryAggregation {\n\tprivate sectionsDatabase: Map<string, Section[]>;\n\tprivate roomsDatabase: Map<string, Room[]>;\n\tprivate utils: QueryUtils;\n\tpublic sectionOrRoom: string;\n\tpublic queryingIDString: string;\n\tprivate sDSList: string[];\n\tprivate rDSList: string[];\n\tpublic groupKeys: string[];\n\tpublic applyKeys: string[];\n\n\tconstructor(sectionsDatabase: Map<string, Section[]>, roomsDatabase: Map<string, Room[]>) {\n\t\tthis.sectionsDatabase = sectionsDatabase;\n\t\tthis.roomsDatabase = roomsDatabase;\n\t\tthis.utils = new QueryUtils();\n\t\tthis.sectionOrRoom = \"\";\n\t\tthis.queryingIDString = \"\";\n\t\tthis.sDSList = Array.from(sectionsDatabase.keys());\n\t\tthis.rDSList = Array.from(roomsDatabase.keys());\n\t\tthis.groupKeys = [];\n\t\tthis.applyKeys = [];\n\t}\n\n\tpublic setDBs(\n\t\tsectionsDatabase: Map<string, Section[]>,\n\t\troomsDatabase: Map<string, Room[]>,\n\t\tsDSList: string[],\n\t\trDSList: string[]\n\t): void {\n\t\tthis.sectionsDatabase = sectionsDatabase;\n\t\tthis.roomsDatabase = roomsDatabase;\n\t\tthis.rDSList = rDSList;\n\t\tthis.sDSList = sDSList;\n\t}\n\n\tpublic async handleGroupBy(\n\t\tgroup: unknown,\n\t\tfilteredSOR: Object[],\n\t\tnoFilter: boolean,\n\t\tqueryingIDString: string,\n\t\tsectionOrRoom: string\n\t): Promise<Record<string, any>> {\n\t\tthis.sectionOrRoom = sectionOrRoom;\n\t\tthis.queryingIDString = queryingIDString;\n\n\t\tlet dataset: Object[] = [];\n\t\tlet groupedResults: Record<string, any> = {};\n\n\t\t// get the group keys from group in query\n\t\tthis.groupKeys = await this.checkGroupKeys(group);\n\t\t//console.log(this.groupKeys);\n\t\t// if no filter has been applied,\n\t\tif (noFilter) {\n\t\t\tdataset = await this.getDataset();\n\t\t} else {\n\t\t\tdataset = filteredSOR;\n\t\t}\n\n\t\tgroupedResults = await this.groupByKeys(dataset);\n\t\t//console.log(groupedResults);\n\t\treturn groupedResults;\n\t}\n\n\t// chatgpt generated but altered to fit our code\n\tprivate async groupByKeys(dataset: Object[]): Promise<any> {\n\t\treturn dataset.reduce((acc, SOR) => {\n\t\t\t// Create nested structure based on keys\n\t\t\tthis.groupKeys.reduce((nestedAcc, key, index) => {\n\t\t\t\t// key is a groupkey\n\t\t\t\tconst field = key.split(\"_\")[1];\n\t\t\t\t//console.log(SOR);\n\t\t\t\t//console.log(key);\n\t\t\t\tconst keyGrouping = (SOR as Record<string, any>)[field];\n\t\t\t\tconst nestedAccObj = Object(nestedAcc);\n\n\t\t\t\t// If this is the last key, store the array of items\n\t\t\t\tif (index === this.groupKeys.length - 1) {\n\t\t\t\t\tif (!nestedAccObj[keyGrouping]) {\n\t\t\t\t\t\tnestedAccObj[keyGrouping] = [];\n\t\t\t\t\t}\n\t\t\t\t\tnestedAccObj[keyGrouping].push(SOR);\n\t\t\t\t} else {\n\t\t\t\t\t// Create an empty object if key doesn't exist yet\n\t\t\t\t\tif (!nestedAccObj[keyGrouping]) {\n\t\t\t\t\t\tnestedAccObj[keyGrouping] = {};\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn nestedAccObj[keyGrouping];\n\t\t\t}, acc);\n\n\t\t\treturn acc;\n\t\t}, {});\n\t}\n\n\tprivate async getDataset(): Promise<Object[]> {\n\t\tlet dataset: Object[] | undefined = [];\n\t\tif (this.sectionOrRoom === \"section\") {\n\t\t\tdataset = this.sectionsDatabase.get(this.queryingIDString);\n\t\t} else if (this.sectionOrRoom === \"room\") {\n\t\t\tdataset = this.roomsDatabase.get(this.queryingIDString);\n\t\t} else {\n\t\t\tthrow new InsightError(\"sections or room not defined in getDataset.\");\n\t\t}\n\t\tif (dataset === undefined) {\n\t\t\t// should not be possible given current implementation of other methods for query\n\t\t\tthrow new InsightError(\"Can't find querying dataset.\");\n\t\t} else {\n\t\t\t//console.log(dataset.length);\n\t\t\treturn dataset;\n\t\t}\n\t}\n\n\tprivate async checkGroupKeys(group: unknown): Promise<string[]> {\n\t\tconst groupKeys: string[] = [];\n\t\tif (this.utils.isStringArray(group)) {\n\t\t\tconst groupArr = this.utils.coerceToArray(group);\n\t\t\tif (groupArr.length === 0) {\n\t\t\t\tthrow new InsightError(\"GROUP must be a non-empty array\");\n\t\t\t} else {\n\t\t\t\tfor (const key of groupArr) {\n\t\t\t\t\tconst keyStr = String(key);\n\t\t\t\t\tconst field = keyStr.split(\"_\")[1];\n\t\t\t\t\tconst idstring = keyStr.split(\"_\")[0];\n\n\t\t\t\t\tthis.sectionOrRoom = this.utils.checkIDString(\n\t\t\t\t\t\tthis.sDSList,\n\t\t\t\t\t\tthis.rDSList,\n\t\t\t\t\t\tthis.sectionOrRoom,\n\t\t\t\t\t\tthis.queryingIDString,\n\t\t\t\t\t\tidstring\n\t\t\t\t\t);\n\t\t\t\t\tthis.queryingIDString = idstring;\n\n\t\t\t\t\t//console.log(field);\n\t\t\t\t\tif (this.checkValidKey(field)) {\n\t\t\t\t\t\tgroupKeys.push(keyStr);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new InsightError(`Invalid key ${keyStr} in GROUP`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new InsightError(\"GROUP must be a string array\");\n\t\t}\n\t\treturn groupKeys;\n\t}\n\n\t// if the field is valid, return true, if sectionOrRoom is somehow empty throw error\n\tprivate checkValidKey(field: string): boolean {\n\t\tif (this.sectionOrRoom === \"section\") {\n\t\t\tif (this.utils.mFieldsSection.includes(field) || this.utils.sFieldsSection.includes(field)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} else if (this.sectionOrRoom === \"room\") {\n\t\t\tif (this.utils.mFieldsRoom.includes(field) || this.utils.sFieldsRoom.includes(field)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new InsightError(\"section or room undefined\");\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic async handleApply(apply: unknown, groupedResults: Record<string, any>): Promise<Object[]> {\n\t\tlet transformedResults: Object[] = [];\n\t\tlet applyRules: Record<string, [string, string]> = {};\n\n\t\t// campus explorer allows empty applyarrays, so no rules is okay\n\t\tapplyRules = await this.checkApplyRules(apply);\n\t\tthis.applyKeys = Object.keys(applyRules);\n\n\t\ttransformedResults = this.applyRulesRecursive(groupedResults, applyRules, 0, []);\n\t\t//console.log(transformedResults);\n\t\treturn transformedResults;\n\t}\n\n\t/*\nRecord<string, any>\n\n(\"course name\", \"sections_instructor\")\n\n\ngroupKeys = [sections_title, sections_instructor];\ngroupKeysIterator = 0;\nstopping_cond groupKeysIterator = groupKeys.length -1;\n\n\t\t\t\t\ttoken, target_key\nRecord <string, [string, string]>\navgSeats\n\n\nkeysList = []\n1. \"310\" keysList = []\nkeysList.push(\"310\")\nkeysList = [\"310\"]\nObjectList = Object[]\nfor(key in \"310\".value)\n\tObjectList.push(...recursion(keysList, groupKeysIterator+1));\nreturn ObjectList\n\n2. \"Jean\" keysList = [\"310\"], groupKeysIterator = 1\nkeysList.push(\"Jean\")\nkeysList = [\"310\", \"Jean\"]\n\nSORArr = \"Jean\".value\nreached stopping_cond then:\n\tconst group = new Object();\n\tfor(let i = 0; i < groupKeys.length; i++) {\n\t\tgroup[groupKeys[i]] = keysList[i];\n\t}\n\tfor(applyKey of applyKeys.keys()) {\n\t\tgroup[applyKey] = helper(token, target_key, SORArr);\n\t}\n\treturn [Object];\n\n//helper() {\n\tkey = targetkey.split[1]\n\ttargetFieldList = any[]\n\n\tfor SOR of SORArr {\n\t\ttargetFieldList.push((SOR as Record<string, any>)[key]);\n\t}\n\n\tif (checkTargetKey() === \"number\") {\n\t\tif token === max:\n\t\t\treturn Math.max(...targetFieldList);\n\t\telse if token === min:\n\t\t\treturn Math.min(...targetFieldList);\n\t\telse if token === avg:\n\t\t\tconst sum = targetFieldList.reduce((acc, num) => acc + num, 0);\n\t\t\tconst avg = sum / targetFieldList.length;\n\t\t\treturn avg;\n\t\telse if token === sum:\n\t\t\tconst sum = targetFieldList.reduce((acc, num) => acc + num, 0);\n\t\t\treturn sum;\n\t\telse if token === count:\n\t\t\treturn Array.from(toSet(targetFieldList));\n\t} else {\n\t\tif token === count:\n\t\t\treturn Array.from(toSet(targetFieldList));\n\t}\n}\n\n// checks if target key is\ncheckTargetKey(key): string {\n\tif(sectionOrRoom === \"section\") {\n\t\tif(key in mfieldsection) {\n\t\t\treturn \"number\"\n\t\t} else {\n\t\t\treturn \"string\"\n\t\t}\n\t} else if (sectionOrRoom === \"room\") {\n\t\tif(key in mfieldroom) {\n\t\t\treturn \"number\"\n\t\t} else\n\t\t\treturn \"string\"\n\t} else {\n\t\tthrow InsightError;\n\t}\n}\n\n\"310\" : {\n\t\"Jean\" : [\n\t\t{ \"sections_uuid\": \"1\", \"sections_instructor\": \"Jean\",  \"sections_avg\": 90, \"sections_title\" : \"310\"},\n\n \t\t{ \"sections_uuid\": \"2\", \"sections_instructor\": \"Jean\",  \"sections_avg\": 80, \"sections_title\" : \"310\"},\n\t]\n\t\"Casey\" : [\n \t\t{ \"sections_uuid\": \"3\", \"sections_instructor\": \"Casey\", \"sections_avg\": 95, \"sections_title\" : \"310\"},\n\n\t\t{ \"sections_uuid\": \"4\", \"sections_instructor\": \"Casey\", \"sections_avg\": 85, \"sections_title\" : \"310\"}\n\t]\n},\n\"210\" : [\n\n]\n\n*/\n\n\tprivate applyRulesRecursive(\n\t\tgroupedResults: Record<string, any> | Object[],\n\t\tapplyRules: Record<string, [string, string]>,\n\t\tgroupKeyIterator: number,\n\t\tkeyList: string[]\n\t): Object[] {\n\t\tconst results: Object[] = [];\n\t\tif (groupKeyIterator === this.groupKeys.length) {\n\t\t\tconst SORArr: Object[] = groupedResults as Object[];\n\t\t\tconst group = this.makeNewObject(SORArr, keyList, applyRules);\n\t\t\tresults.push(group);\n\t\t} else {\n\t\t\t//const resultsPromises: Promise<Object[]>[] = [];\n\t\t\tfor (const currkey of Object.keys(groupedResults)) {\n\t\t\t\tconst newKeyList = keyList.concat(currkey);\n\t\t\t\tresults.push(\n\t\t\t\t\t...this.applyRulesRecursive(\n\t\t\t\t\t\t(groupedResults as Record<string, any>)[currkey],\n\t\t\t\t\t\tapplyRules,\n\t\t\t\t\t\tgroupKeyIterator + 1,\n\t\t\t\t\t\tnewKeyList\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}\n\t\t\t/*\n\t\t\ttry {\n\t\t\t\t//console.log(\"reached promise\");\n\n\t\t\t\tconst promises = await Promise.allSettled(resultsPromises);\n\t\t\t\tresults = this.checkAllFulfilled(promises);\n\t\t\t\t//console.log(loadDatasetPromises.length);\n\t\t\t} catch (err) {\n\t\t\t\tthrow new Error(`Failed apply rules recursively, error: ${err}`);\n\t\t\t}\n\t\t\t*/\n\t\t}\n\t\treturn results;\n\t}\n\n\t/*\n\tprivate checkAllFulfilled(promises: PromiseSettledResult<Object[]>[]): Object[] {\n\t\tconst allFulfilled = promises.every((promise) => promise.status === \"fulfilled\");\n\t\tif (allFulfilled) {\n\t\t\tconst objectArr = promises.map((promise) => (promise as PromiseFulfilledResult<any>).value);\n\t\t\tconsole.log(objectArr);\n\t\t\treturn objectArr;\n\t\t} else {\n\t\t\tthrow new InsightError(\"One of the recursives failed\");\n\t\t}\n\t}*/\n\n\tprivate makeNewObject(SORArr: Object[], keyList: string[], applyRules: Record<string, [string, string]>): Object {\n\t\tconst group: Record<string, any> = {};\n\t\tfor (let i = 0; i < this.groupKeys.length; i++) {\n\t\t\tgroup[this.groupKeys[i]] = this.checkNumberOrStringField(keyList[i], this.groupKeys[i]);\n\t\t}\n\t\tfor (const applyKey of Object.keys(applyRules)) {\n\t\t\tgroup[applyKey] = this.applyAFunction(applyRules[applyKey][0], applyRules[applyKey][1], SORArr);\n\t\t}\n\t\t//console.log(group);\n\t\treturn group;\n\t}\n\n\tprivate checkNumberOrStringField(groupVal: string, groupKey: string): string | number {\n\t\t//const field = groupKey.split(\"_\")[1];\n\t\t// Use this to debug\n\t\tif (this.checkTargetKey(groupKey) === \"number\") {\n\t\t\treturn Number(groupVal);\n\t\t} else {\n\t\t\treturn groupVal;\n\t\t}\n\t}\n\n\tprivate applyAFunction(token: string, targetKey: string, SORArr: Object[]): Object {\n\t\tconst field = targetKey.split(\"_\")[1];\n\t\tconst targetFieldList: any[] = [];\n\t\tconst decimals = 2;\n\n\t\tfor (const SOR of SORArr) {\n\t\t\t//console.log(SOR);\n\t\t\ttargetFieldList.push((SOR as Record<string, any>)[field]);\n\t\t}\n\t\t//console.log(\"apply a function, token:\");\n\t\t//console.log(token);\n\t\t//console.log(targetKey);\n\t\tif (this.checkTargetKey(targetKey) === \"number\") {\n\t\t\tif (token === \"MAX\") {\n\t\t\t\treturn Math.max(...targetFieldList);\n\t\t\t} else if (token === \"MIN\") {\n\t\t\t\treturn Math.min(...targetFieldList);\n\t\t\t} else if (token === \"AVG\") {\n\t\t\t\tconst total: Decimal = targetFieldList.reduce((acc, num) => Decimal.add(acc, num), new Decimal(0));\n\t\t\t\tconst numRows: number = targetFieldList.length;\n\t\t\t\tconst avg = total.toNumber() / numRows;\n\t\t\t\treturn Number(avg.toFixed(decimals));\n\t\t\t} else if (token === \"SUM\") {\n\t\t\t\tconst sum = Number(targetFieldList.reduce((acc, num) => Decimal.add(acc, num), new Decimal(0)));\n\t\t\t\treturn Number(sum.toFixed(decimals));\n\t\t\t} else if (token === \"COUNT\") {\n\t\t\t\treturn Array.from(new Set(targetFieldList)).length;\n\t\t\t} else {\n\t\t\t\tthrow new InsightError(\"Invalid apply token\");\n\t\t\t}\n\t\t} else {\n\t\t\tif (token === \"COUNT\") {\n\t\t\t\treturn Array.from(new Set(targetFieldList)).length;\n\t\t\t} else {\n\t\t\t\tthrow new InsightError(\"Invalid apply token\");\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\tprivate calculateAVG(targetFieldList: number[]): number {\n\t\tconst total = new Decimal(0);\n\t\tconst numRows = targetFieldList.length;\n\t\tfor (let i = 0; i < targetFieldList.length; i++) {\n\t\t\tDecimal.add(total);\n\t\t}\n\t}\n\n\tprivate calculateSUM(targetFieldList: number[]): number {}\n\n\t*/\n\tprivate checkTargetKey(targetKey: string): string {\n\t\tconst targetField = targetKey.split(\"_\")[1];\n\t\tif (this.sectionOrRoom === \"section\") {\n\t\t\tif (this.utils.mFieldsSection.includes(targetField)) {\n\t\t\t\treturn \"number\";\n\t\t\t} else {\n\t\t\t\treturn \"string\";\n\t\t\t}\n\t\t} else if (this.sectionOrRoom === \"room\") {\n\t\t\tif (this.utils.mFieldsRoom.includes(targetField)) {\n\t\t\t\treturn \"number\";\n\t\t\t} else {\n\t\t\t\treturn \"string\";\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new InsightError(\"section or room not defined\");\n\t\t}\n\t}\n\n\tprivate async checkApplyRules(apply: unknown): Promise<Record<string, [string, string]>> {\n\t\tconst applyRules: Record<string, [string, string]> = {};\n\t\tconst applyArr = this.utils.coerceToArray(apply);\n\t\tconst validApplyKeyRegex = /^[^_]+$/;\n\n\t\tfor (const rule of applyArr) {\n\t\t\tif (typeof rule !== \"object\") {\n\t\t\t\tthrow new InsightError(\"Apply rule invalid type\");\n\t\t\t} else {\n\t\t\t\tconst ruleObj = Object(rule);\n\t\t\t\tif (Object.keys(ruleObj).length !== 1) {\n\t\t\t\t\tthrow new InsightError(\"Apply rule should have only one key\");\n\t\t\t\t}\n\t\t\t\tconst applyKey = Object.keys(ruleObj)[0];\n\t\t\t\tconst applyTokenAndKey = Object.values(ruleObj)[0];\n\t\t\t\tif (!validApplyKeyRegex.test(applyKey)) {\n\t\t\t\t\tthrow new InsightError(\"Apply key cannot contain underscores\");\n\t\t\t\t} else if (applyKey in applyRules) {\n\t\t\t\t\tthrow new InsightError(\"Cannot have duplicate apply keys\");\n\t\t\t\t}\n\t\t\t\tconst TokenAndKeyPair = this.checkTokenAndKey(applyTokenAndKey);\n\t\t\t\tapplyRules[applyKey] = TokenAndKeyPair;\n\t\t\t}\n\t\t}\n\t\treturn applyRules;\n\t}\n\n\tprivate checkTokenAndKey(applyTokenAndKey: unknown): [string, string] {\n\t\tif (typeof applyTokenAndKey !== \"object\") {\n\t\t\tthrow new InsightError(\"Apply key invalid type\");\n\t\t} else {\n\t\t\tconst applyTokenAndKeyObj = Object(applyTokenAndKey);\n\t\t\tif (Object.keys(applyTokenAndKeyObj).length !== 1) {\n\t\t\t\tthrow new InsightError(\"applytoken should be the only key\");\n\t\t\t}\n\n\t\t\tconst token = this.checkValidToken(Object.keys(applyTokenAndKeyObj)[0]);\n\t\t\tconst key = Object.values(applyTokenAndKeyObj)[0];\n\t\t\t//console.log(token);\n\t\t\t//console.log(key);\n\n\t\t\tif (typeof key !== \"string\") {\n\t\t\t\tthrow new InsightError(\"APPLY invalid target key type\");\n\t\t\t}\n\t\t\tconst field = key.split(\"_\")[1];\n\t\t\tif (this.checkValidKey(field)) {\n\t\t\t\treturn [token, String(key)];\n\t\t\t} else {\n\t\t\t\tthrow new InsightError(\"APPLY invalid target key\");\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate checkValidToken(token: unknown): string {\n\t\tif (typeof token !== \"string\") {\n\t\t\tthrow new InsightError(\"APPLY invalid applytoken type\");\n\t\t} else {\n\t\t\tconst tokenStr = String(token);\n\t\t\tif (this.utils.validApplyTokens.includes(tokenStr)) {\n\t\t\t\treturn tokenStr;\n\t\t\t} else {\n\t\t\t\tthrow new InsightError(\"APPLY invalid applytoken\");\n\t\t\t}\n\t\t}\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"42d5726f24f95b46aabfff2736acf6da8d760e98","contentHash":"e8b74bb84b691501f8e5776570e61999d48c6eaeccefcd948749175e3e31fe8e"},"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\sections\\SectionDiskReader.ts":{"path":"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\sections\\SectionDiskReader.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":25},"end":{"line":6,"column":53}},"4":{"start":{"line":7,"column":25},"end":{"line":7,"column":69}},"5":{"start":{"line":8,"column":19},"end":{"line":8,"column":55}},"6":{"start":{"line":11,"column":8},"end":{"line":11,"column":16}},"7":{"start":{"line":14,"column":28},"end":{"line":14,"column":30}},"8":{"start":{"line":15,"column":8},"end":{"line":18,"column":11}},"9":{"start":{"line":16,"column":28},"end":{"line":16,"column":60}},"10":{"start":{"line":17,"column":12},"end":{"line":17,"column":38}},"11":{"start":{"line":19,"column":24},"end":{"line":19,"column":54}},"12":{"start":{"line":20,"column":8},"end":{"line":22,"column":11}},"13":{"start":{"line":21,"column":12},"end":{"line":21,"column":61}},"14":{"start":{"line":23,"column":8},"end":{"line":23,"column":32}},"15":{"start":{"line":26,"column":28},"end":{"line":37,"column":10}},"16":{"start":{"line":27,"column":25},"end":{"line":27,"column":96}},"17":{"start":{"line":28,"column":24},"end":{"line":28,"column":40}},"18":{"start":{"line":29,"column":28},"end":{"line":29,"column":48}},"19":{"start":{"line":30,"column":25},"end":{"line":30,"column":42}},"20":{"start":{"line":31,"column":38},"end":{"line":35,"column":13}},"21":{"start":{"line":36,"column":12},"end":{"line":36,"column":37}},"22":{"start":{"line":38,"column":23},"end":{"line":38,"column":53}},"23":{"start":{"line":39,"column":8},"end":{"line":39,"column":22}},"24":{"start":{"line":42,"column":27},"end":{"line":42,"column":62}},"25":{"start":{"line":43,"column":24},"end":{"line":43,"column":50}},"26":{"start":{"line":44,"column":8},"end":{"line":46,"column":9}},"27":{"start":{"line":45,"column":12},"end":{"line":45,"column":72}},"28":{"start":{"line":47,"column":8},"end":{"line":47,"column":65}},"29":{"start":{"line":50,"column":0},"end":{"line":50,"column":36}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":10,"column":4},"end":{"line":10,"column":5}},"loc":{"start":{"line":10,"column":18},"end":{"line":12,"column":5}},"line":10},"2":{"name":"(anonymous_2)","decl":{"start":{"line":13,"column":4},"end":{"line":13,"column":5}},"loc":{"start":{"line":13,"column":56},"end":{"line":24,"column":5}},"line":13},"3":{"name":"(anonymous_3)","decl":{"start":{"line":15,"column":24},"end":{"line":15,"column":25}},"loc":{"start":{"line":15,"column":35},"end":{"line":18,"column":9}},"line":15},"4":{"name":"(anonymous_4)","decl":{"start":{"line":20,"column":24},"end":{"line":20,"column":25}},"loc":{"start":{"line":20,"column":36},"end":{"line":22,"column":9}},"line":20},"5":{"name":"(anonymous_5)","decl":{"start":{"line":25,"column":4},"end":{"line":25,"column":5}},"loc":{"start":{"line":25,"column":38},"end":{"line":40,"column":5}},"line":25},"6":{"name":"(anonymous_6)","decl":{"start":{"line":26,"column":36},"end":{"line":26,"column":37}},"loc":{"start":{"line":26,"column":50},"end":{"line":37,"column":9}},"line":26},"7":{"name":"(anonymous_7)","decl":{"start":{"line":41,"column":4},"end":{"line":41,"column":5}},"loc":{"start":{"line":41,"column":59},"end":{"line":48,"column":5}},"line":41}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":44,"column":8},"end":{"line":46,"column":9}},"type":"if","locations":[{"start":{"line":44,"column":8},"end":{"line":46,"column":9}},{"start":{"line":44,"column":8},"end":{"line":46,"column":9}}],"line":44}},"s":{"0":1,"1":2,"2":1,"3":1,"4":1,"5":1,"6":142,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":25,"16":36,"17":36,"18":36,"19":36,"20":36,"21":36,"22":25,"23":25,"24":38,"25":35,"26":35,"27":1,"28":34,"29":1},"f":{"0":2,"1":142,"2":0,"3":0,"4":0,"5":25,"6":36,"7":38},"b":{"0":[1,1,1],"1":[1,1],"2":[2,2],"3":[1,34]},"inputSourceMap":{"version":3,"file":"C:/Users/oreak/IdeaProjects/project_team059/src/controller/sections/SectionDiskReader.ts","sources":["C:/Users/oreak/IdeaProjects/project_team059/src/controller/sections/SectionDiskReader.ts"],"names":[],"mappings":";;;;;AAAA,sDAAqF;AACrF,sEAAiE;AACjE,wDAA0B;AAK1B,MAAqB,iBAAkB,SAAQ,wBAAc;IAC5D;QACC,KAAK,EAAE,CAAC;IACT,CAAC;IAOM,KAAK,CAAC,kBAAkB,CAC9B,OAAiB,EACjB,gBAAwC;QAExC,MAAM,WAAW,GAA6B,EAAE,CAAC;QAGjD,OAAO,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;YAGzB,MAAM,OAAO,GAAG,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;YACjD,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAC;QAEH,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QAE/C,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;YAC1B,gBAAgB,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,OAAO,gBAAgB,CAAC;IACzB,CAAC;IAGM,KAAK,CAAC,sBAAsB,CAAC,GAAa;QAChD,MAAM,WAAW,GAAG,GAAG,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,EAAE,EAAE;YACxC,MAAM,IAAI,GAAG,MAAM,kBAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,UAAU,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;YACrE,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAE7B,MAAM,OAAO,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAiB,CAAC;YAC/C,MAAM,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAA0B,CAAC;YAErD,MAAM,iBAAiB,GAAmB;gBACzC,EAAE,EAAE,EAAE;gBACN,IAAI,EAAE,IAAI;gBACV,OAAO,EAAE,OAAO;aAChB,CAAC;YAEF,OAAO,iBAAiB,CAAC;QAC1B,CAAC,CAAC,CAAC;QAEH,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QAC9C,OAAO,MAAM,CAAC;IACf,CAAC;IAOM,KAAK,CAAC,0BAA0B,CAAC,EAAU,EAAE,gBAAwC;QAC3F,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,EAAE,CAAC,CAAC;QACvD,MAAM,OAAO,GAAG,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC;QAE3C,IAAI,OAAO,KAAK,CAAC,EAAE;YAClB,MAAM,IAAI,6BAAY,CAAC,kBAAkB,CAAC,CAAC;SAC3C;QAED,gBAAgB,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,EAAE,UAAU,CAAC,QAAQ,CAAC,CAAC;IAC1D,CAAC;CACD;AAtED,oCAsEC","sourcesContent":["import { InsightDataset, InsightDatasetKind, InsightError } from \"../IInsightFacade\";\nimport SectionsParser, { DatasetRecord } from \"./SectionsParser\";\nimport fs from \"fs-extra\";\nimport Section from \"./Section\";\n\n// Any information about Sections that need to read from the disk\n\nexport default class SectionDiskReader extends SectionsParser {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\t// REQUIRES: currIDs - array of all the dataset ids currently added in InsightFacade instance\n\t//\t\t\t sectionsDatabase - map of all added datasets and their associated sections\n\t// EFFECTS: finds all sections datasets in disks not in current datasets and returns a map of the datasets with their id (dataset name)\n\t// and associated sections\n\t// datasetsIds = all currently added datasets (refer to currIDs),\n\tpublic async mapMissingSections(\n\t\tcurrIDs: string[],\n\t\tsectionsDatabase: Map<string, Section[]>\n\t): Promise<Map<string, Section[]>> {\n\t\tconst allPromises: Promise<DatasetRecord>[] = [];\n\t\t// the id of all datasets not currently added\n\n\t\tcurrIDs.forEach((setId) => {\n\t\t\t// all ids for missing datasets are returned as a Record\n\t\t\t// with all the sections associated with the id\n\t\t\tconst promise = this.turnDatasetToSection(setId);\n\t\t\tallPromises.push(promise);\n\t\t});\n\n\t\tconst records = await Promise.all(allPromises);\n\t\t// add all records collected to Map\n\t\trecords.forEach((record) => {\n\t\t\tsectionsDatabase.set(record.id, record.sections);\n\t\t});\n\n\t\treturn sectionsDatabase;\n\t}\n\n\t// Writes InsightDataset info about a dataset from disk\n\tpublic async logInsightKindFromDisk(ids: string[]): Promise<InsightDataset[]> {\n\t\tconst allPromises = ids.map(async (id) => {\n\t\t\tconst file = await fs.promises.readFile(`./data/${id}/kind`, \"utf8\");\n\t\t\tconst obj = JSON.parse(file);\n\n\t\t\tconst numRows = obj.table[0].numRows as number;\n\t\t\tconst kind = obj.table[0].kind as InsightDatasetKind;\n\n\t\t\tconst newInsightDataset: InsightDataset = {\n\t\t\t\tid: id,\n\t\t\t\tkind: kind,\n\t\t\t\tnumRows: numRows,\n\t\t\t};\n\n\t\t\treturn newInsightDataset;\n\t\t});\n\n\t\tconst result = await Promise.all(allPromises);\n\t\treturn result;\n\t}\n\n\t// REQUIRES: id - name of dataset to be retrieved from disk (id IS NOT IN datasets ALREADY!!!!)\n\t//           datasets - sets you'll be mapping new DatasetRecord to\n\t// EFFECTS: Retrieves the sections associated with the dataset id on disk and turned into Sections objects and maps\n\t//          them to sectionsDatabase with their associated id.\n\t// OUTPUT: VOID\n\tpublic async logNewDatasetFromDiskToMap(id: string, sectionsDatabase: Map<string, Section[]>): Promise<void> {\n\t\tconst newDataset = await this.turnDatasetToSection(id);\n\t\tconst numRows = newDataset.sections.length;\n\n\t\tif (numRows === 0) {\n\t\t\tthrow new InsightError(\"No valid Section\");\n\t\t}\n\t\t// update member variables\n\t\tsectionsDatabase.set(newDataset.id, newDataset.sections);\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"30de2ed22663c6bc36d4215b60fd1000684c6a7c","contentHash":"13a7fd2428f34f5e616b5212cd1a76d4780c3ad1735cfab7c7d6f46e6c5fa897"},"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\sections\\SectionsParser.ts":{"path":"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\sections\\SectionsParser.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":19},"end":{"line":6,"column":55}},"4":{"start":{"line":7,"column":18},"end":{"line":7,"column":55}},"5":{"start":{"line":9,"column":19},"end":{"line":20,"column":5}},"6":{"start":{"line":21,"column":14},"end":{"line":21,"column":54}},"7":{"start":{"line":22,"column":14},"end":{"line":22,"column":63}},"8":{"start":{"line":23,"column":34},"end":{"line":23,"column":38}},"9":{"start":{"line":25,"column":34},"end":{"line":28,"column":9}},"10":{"start":{"line":26,"column":30},"end":{"line":26,"column":50}},"11":{"start":{"line":27,"column":12},"end":{"line":27,"column":75}},"12":{"start":{"line":27,"column":48},"end":{"line":27,"column":73}},"13":{"start":{"line":29,"column":38},"end":{"line":29,"column":120}},"14":{"start":{"line":29,"column":74},"end":{"line":29,"column":119}},"15":{"start":{"line":30,"column":8},"end":{"line":30,"column":37}},"16":{"start":{"line":33,"column":28},"end":{"line":33,"column":30}},"17":{"start":{"line":34,"column":25},"end":{"line":34,"column":27}},"18":{"start":{"line":35,"column":21},"end":{"line":35,"column":78}},"19":{"start":{"line":36,"column":8},"end":{"line":62,"column":9}},"20":{"start":{"line":37,"column":28},"end":{"line":60,"column":14}},"21":{"start":{"line":40,"column":16},"end":{"line":42,"column":17}},"22":{"start":{"line":41,"column":20},"end":{"line":41,"column":32}},"23":{"start":{"line":43,"column":46},"end":{"line":43,"column":76}},"24":{"start":{"line":44,"column":16},"end":{"line":44,"column":52}},"25":{"start":{"line":45,"column":16},"end":{"line":55,"column":19}},"26":{"start":{"line":46,"column":20},"end":{"line":54,"column":21}},"27":{"start":{"line":47,"column":43},"end":{"line":47,"column":74}},"28":{"start":{"line":48,"column":24},"end":{"line":48,"column":117}},"29":{"start":{"line":49,"column":24},"end":{"line":49,"column":78}},"30":{"start":{"line":50,"column":24},"end":{"line":50,"column":50}},"31":{"start":{"line":53,"column":24},"end":{"line":53,"column":71}},"32":{"start":{"line":56,"column":16},"end":{"line":56,"column":36}},"33":{"start":{"line":59,"column":16},"end":{"line":59,"column":26}},"34":{"start":{"line":61,"column":12},"end":{"line":61,"column":38}},"35":{"start":{"line":63,"column":8},"end":{"line":63,"column":39}},"36":{"start":{"line":64,"column":30},"end":{"line":64,"column":60}},"37":{"start":{"line":65,"column":8},"end":{"line":65,"column":29}},"38":{"start":{"line":68,"column":23},"end":{"line":68,"column":31}},"39":{"start":{"line":69,"column":52},"end":{"line":72,"column":10}},"40":{"start":{"line":70,"column":26},"end":{"line":70,"column":40}},"41":{"start":{"line":71,"column":12},"end":{"line":71,"column":25}},"42":{"start":{"line":73,"column":31},"end":{"line":79,"column":9}},"43":{"start":{"line":80,"column":47},"end":{"line":80,"column":91}},"44":{"start":{"line":80,"column":76},"end":{"line":80,"column":90}},"45":{"start":{"line":81,"column":31},"end":{"line":87,"column":9}},"46":{"start":{"line":88,"column":27},"end":{"line":88,"column":87}},"47":{"start":{"line":89,"column":8},"end":{"line":89,"column":26}},"48":{"start":{"line":92,"column":0},"end":{"line":92,"column":33}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":24,"column":4},"end":{"line":24,"column":5}},"loc":{"start":{"line":24,"column":34},"end":{"line":31,"column":5}},"line":24},"2":{"name":"(anonymous_2)","decl":{"start":{"line":25,"column":34},"end":{"line":25,"column":35}},"loc":{"start":{"line":25,"column":60},"end":{"line":28,"column":9}},"line":25},"3":{"name":"(anonymous_3)","decl":{"start":{"line":27,"column":37},"end":{"line":27,"column":38}},"loc":{"start":{"line":27,"column":48},"end":{"line":27,"column":73}},"line":27},"4":{"name":"(anonymous_4)","decl":{"start":{"line":29,"column":61},"end":{"line":29,"column":62}},"loc":{"start":{"line":29,"column":74},"end":{"line":29,"column":119}},"line":29},"5":{"name":"(anonymous_5)","decl":{"start":{"line":32,"column":4},"end":{"line":32,"column":5}},"loc":{"start":{"line":32,"column":35},"end":{"line":66,"column":5}},"line":32},"6":{"name":"(anonymous_6)","decl":{"start":{"line":39,"column":22},"end":{"line":39,"column":23}},"loc":{"start":{"line":39,"column":38},"end":{"line":57,"column":13}},"line":39},"7":{"name":"(anonymous_7)","decl":{"start":{"line":45,"column":46},"end":{"line":45,"column":47}},"loc":{"start":{"line":45,"column":59},"end":{"line":55,"column":17}},"line":45},"8":{"name":"(anonymous_8)","decl":{"start":{"line":58,"column":23},"end":{"line":58,"column":24}},"loc":{"start":{"line":58,"column":32},"end":{"line":60,"column":13}},"line":58},"9":{"name":"(anonymous_9)","decl":{"start":{"line":67,"column":4},"end":{"line":67,"column":5}},"loc":{"start":{"line":67,"column":35},"end":{"line":90,"column":5}},"line":67},"10":{"name":"(anonymous_10)","decl":{"start":{"line":69,"column":69},"end":{"line":69,"column":70}},"loc":{"start":{"line":69,"column":81},"end":{"line":72,"column":9}},"line":69},"11":{"name":"(anonymous_11)","decl":{"start":{"line":80,"column":64},"end":{"line":80,"column":65}},"loc":{"start":{"line":80,"column":76},"end":{"line":80,"column":90}},"line":80}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":40,"column":16},"end":{"line":42,"column":17}},"type":"if","locations":[{"start":{"line":40,"column":16},"end":{"line":42,"column":17}},{"start":{"line":40,"column":16},"end":{"line":42,"column":17}}],"line":40},"4":{"loc":{"start":{"line":46,"column":20},"end":{"line":54,"column":21}},"type":"if","locations":[{"start":{"line":46,"column":20},"end":{"line":54,"column":21}},{"start":{"line":46,"column":20},"end":{"line":54,"column":21}}],"line":46}},"s":{"0":1,"1":2,"2":1,"3":1,"4":1,"5":284,"6":284,"7":284,"8":1,"9":14621,"10":262769,"11":262769,"12":2627634,"13":14621,"14":262769,"15":14621,"16":38,"17":38,"18":38,"19":35,"20":7311,"21":7311,"22":1,"23":7310,"24":7310,"25":7310,"26":131378,"27":50060,"28":50060,"29":50060,"30":50060,"31":81318,"32":7310,"33":0,"34":7311,"35":35,"36":35,"37":35,"38":131378,"39":131378,"40":656890,"41":656890,"42":131378,"43":131378,"44":656890,"45":131378,"46":131378,"47":131378,"48":1},"f":{"0":2,"1":14621,"2":262769,"3":2627634,"4":262769,"5":38,"6":7311,"7":131378,"8":0,"9":131378,"10":656890,"11":656890},"b":{"0":[1,1,1],"1":[1,1],"2":[2,2],"3":[1,7310],"4":[50060,81318]},"inputSourceMap":{"version":3,"file":"C:/Users/oreak/IdeaProjects/project_team059/src/controller/sections/SectionsParser.ts","sources":["C:/Users/oreak/IdeaProjects/project_team059/src/controller/sections/SectionsParser.ts"],"names":[],"mappings":";;;;;AAAA,wDAA0B;AAC1B,wDAAoD;AAOpD,MAAqB,cAAc;IAC1B,YAAY,GAAa;QAChC,MAAM;QACN,QAAQ;QACR,OAAO;QACP,WAAW;QACX,SAAS;QACT,IAAI;QACJ,KAAK;QACL,MAAM;QACN,MAAM;QACN,OAAO;KACP,CAAC;IAIK,OAAO,GAAa,CAAC,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;IAE7D,OAAO,GAAa,CAAC,IAAI,EAAE,QAAQ,EAAE,OAAO,EAAE,WAAW,EAAE,SAAS,CAAC,CAAC;IAErE,MAAM,CAAC,oBAAoB,GAAG,IAAI,CAAC;IAQpC,mBAAmB,CAAC,QAAa;QACvC,MAAM,iBAAiB,GAAG,CAAC,OAAY,EAAE,WAAqB,EAAW,EAAE;YAC1E,MAAM,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACvC,OAAO,WAAW,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;QAChE,CAAC,CAAC;QAEF,MAAM,qBAAqB,GAAG,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAY,EAAE,EAAE,CACrE,iBAAiB,CAAC,OAAO,EAAE,IAAI,CAAC,YAAY,CAAC,CAC7C,CAAC;QACF,OAAO,qBAAqB,CAAC;IAC9B,CAAC;IAMM,KAAK,CAAC,oBAAoB,CAAC,EAAU;QAI3C,MAAM,WAAW,GAAU,EAAE,CAAC;QAC9B,MAAM,QAAQ,GAAc,EAAE,CAAC;QAG/B,MAAM,IAAI,GAAG,MAAM,kBAAE,CAAC,OAAO,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;QACvD,KAAK,MAAM,MAAM,IAAI,IAAI,EAAE;YAC1B,MAAM,OAAO,GAAG,kBAAE;iBAChB,QAAQ,CAAC,UAAU,EAAE,YAAY,MAAM,EAAE,CAAC;iBAC1C,IAAI,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE;gBACpB,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;oBAC7B,OAAO,IAAI,CAAC;iBACZ;gBACD,MAAM,qBAAqB,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;gBAC7D,IAAI,CAAC,MAAM,GAAG,qBAAqB,CAAC;gBAEpC,qBAAqB,CAAC,OAAO,CAAC,CAAC,OAAY,EAAE,EAAE;oBAC9C,IAAI,OAAO,CAAC,OAAO,KAAK,SAAS,EAAE;wBAClC,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;wBACnD,UAAU,CAAC,SAAS,CAAC,UAAU,CAAC,cAAc,CAAC,MAAM,CAAC,EAAE,cAAc,CAAC,oBAAoB,CAAC,CAAC;wBAC7F,UAAU,CAAC,IAAI,GAAG,cAAc,CAAC,oBAAoB,CAAC;wBACtD,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;qBAC1B;yBAAM;wBACN,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;qBAC/C;gBACF,CAAC,CAAC,CAAC;gBAEH,OAAO,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC;YACrB,CAAC,CAAC;iBACD,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;gBACd,MAAM,GAAG,CAAC;YACX,CAAC,CAAC,CAAC;YAEJ,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SAC1B;QAED,MAAM,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QAC/B,MAAM,aAAa,GAAkB,EAAE,EAAE,EAAE,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC;QACpE,OAAO,aAAa,CAAC;IACtB,CAAC;IAKO,aAAa,CAAC,QAAa,EAAE,KAAa;QACjD,MAAM,MAAM,GAAG,QAAQ,CAAC;QAExB,MAAM,CAAC,IAAI,EAAE,EAAE,EAAE,KAAK,EAAE,UAAU,EAAE,IAAI,CAAC,GAAa,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE;YACjF,MAAM,KAAK,GAAG,MAAM,CAAC,MAAM,CAAW,CAAC;YACvC,OAAO,KAAK,CAAC;QACd,CAAC,CAAC,CAAC;QAEH,MAAM,cAAc,GAAW;YAC9B,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC;YAClB,EAAE,EAAE,MAAM,CAAC,EAAE,CAAC;YACd,KAAK,EAAE,MAAM,CAAC,KAAK,CAAC;YACpB,UAAU,EAAE,MAAM,CAAC,UAAU,CAAC;YAC9B,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC;SAClB,CAAC;QAIF,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;QAEpF,MAAM,cAAc,GAAW;YAC9B,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC;YAClB,GAAG,EAAE,MAAM,CAAC,GAAG,CAAC;YAChB,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC;YAClB,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC;YAClB,KAAK,EAAE,MAAM,CAAC,KAAK,CAAC;SACpB,CAAC;QAEF,MAAM,UAAU,GAAY,IAAI,iBAAO,CAAC,KAAK,EAAE,cAAc,EAAE,cAAc,CAAC,CAAC;QAE/E,OAAO,UAAU,CAAC;IACnB,CAAC;;AA1HF,iCA2HC","sourcesContent":["import fs from \"fs-extra\";\nimport Section, { Mfield, Sfield } from \"./Section\";\n\nexport interface DatasetRecord {\n\tid: string;\n\tsections: Section[];\n}\n\nexport default class SectionsParser {\n\tprivate valid_fields: string[] = [\n\t\t\"Year\",\n\t\t\"Course\",\n\t\t\"Title\",\n\t\t\"Professor\",\n\t\t\"Subject\",\n\t\t\"id\",\n\t\t\"Avg\",\n\t\t\"Pass\",\n\t\t\"Fail\",\n\t\t\"Audit\",\n\t];\n\n\t// Keep order of mFields and sFields according to chart found in Section Specification sheet\n\t// for consistency\n\tpublic mFields: string[] = [\"Year\", \"Avg\", \"Pass\", \"Fail\", \"Audit\"];\n\n\tpublic sFields: string[] = [\"id\", \"Course\", \"Title\", \"Professor\", \"Subject\"];\n\n\tprivate static OVERALL_SECTION_YEAR = 1900;\n\n\t// REQUIRES: jsonData - parsed JSON Object of the result key in a given course file\n\t//\n\t// EFFECTS: Iterate through each section in a given course file and for each section obtain all the sfields and mfields\n\t// \t\t\tand checks that each section contains all the fields in the variable valid_fields, else filter out.\n\t//\n\t// OUTPUT: returns all the valid sections as a JSONObject.\n\tpublic filterValidSections(jsonData: any): any {\n\t\tconst hasAllValidFields = (section: any, validFields: string[]): boolean => {\n\t\t\tconst fieldKeys = Object.keys(section);\n\t\t\treturn validFields.every((field) => fieldKeys.includes(field));\n\t\t};\n\n\t\tconst validSectionsInCourse = jsonData.result.filter((section: any) =>\n\t\t\thasAllValidFields(section, this.valid_fields)\n\t\t);\n\t\treturn validSectionsInCourse;\n\t}\n\n\t// REQUIRES: id - name of dataset\n\t// EFFECTS: A helper function that can be used by performQuery to turn a dataset written in the disk into a\n\t// \t\t\tDatasetRecord  -> a key value pair of the all the valid sections associated with the given dataset id.\n\t// OUTPUT:  DatasetRecord, mapping the list of Sections to its associated dataset id\n\tpublic async turnDatasetToSection(id: string): Promise<DatasetRecord> {\n\t\t// tracks number of sections in a given dataset and is initialized to 0\n\n\t\t// where each promise is appended to for each course object\n\t\tconst allPromises: any[] = [];\n\t\tconst sections: Section[] = [];\n\n\t\t// list of all courses under the dataset file\n\t\tconst path = await fs.readdir(`./data/${id}/courses/`);\n\t\tfor (const course of path) {\n\t\t\tconst promise = fs\n\t\t\t\t.readJson(`./data/${id}/courses/${course}`)\n\t\t\t\t.then(async (file) => {\n\t\t\t\t\tif (file.result.length === 0) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\tconst validSectionsInCourse = this.filterValidSections(file);\n\t\t\t\t\tfile.result = validSectionsInCourse;\n\t\t\t\t\t// turn all valid sections to Sections objects\n\t\t\t\t\tvalidSectionsInCourse.forEach((section: any) => {\n\t\t\t\t\t\tif (section.Section === \"overall\") {\n\t\t\t\t\t\t\tconst newSection = this.createSection(section, id);\n\t\t\t\t\t\t\tnewSection.setMfield(newSection.getMFieldIndex(\"year\"), SectionsParser.OVERALL_SECTION_YEAR);\n\t\t\t\t\t\t\tnewSection.year = SectionsParser.OVERALL_SECTION_YEAR;\n\t\t\t\t\t\t\tsections.push(newSection);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsections.push(this.createSection(section, id));\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\treturn { id, file };\n\t\t\t\t})\n\t\t\t\t.catch((err) => {\n\t\t\t\t\tthrow err;\n\t\t\t\t});\n\n\t\t\tallPromises.push(promise);\n\t\t}\n\n\t\tawait Promise.all(allPromises);\n\t\tconst datasetRecord: DatasetRecord = { id: id, sections: sections };\n\t\treturn datasetRecord;\n\t}\n\n\t// REQUIRES: jsonData - parsed JSON Object of a valid section from the result key in a given course file\n\t// EFFECTS: Retrieves the fields of the section and populate the values of the sfields and mfields into a Section object\n\t// OUTPUT: newly populated and created Section object\n\tprivate createSection(jsonData: any, setId: string): Section {\n\t\tconst result = jsonData;\n\n\t\tconst [uuid, id, title, instructor, dept]: string[] = this.sFields.map((sfield) => {\n\t\t\tconst value = result[sfield] as string;\n\t\t\treturn value;\n\t\t});\n\n\t\tconst sectionSfields: Sfield = {\n\t\t\tuuid: String(uuid),\n\t\t\tid: String(id),\n\t\t\ttitle: String(title),\n\t\t\tinstructor: String(instructor),\n\t\t\tdept: String(dept),\n\t\t};\n\n\t\t//console.log(typeof sectionSfields.uuid)\n\n\t\tconst [year, avg, pass, fail, audit] = this.mFields.map((mfield) => result[mfield]);\n\n\t\tconst sectionMfields: Mfield = {\n\t\t\tyear: Number(year),\n\t\t\tavg: Number(avg),\n\t\t\tpass: Number(pass),\n\t\t\tfail: Number(fail),\n\t\t\taudit: Number(audit),\n\t\t};\n\n\t\tconst newSection: Section = new Section(setId, sectionMfields, sectionSfields);\n\t\t//console.log(typeof newSection.getSfields().id)\n\t\treturn newSection;\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"8320c5ab000fbb1c6dfc2b3323ab21cd5b9b5fbf","contentHash":"f347d08dbd596ec0430619cf3312438518a108df2380b4650f62f039ac2d404c"},"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\sections\\Section.ts":{"path":"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\sections\\Section.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":18,"column":8},"end":{"line":18,"column":31}},"2":{"start":{"line":19,"column":8},"end":{"line":19,"column":32}},"3":{"start":{"line":20,"column":8},"end":{"line":20,"column":32}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":33}},"5":{"start":{"line":22,"column":8},"end":{"line":22,"column":33}},"6":{"start":{"line":23,"column":8},"end":{"line":23,"column":35}},"7":{"start":{"line":24,"column":8},"end":{"line":24,"column":31}},"8":{"start":{"line":25,"column":8},"end":{"line":25,"column":33}},"9":{"start":{"line":26,"column":8},"end":{"line":26,"column":33}},"10":{"start":{"line":27,"column":8},"end":{"line":27,"column":29}},"11":{"start":{"line":28,"column":8},"end":{"line":28,"column":35}},"12":{"start":{"line":29,"column":8},"end":{"line":29,"column":45}},"13":{"start":{"line":30,"column":8},"end":{"line":30,"column":33}},"14":{"start":{"line":33,"column":21},"end":{"line":33,"column":66}},"15":{"start":{"line":34,"column":8},"end":{"line":36,"column":9}},"16":{"start":{"line":35,"column":12},"end":{"line":35,"column":45}},"17":{"start":{"line":37,"column":20},"end":{"line":37,"column":31}},"18":{"start":{"line":38,"column":8},"end":{"line":38,"column":36}},"19":{"start":{"line":41,"column":21},"end":{"line":41,"column":61}},"20":{"start":{"line":42,"column":8},"end":{"line":44,"column":9}},"21":{"start":{"line":43,"column":12},"end":{"line":43,"column":45}},"22":{"start":{"line":45,"column":20},"end":{"line":45,"column":31}},"23":{"start":{"line":46,"column":8},"end":{"line":46,"column":36}},"24":{"start":{"line":49,"column":21},"end":{"line":49,"column":61}},"25":{"start":{"line":50,"column":8},"end":{"line":50,"column":36}},"26":{"start":{"line":53,"column":0},"end":{"line":53,"column":26}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":17,"column":4},"end":{"line":17,"column":5}},"loc":{"start":{"line":17,"column":41},"end":{"line":31,"column":5}},"line":17},"1":{"name":"(anonymous_1)","decl":{"start":{"line":32,"column":4},"end":{"line":32,"column":5}},"loc":{"start":{"line":32,"column":29},"end":{"line":39,"column":5}},"line":32},"2":{"name":"(anonymous_2)","decl":{"start":{"line":40,"column":4},"end":{"line":40,"column":5}},"loc":{"start":{"line":40,"column":29},"end":{"line":47,"column":5}},"line":40},"3":{"name":"(anonymous_3)","decl":{"start":{"line":48,"column":4},"end":{"line":48,"column":5}},"loc":{"start":{"line":48,"column":27},"end":{"line":51,"column":5}},"line":48}},"branchMap":{"0":{"loc":{"start":{"line":34,"column":8},"end":{"line":36,"column":9}},"type":"if","locations":[{"start":{"line":34,"column":8},"end":{"line":36,"column":9}},{"start":{"line":34,"column":8},"end":{"line":36,"column":9}}],"line":34},"1":{"loc":{"start":{"line":34,"column":12},"end":{"line":34,"column":45}},"type":"binary-expr","locations":[{"start":{"line":34,"column":12},"end":{"line":34,"column":21}},{"start":{"line":34,"column":25},"end":{"line":34,"column":45}}],"line":34},"2":{"loc":{"start":{"line":42,"column":8},"end":{"line":44,"column":9}},"type":"if","locations":[{"start":{"line":42,"column":8},"end":{"line":44,"column":9}},{"start":{"line":42,"column":8},"end":{"line":44,"column":9}}],"line":42},"3":{"loc":{"start":{"line":42,"column":12},"end":{"line":42,"column":44}},"type":"binary-expr","locations":[{"start":{"line":42,"column":12},"end":{"line":42,"column":21}},{"start":{"line":42,"column":25},"end":{"line":42,"column":44}}],"line":42}},"s":{"0":1,"1":131378,"2":131378,"3":131378,"4":131378,"5":131378,"6":131378,"7":131378,"8":131378,"9":131378,"10":131378,"11":131378,"12":131378,"13":131378,"14":0,"15":0,"16":0,"17":0,"18":0,"19":50060,"20":50060,"21":0,"22":50060,"23":50060,"24":50060,"25":50060,"26":1},"f":{"0":131378,"1":0,"2":50060,"3":50060},"b":{"0":[0,0],"1":[0,0],"2":[0,50060],"3":[50060,50060]},"inputSourceMap":{"version":3,"file":"C:/Users/oreak/IdeaProjects/project_team059/src/controller/sections/Section.ts","sources":["C:/Users/oreak/IdeaProjects/project_team059/src/controller/sections/Section.ts"],"names":[],"mappings":";;AAgBA,MAAqB,OAAO;IACpB,SAAS,CAAS;IAClB,IAAI,CAAS;IACb,EAAE,CAAS;IACX,KAAK,CAAS;IACd,UAAU,CAAS;IACnB,IAAI,CAAS;IAEb,IAAI,CAAS;IACb,GAAG,CAAS;IACZ,IAAI,CAAS;IACb,IAAI,CAAS;IACb,KAAK,CAAS;IAEb,QAAQ,CAAS;IACjB,QAAQ,CAAS;IAMzB,YAAY,KAAa,EAAE,OAAe,EAAE,OAAe;QAC1D,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QAExB,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;QACzB,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;QACzB,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;QAC3B,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC;QACvB,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;QAEzB,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;QACzB,IAAI,CAAC,EAAE,GAAG,OAAO,CAAC,EAAE,CAAC;QACrB,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;QAC3B,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;QACrC,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;IAC1B,CAAC;IACM,SAAS,CAAC,KAAa,EAAE,MAAc;QAC7C,MAAM,IAAI,GAAqB,CAAC,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,YAAY,EAAE,MAAM,CAAC,CAAC;QAE7E,IAAI,KAAK,GAAG,CAAC,IAAI,KAAK,IAAI,IAAI,CAAC,MAAM,EAAE;YACtC,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;SACjC;QAED,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC;QACxB,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC;IAC7B,CAAC;IAEM,SAAS,CAAC,KAAa,EAAE,MAAc;QAC7C,MAAM,IAAI,GAAqB,CAAC,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;QACxE,IAAI,KAAK,GAAG,CAAC,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,EAAE;YACrC,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;SACjC;QACD,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC;QACxB,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC;IAC7B,CAAC;IAEM,cAAc,CAAC,MAAc;QACnC,MAAM,IAAI,GAAqB,CAAC,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;QACxE,OAAO,IAAI,CAAC,OAAO,CAAC,MAAsB,CAAC,CAAC;IAE7C,CAAC;CA8JD;AA5ND,0BA4NC","sourcesContent":["export interface Sfield {\n\tuuid: string;\n\tid: string;\n\ttitle: string;\n\tinstructor: string;\n\tdept: string;\n}\n\nexport interface Mfield {\n\tyear: number;\n\tavg: number;\n\tpass: number;\n\tfail: number;\n\taudit: number;\n}\n\nexport default class Section {\n\tpublic datasetId: string;\n\tpublic uuid: string;\n\tpublic id: string;\n\tpublic title: string;\n\tpublic instructor: string;\n\tpublic dept: string;\n\n\tpublic year: number;\n\tpublic avg: number;\n\tpublic pass: number;\n\tpublic fail: number;\n\tpublic audit: number;\n\n\tprivate _mfields: Mfield;\n\tprivate _sfields: Sfield;\n\n\t// public getMfields(): Mfield {\n\t// \treturn this._mfields;\n\t// }\n\n\tconstructor(setId: string, mfields: Mfield, sfields: Sfield) {\n\t\tthis.datasetId = setId;\n\t\tthis._mfields = mfields;\n\t\tthis._sfields = sfields;\n\n\t\tthis.fail = mfields.fail;\n\t\tthis.pass = mfields.pass;\n\t\tthis.audit = mfields.audit;\n\t\tthis.avg = mfields.avg;\n\t\tthis.year = mfields.year;\n\n\t\tthis.uuid = sfields.uuid;\n\t\tthis.id = sfields.id;\n\t\tthis.title = sfields.title;\n\t\tthis.instructor = sfields.instructor;\n\t\tthis.dept = sfields.dept;\n\t}\n\tpublic setSField(index: number, newVal: string): void {\n\t\tconst keys: (keyof Sfield)[] = [\"uuid\", \"id\", \"title\", \"instructor\", \"dept\"];\n\n\t\tif (index < 0 || index >= keys.length) {\n\t\t\tthrow new Error(\"Out of bounds\");\n\t\t}\n\n\t\tconst key = keys[index];\n\t\tthis._sfields[key] = newVal;\n\t}\n\n\tpublic setMfield(index: number, newVal: number): void {\n\t\tconst keys: (keyof Mfield)[] = [\"year\", \"avg\", \"pass\", \"fail\", \"audit\"];\n\t\tif (index < 0 || index > keys.length) {\n\t\t\tthrow new Error(\"Out of bounds\");\n\t\t}\n\t\tconst key = keys[index];\n\t\tthis._mfields[key] = newVal;\n\t}\n\n\tpublic getMFieldIndex(mfield: string): number {\n\t\tconst keys: (keyof Mfield)[] = [\"year\", \"avg\", \"pass\", \"fail\", \"audit\"];\n\t\treturn keys.indexOf(mfield as keyof Mfield);\n\t\t// -1 if index is not found\n\t}\n\n\t// public getMFieldByIndex(index: number): number {\n\t// \tconst keys: (keyof Mfield)[] = [\"year\", \"avg\", \"pass\", \"fail\", \"audit\"];\n\t// \tif (index < 0 || index > keys.length) {\n\t// \t\tthrow new Error(\"Out of bounds\");\n\t// \t}\n\t// \treturn this._mfields[keys[index]];\n\t// }\n\n\t// public getSFieldByIndex(index: number): string {\n\t// \tconst keys: (keyof Sfield)[] = [\"uuid\", \"id\", \"title\", \"instructor\", \"dept\"];\n\t// \tif (index < 0 || index > keys.length) {\n\t// \t\tthrow new Error(\"Out of bounds\");\n\t// \t}\n\t// \treturn this._sfields[keys[index]];\n\t// }\n\t//\n\t// public getSFieldIndex(sfield: string): number {\n\t// \tconst keys: (keyof Sfield)[] = [\"uuid\", \"id\", \"title\", \"instructor\", \"dept\"];\n\t// \treturn keys.indexOf(sfield as keyof Sfield);\n\t// \t// -1 if index is not found\n\t// }\n\n\t//\n\t// public setSetID(newId: string): void {\n\t// \tthis.datasetId = newId;\n\t// }\n\t//\n\n\t// public setSField(index: number, newVal: string): void {\n\t// \tconst keys: (keyof Sfield)[] = [\"uuid\", \"id\", \"title\", \"instructor\", \"dept\"];\n\t// \tif (index < 0 || index > keys.length) {\n\t// \t\tthrow new Error(\"Out of bounds\");\n\t// \t}\n\t// \tthis._sfields[keys[index]] = newVal;\n\t// }\n\t//\n\t// public getSfields(): Sfield {\n\t// \treturn this._sfields;\n\t// }\n\t//\n\t// public setSfields(value: Sfield): void {\n\t// \tthis._sfields = value;\n\t// }\n\t// public setUuid(newUuid: string): void {\n\t// \tthis.uuid = newUuid;\n\t// \tthis._sfields.uuid = newUuid;\n\t// }\n\t//\n\t// public setId(newId: string): void {\n\t// \tthis.id = newId;\n\t// \tthis._sfields.id = newId;\n\t// }\n\t//\n\t// public setTitle(newTitle: string): void {\n\t// \tthis.uuid = newTitle;\n\t// \tthis._sfields.title = newTitle;\n\t// }\n\t//\n\t// public setInstructor(newInstructor: string): void {\n\t// \tthis.instructor = newInstructor;\n\t// \tthis._sfields.instructor = newInstructor;\n\t// }\n\t//\n\t// public setDept(newDept: string): void {\n\t// \tthis.dept = newDept;\n\t// \tthis._sfields.dept = newDept;\n\t// }\n\t//\n\t// public setYear(newYear: number): void {\n\t// \tthis.year = newYear;\n\t// \tthis._mfields.year = newYear;\n\t// }\n\t//\n\t// public setAvg(newAvg: number): void {\n\t// \tthis.avg = newAvg;\n\t// \tthis._mfields.avg = newAvg;\n\t// }\n\t//\n\t// public setPass(newPass: number): void {\n\t// \tthis.pass = newPass;\n\t// \tthis._mfields.pass = newPass;\n\t// }\n\t//\n\t// public setFail(newFail: number): void {\n\t// \tthis.fail = newFail;\n\t// \tthis._mfields.fail = newFail;\n\t// }\n\t//\n\t// public setAudit(newAudit: number): void {\n\t// \tthis.audit = newAudit;\n\t// \tthis._mfields.audit = newAudit;\n\t// }\n\t//\n\t// public getSetID(): string {\n\t// \treturn this.datasetId;\n\t// }\n\t//\n\t// public getUuid(): string {\n\t// \treturn this.uuid;\n\t// }\n\t//\n\t// public getId(): string {\n\t// \treturn this.id;\n\t// }\n\t//\n\t// public getTitle(): string {\n\t// \treturn this.title;\n\t// }\n\t//\n\t// public getInstructor(): string {\n\t// \treturn this.instructor;\n\t// }\n\t//\n\t// public getDept(): string {\n\t// \treturn this.dept;\n\t// }\n\t//\n\t// public getYear(): number {\n\t// \treturn this.year;\n\t// }\n\t//\n\t// public getAvg(): number {\n\t// \treturn this.avg;\n\t// }\n\t//\n\t// public getPass(): number {\n\t// \treturn this.pass;\n\t// }\n\t//\n\t// public getFail(): number {\n\t// \treturn this.fail;\n\t// }\n\t//\n\t// public getAudit(): number {\n\t// \treturn this.audit;\n\t// }\n\n\t// private convertToJSON(): { setID: string; sFields: Sfield; mFields: Mfield } {\n\t// \treturn {\n\t// \t\tsetID: this.getSetID(),\n\t// \t\tsFields: {\n\t// \t\t\tuuid: this._sfields.uuid,\n\t// \t\t\tid: this._sfields.id,\n\t// \t\t\ttitle: this._sfields.title,\n\t// \t\t\tinstructor: this._sfields.instructor,\n\t// \t\t\tdept: this._sfields.dept,\n\t// \t\t},\n\t// \t\tmFields: {\n\t// \t\t\tyear: this._mfields.year,\n\t// \t\t\tavg: this._mfields.avg,\n\t// \t\t\tpass: this._mfields.pass,\n\t// \t\t\tfail: this._mfields.fail,\n\t// \t\t\taudit: this._mfields.audit,\n\t// \t\t},\n\t// \t};\n\t// }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"1a241ae65b67f9593899264395c7474275f3f2bb","contentHash":"0bf18bed54a2d9f6e6330e2dfaff57a8b01f016d50567d3dabd12683bd92ff9f"},"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\sections\\SectionDiskWriter.ts":{"path":"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\sections\\SectionDiskWriter.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":19},"end":{"line":6,"column":55}},"4":{"start":{"line":7,"column":16},"end":{"line":7,"column":49}},"5":{"start":{"line":8,"column":25},"end":{"line":8,"column":69}},"6":{"start":{"line":11,"column":8},"end":{"line":11,"column":16}},"7":{"start":{"line":14,"column":23},"end":{"line":14,"column":53}},"8":{"start":{"line":15,"column":20},"end":{"line":15,"column":59}},"9":{"start":{"line":16,"column":8},"end":{"line":16,"column":46}},"10":{"start":{"line":19,"column":28},"end":{"line":19,"column":30}},"11":{"start":{"line":20,"column":8},"end":{"line":34,"column":9}},"12":{"start":{"line":21,"column":25},"end":{"line":21,"column":28}},"13":{"start":{"line":22,"column":12},"end":{"line":33,"column":13}},"14":{"start":{"line":23,"column":39},"end":{"line":31,"column":18}},"15":{"start":{"line":24,"column":37},"end":{"line":24,"column":57}},"16":{"start":{"line":25,"column":20},"end":{"line":27,"column":21}},"17":{"start":{"line":26,"column":24},"end":{"line":26,"column":36}},"18":{"start":{"line":28,"column":50},"end":{"line":28,"column":84}},"19":{"start":{"line":29,"column":20},"end":{"line":29,"column":60}},"20":{"start":{"line":30,"column":20},"end":{"line":30,"column":46}},"21":{"start":{"line":32,"column":16},"end":{"line":32,"column":49}},"22":{"start":{"line":35,"column":31},"end":{"line":35,"column":61}},"23":{"start":{"line":36,"column":8},"end":{"line":36,"column":58}},"24":{"start":{"line":39,"column":20},"end":{"line":41,"column":9}},"25":{"start":{"line":42,"column":21},"end":{"line":42,"column":40}},"26":{"start":{"line":43,"column":8},"end":{"line":43,"column":71}},"27":{"start":{"line":46,"column":34},"end":{"line":46,"column":36}},"28":{"start":{"line":47,"column":8},"end":{"line":52,"column":9}},"29":{"start":{"line":48,"column":12},"end":{"line":51,"column":13}},"30":{"start":{"line":49,"column":35},"end":{"line":49,"column":117}},"31":{"start":{"line":50,"column":16},"end":{"line":50,"column":51}},"32":{"start":{"line":53,"column":8},"end":{"line":53,"column":45}},"33":{"start":{"line":56,"column":0},"end":{"line":56,"column":36}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":10,"column":4},"end":{"line":10,"column":5}},"loc":{"start":{"line":10,"column":18},"end":{"line":12,"column":5}},"line":10},"2":{"name":"(anonymous_2)","decl":{"start":{"line":13,"column":4},"end":{"line":13,"column":5}},"loc":{"start":{"line":13,"column":48},"end":{"line":17,"column":5}},"line":13},"3":{"name":"(anonymous_3)","decl":{"start":{"line":18,"column":4},"end":{"line":18,"column":5}},"loc":{"start":{"line":18,"column":37},"end":{"line":37,"column":5}},"line":18},"4":{"name":"(anonymous_4)","decl":{"start":{"line":23,"column":75},"end":{"line":23,"column":76}},"loc":{"start":{"line":23,"column":95},"end":{"line":31,"column":17}},"line":23},"5":{"name":"(anonymous_5)","decl":{"start":{"line":38,"column":4},"end":{"line":38,"column":5}},"loc":{"start":{"line":38,"column":50},"end":{"line":44,"column":5}},"line":38},"6":{"name":"(anonymous_6)","decl":{"start":{"line":45,"column":4},"end":{"line":45,"column":5}},"loc":{"start":{"line":45,"column":49},"end":{"line":54,"column":5}},"line":45}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":22,"column":12},"end":{"line":33,"column":13}},"type":"if","locations":[{"start":{"line":22,"column":12},"end":{"line":33,"column":13}},{"start":{"line":22,"column":12},"end":{"line":33,"column":13}}],"line":22},"4":{"loc":{"start":{"line":22,"column":16},"end":{"line":22,"column":67}},"type":"binary-expr","locations":[{"start":{"line":22,"column":16},"end":{"line":22,"column":42}},{"start":{"line":22,"column":46},"end":{"line":22,"column":67}}],"line":22},"5":{"loc":{"start":{"line":25,"column":20},"end":{"line":27,"column":21}},"type":"if","locations":[{"start":{"line":25,"column":20},"end":{"line":27,"column":21}},{"start":{"line":25,"column":20},"end":{"line":27,"column":21}}],"line":25},"6":{"loc":{"start":{"line":48,"column":12},"end":{"line":51,"column":13}},"type":"if","locations":[{"start":{"line":48,"column":12},"end":{"line":51,"column":13}},{"start":{"line":48,"column":12},"end":{"line":51,"column":13}}],"line":48}},"s":{"0":1,"1":3,"2":1,"3":1,"4":1,"5":1,"6":142,"7":41,"8":41,"9":39,"10":39,"11":39,"12":12076,"13":12076,"14":12069,"15":12069,"16":12068,"17":4757,"18":7311,"19":7311,"20":7311,"21":12069,"22":39,"23":38,"24":34,"25":34,"26":34,"27":38,"28":38,"29":12068,"30":7311,"31":7311,"32":38,"33":1},"f":{"0":3,"1":142,"2":41,"3":39,"4":12069,"5":34,"6":38},"b":{"0":[1,1,1],"1":[1,2],"2":[3,3],"3":[12069,7],"4":[12076,12069],"5":[4757,7311],"6":[7311,4757]},"inputSourceMap":{"version":3,"file":"C:/Users/oreak/IdeaProjects/project_team059/src/controller/sections/SectionDiskWriter.ts","sources":["C:/Users/oreak/IdeaProjects/project_team059/src/controller/sections/SectionDiskWriter.ts"],"names":[],"mappings":";;;;;AAAA,wDAA0B;AAC1B,kDAA0B;AAC1B,sEAA8C;AAG9C,MAAqB,iBAAkB,SAAQ,wBAAc;IAG5D;QACC,KAAK,EAAE,CAAC;IACT,CAAC;IAEM,KAAK,CAAC,wBAAwB,CAAC,OAAe,EAAE,EAAU;QAChE,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;QAC9C,MAAM,GAAG,GAAG,MAAM,eAAK,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QAC1C,MAAM,IAAI,CAAC,iBAAiB,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;IACvC,CAAC;IASO,KAAK,CAAC,iBAAiB,CAAC,GAAU,EAAE,EAAU;QACrD,MAAM,WAAW,GAAG,EAAE,CAAC;QAEvB,KAAK,MAAM,GAAG,IAAI,GAAG,CAAC,KAAK,EAAE;YAC5B,MAAM,IAAI,GAAG,GAAG,CAAC;YAEjB,IAAI,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE;gBACxD,MAAM,cAAc,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,QAAQ,EAAE,EAAE;oBAC7E,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;oBAEtC,IAAI,QAAQ,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;wBACjC,OAAO,IAAI,CAAC;qBACZ;oBAED,MAAM,qBAAqB,GAAG,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC;oBACjE,QAAQ,CAAC,MAAM,GAAG,qBAAqB,CAAC;oBAExC,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;gBAC3B,CAAC,CAAC,CAAC;gBAEH,WAAW,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;aACjC;SACD;QAED,MAAM,cAAc,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QACtD,MAAM,IAAI,CAAC,kBAAkB,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC;IACnD,CAAC;IAGM,KAAK,CAAC,oBAAoB,CAAC,EAAU,EAAE,IAAwB,EAAE,OAAe;QACtF,MAAM,GAAG,GAAG;YACX,KAAK,EAAE,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;SAC9B,CAAC;QAEF,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;QACjC,MAAM,kBAAE,CAAC,UAAU,CAAC,UAAU,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;IAChD,CAAC;IAQM,KAAK,CAAC,kBAAkB,CAC9B,cAAiE,EACjE,EAAU;QAEV,MAAM,iBAAiB,GAAG,EAAE,CAAC;QAC7B,KAAK,MAAM,MAAM,IAAI,cAAc,EAAE;YACpC,IAAI,MAAM,EAAE;gBACX,MAAM,UAAU,GAAG,kBAAE,CAAC,UAAU,CAAC,UAAU,EAAE,IAAI,MAAM,CAAC,IAAI,OAAO,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC;gBACtF,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;aACnC;SACD;QACD,MAAM,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;IACtC,CAAC;CACD;AA7ED,oCA6EC","sourcesContent":["import fs from \"fs-extra\";\nimport JSZip from \"jszip\";\nimport SectionsParser from \"./SectionsParser\";\nimport { InsightDatasetKind } from \"../IInsightFacade\";\n\nexport default class SectionDiskWriter extends SectionsParser {\n\t// Every SectionDiskWriter needs to be able to parse sections using SectionsParser\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tpublic async logSectionsDatasetOnDisk(content: string, id: string): Promise<void> {\n\t\tconst buffer = Buffer.from(content, \"base64\");\n\t\tconst zip = await JSZip.loadAsync(buffer);\n\t\tawait this.logSectionDataset(zip, id);\n\t}\n\n\t// REQUIRES: zip - current dataset content as a JSZIP\n\t// \t\t\t  id - name of dataset\n\t// EFFECTS: parses the JSZIP files in the dataset and sorts through each JSON file containing each course, then\n\t// \t\t\tparses the JSON object to obtain the 'result' object and finds all sections,\n\t//          filters only valid sections,\n\t//          write the valid sections with the associated dataset id onto the disk\n\t// OUTPUT: void\n\tprivate async logSectionDataset(zip: JSZip, id: string): Promise<void> {\n\t\tconst allPromises = [];\n\n\t\tfor (const key in zip.files) {\n\t\t\tconst name = key;\n\n\t\t\tif (name.match(/^courses\\/\\w/) && name.match(/^[^.]+$/)) {\n\t\t\t\tconst promiseContent = zip.files[key].async(\"string\").then(async (content0) => {\n\t\t\t\t\tconst jsonData = JSON.parse(content0);\n\n\t\t\t\t\tif (jsonData.result.length === 0) {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst validSectionsInCourse = this.filterValidSections(jsonData);\n\t\t\t\t\tjsonData.result = validSectionsInCourse;\n\n\t\t\t\t\treturn { name, jsonData };\n\t\t\t\t});\n\n\t\t\t\tallPromises.push(promiseContent);\n\t\t\t}\n\t\t}\n\n\t\tconst courseDataList = await Promise.all(allPromises);\n\t\tawait this.storeCoursesOnDisk(courseDataList, id);\n\t}\n\n\t// Writes InsightDataset info about a dataset\n\tpublic async logInsightKindToDisk(id: string, kind: InsightDatasetKind, numRows: number): Promise<void> {\n\t\tconst obj = {\n\t\t\ttable: [{ id, kind, numRows }],\n\t\t};\n\t\t//obj.table.push({id: id, kind: kind, numRows: numRows} as never);\n\t\tconst json = JSON.stringify(obj);\n\t\tawait fs.outputFile(`./data/${id}/kind`, json);\n\t}\n\n\t// REQUIRES: courseDataList: list of JSON files associated with course files and their accompanied name in a dataset\n\t// \t\t\t\t\t\t\tex - dataset 'test3' containing the courses CPSC 110 --> {jSON FILE CPSC110, \"CPSC 110\"}\n\t//\t\t\t id: dataset id name\n\t// EFFECTS: takes the list of courses and writes them as a JSON file to be stored on to disk with the following directory:\n\t//\t\t\t\"./data/${id}/${ course name}.json\"\n\t// OUTPUT: void\n\tpublic async storeCoursesOnDisk(\n\t\tcourseDataList: Awaited<null | { jsonData: any; name: string }>[],\n\t\tid: string\n\t): Promise<void> {\n\t\tconst allCoursePromises = [];\n\t\tfor (const course of courseDataList) {\n\t\t\tif (course) {\n\t\t\t\tconst courseData = fs.outputJson(`./data/${id}/${course.name}.json`, course.jsonData);\n\t\t\t\tallCoursePromises.push(courseData);\n\t\t\t}\n\t\t}\n\t\tawait Promise.all(allCoursePromises);\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"dc3d7d4cb02591bb0d1d872827401e3c874e1d5e","contentHash":"a02bc9423c21abce4292a0c66232ae38c6cbffd73ea0c57b5b09047472710008"},"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\rooms\\RoomDiskReader.ts":{"path":"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\rooms\\RoomDiskReader.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":22},"end":{"line":6,"column":63}},"4":{"start":{"line":7,"column":19},"end":{"line":7,"column":55}},"5":{"start":{"line":8,"column":15},"end":{"line":8,"column":49}},"6":{"start":{"line":11,"column":8},"end":{"line":11,"column":16}},"7":{"start":{"line":14,"column":28},"end":{"line":14,"column":30}},"8":{"start":{"line":15,"column":22},"end":{"line":15,"column":24}},"9":{"start":{"line":16,"column":21},"end":{"line":16,"column":76}},"10":{"start":{"line":17,"column":8},"end":{"line":29,"column":9}},"11":{"start":{"line":18,"column":28},"end":{"line":27,"column":14}},"12":{"start":{"line":21,"column":32},"end":{"line":21,"column":61}},"13":{"start":{"line":22,"column":16},"end":{"line":22,"column":36}},"14":{"start":{"line":23,"column":16},"end":{"line":23,"column":36}},"15":{"start":{"line":26,"column":16},"end":{"line":26,"column":26}},"16":{"start":{"line":28,"column":12},"end":{"line":28,"column":38}},"17":{"start":{"line":30,"column":8},"end":{"line":30,"column":39}},"18":{"start":{"line":31,"column":30},"end":{"line":31,"column":54}},"19":{"start":{"line":32,"column":8},"end":{"line":32,"column":29}},"20":{"start":{"line":35,"column":28},"end":{"line":35,"column":30}},"21":{"start":{"line":36,"column":8},"end":{"line":39,"column":11}},"22":{"start":{"line":37,"column":28},"end":{"line":37,"column":57}},"23":{"start":{"line":38,"column":12},"end":{"line":38,"column":38}},"24":{"start":{"line":40,"column":24},"end":{"line":40,"column":54}},"25":{"start":{"line":41,"column":8},"end":{"line":43,"column":11}},"26":{"start":{"line":42,"column":12},"end":{"line":42,"column":55}},"27":{"start":{"line":44,"column":8},"end":{"line":44,"column":29}},"28":{"start":{"line":47,"column":0},"end":{"line":47,"column":33}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":10,"column":4},"end":{"line":10,"column":5}},"loc":{"start":{"line":10,"column":18},"end":{"line":12,"column":5}},"line":10},"2":{"name":"(anonymous_2)","decl":{"start":{"line":13,"column":4},"end":{"line":13,"column":5}},"loc":{"start":{"line":13,"column":32},"end":{"line":33,"column":5}},"line":13},"3":{"name":"(anonymous_3)","decl":{"start":{"line":20,"column":22},"end":{"line":20,"column":23}},"loc":{"start":{"line":20,"column":38},"end":{"line":24,"column":13}},"line":20},"4":{"name":"(anonymous_4)","decl":{"start":{"line":25,"column":23},"end":{"line":25,"column":24}},"loc":{"start":{"line":25,"column":32},"end":{"line":27,"column":13}},"line":25},"5":{"name":"(anonymous_5)","decl":{"start":{"line":34,"column":4},"end":{"line":34,"column":5}},"loc":{"start":{"line":34,"column":50},"end":{"line":45,"column":5}},"line":34},"6":{"name":"(anonymous_6)","decl":{"start":{"line":36,"column":24},"end":{"line":36,"column":25}},"loc":{"start":{"line":36,"column":35},"end":{"line":39,"column":9}},"line":36},"7":{"name":"(anonymous_7)","decl":{"start":{"line":41,"column":24},"end":{"line":41,"column":25}},"loc":{"start":{"line":41,"column":36},"end":{"line":43,"column":9}},"line":41}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3}},"s":{"0":1,"1":3,"2":1,"3":1,"4":1,"5":1,"6":71,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":1},"f":{"0":3,"1":71,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"b":{"0":[1,1,1],"1":[2,1],"2":[3,3]},"inputSourceMap":{"version":3,"file":"C:/Users/oreak/IdeaProjects/project_team059/src/controller/rooms/RoomDiskReader.ts","sources":["C:/Users/oreak/IdeaProjects/project_team059/src/controller/rooms/RoomDiskReader.ts"],"names":[],"mappings":";;;;;AAAA,gEAAwC;AACxC,wDAA0B;AAC1B,kDAA0B;AAG1B,MAAqB,cAAe,SAAQ,qBAAW;IACtD;QACC,KAAK,EAAE,CAAC;IACT,CAAC;IAkBM,KAAK,CAAC,iBAAiB,CAAC,EAAU;QAIxC,MAAM,WAAW,GAAU,EAAE,CAAC;QAC9B,MAAM,KAAK,GAAW,EAAE,CAAC;QAGzB,MAAM,IAAI,GAAG,MAAM,kBAAE,CAAC,OAAO,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;QACrD,KAAK,MAAM,IAAI,IAAI,IAAI,EAAE;YACxB,MAAM,OAAO,GAAG,kBAAE;iBAChB,QAAQ,CAAC,UAAU,EAAE,UAAU,IAAI,EAAE,CAAC;iBACtC,IAAI,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE;gBAEpB,MAAM,OAAO,GAAS,cAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;gBAC1C,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBAGpB,OAAO,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC;YACrB,CAAC,CAAC;iBACD,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;gBACd,MAAM,GAAG,CAAC;YACX,CAAC,CAAC,CAAC;YAEJ,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SAC1B;QAED,MAAM,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QAC/B,MAAM,aAAa,GAAkB,EAAE,EAAE,EAAE,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;QAC9D,OAAO,aAAa,CAAC;IACtB,CAAC;IAEM,KAAK,CAAC,eAAe,CAAC,OAAiB,EAAE,aAAkC;QACjF,MAAM,WAAW,GAA6B,EAAE,CAAC;QAGjD,OAAO,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;YAGzB,MAAM,OAAO,GAAG,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;YAC9C,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAC;QAEH,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QAE/C,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;YAC1B,aAAa,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;QAEH,OAAO,aAAa,CAAC;IACtB,CAAC;CACD;AAxED,iCAwEC","sourcesContent":["import RoomsParser from \"./RoomsParser\";\nimport fs from \"fs-extra\";\nimport Room from \"./Room\";\nimport { DatasetRecord } from \"../rooms/RoomsParser\";\n\nexport default class RoomDiskReader extends RoomsParser {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\t// REQUIRES: id - name of dataset to be retrieved from disk (id IS NOT IN datasets ALREADY!!!!)\n\t//           datasets - sets you'll be mapping new DatasetRecord to\n\t// EFFECTS: Retrieves the sections associated with the dataset id on disk and turned into Sections objects and maps\n\t//          them to sectionsDatabase with their associated id.\n\t// OUTPUT: VOID\n\t// public async logNewDatasetFromDiskToMap(id: string, roomsDatabase: Map<string, Room[]>): Promise<void> {\n\t// \tconst newDataset = await this.turnDatasetToRoom(id);\n\t// \tconst numRows = newDataset.rooms.length;\n\t//\n\t// \tif (numRows === 0) {\n\t// \t\tthrow new InsightError(\"No valid Section\");\n\t// \t}\n\t// \t// update member variables\n\t// \troomsDatabase.set(newDataset.id, newDataset.rooms);\n\t// }\n\n\tpublic async turnDatasetToRoom(id: string): Promise<DatasetRecord> {\n\t\t// tracks number of sections in a given dataset and is initialized to 0\n\n\t\t// where each promise is appended to for each course object\n\t\tconst allPromises: any[] = [];\n\t\tconst rooms: Room[] = [];\n\n\t\t// list of all courses under the dataset file\n\t\tconst path = await fs.readdir(`./data/${id}/rooms/`);\n\t\tfor (const room of path) {\n\t\t\tconst promise = fs\n\t\t\t\t.readJson(`./data/${id}/rooms/${room}`)\n\t\t\t\t.then(async (file) => {\n\t\t\t\t\t// turn room JSON file to Room objects\n\t\t\t\t\tconst newRoom: Room = Room.fromJSON(file);\n\t\t\t\t\trooms.push(newRoom);\n\t\t\t\t\t//console.log(newRoom.getID());\n\n\t\t\t\t\treturn { id, file };\n\t\t\t\t})\n\t\t\t\t.catch((err) => {\n\t\t\t\t\tthrow err;\n\t\t\t\t});\n\n\t\t\tallPromises.push(promise);\n\t\t}\n\n\t\tawait Promise.all(allPromises);\n\t\tconst datasetRecord: DatasetRecord = { id: id, rooms: rooms };\n\t\treturn datasetRecord;\n\t}\n\n\tpublic async mapMissingRooms(roomIDs: string[], roomsDatabase: Map<string, Room[]>): Promise<Map<string, Room[]>> {\n\t\tconst allPromises: Promise<DatasetRecord>[] = [];\n\t\t// the id of all datasets not currently added\n\n\t\troomIDs.forEach((setId) => {\n\t\t\t// all ids for missing datasets are returned as a Record\n\t\t\t// with all the sections associated with the id\n\t\t\tconst promise = this.turnDatasetToRoom(setId);\n\t\t\tallPromises.push(promise);\n\t\t});\n\n\t\tconst records = await Promise.all(allPromises);\n\t\t// add all records collected to Map\n\t\trecords.forEach((record) => {\n\t\t\troomsDatabase.set(record.id, record.rooms);\n\t\t});\n\n\t\treturn roomsDatabase;\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"817d4fdfea694afe1f8667b29cdcc5278e51e387","contentHash":"93cf5ce6e83204bf0305d935391df2c720dbb49f98ea8d1fb26fe36eb4a86e13"},"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\rooms\\RoomsParser.ts":{"path":"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\rooms\\RoomsParser.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":12,"column":3}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},"2":{"start":{"line":3,"column":26},"end":{"line":3,"column":33}},"3":{"start":{"line":4,"column":15},"end":{"line":4,"column":52}},"4":{"start":{"line":5,"column":4},"end":{"line":7,"column":5}},"5":{"start":{"line":6,"column":6},"end":{"line":6,"column":68}},"6":{"start":{"line":6,"column":51},"end":{"line":6,"column":63}},"7":{"start":{"line":8,"column":4},"end":{"line":8,"column":39}},"8":{"start":{"line":10,"column":4},"end":{"line":10,"column":33}},"9":{"start":{"line":10,"column":26},"end":{"line":10,"column":33}},"10":{"start":{"line":11,"column":4},"end":{"line":11,"column":17}},"11":{"start":{"line":13,"column":25},"end":{"line":17,"column":2}},"12":{"start":{"line":14,"column":4},"end":{"line":14,"column":72}},"13":{"start":{"line":16,"column":4},"end":{"line":16,"column":21}},"14":{"start":{"line":18,"column":19},"end":{"line":24,"column":1}},"15":{"start":{"line":19,"column":4},"end":{"line":19,"column":42}},"16":{"start":{"line":19,"column":31},"end":{"line":19,"column":42}},"17":{"start":{"line":20,"column":17},"end":{"line":20,"column":19}},"18":{"start":{"line":21,"column":4},"end":{"line":21,"column":141}},"19":{"start":{"line":21,"column":21},"end":{"line":21,"column":141}},"20":{"start":{"line":21,"column":40},"end":{"line":21,"column":141}},"21":{"start":{"line":21,"column":109},"end":{"line":21,"column":141}},"22":{"start":{"line":22,"column":4},"end":{"line":22,"column":36}},"23":{"start":{"line":23,"column":4},"end":{"line":23,"column":18}},"24":{"start":{"line":25,"column":22},"end":{"line":27,"column":1}},"25":{"start":{"line":26,"column":4},"end":{"line":26,"column":62}},"26":{"start":{"line":28,"column":0},"end":{"line":28,"column":62}},"27":{"start":{"line":29,"column":15},"end":{"line":29,"column":56}},"28":{"start":{"line":30,"column":19},"end":{"line":30,"column":57}},"29":{"start":{"line":31,"column":15},"end":{"line":31,"column":46}},"30":{"start":{"line":32,"column":25},"end":{"line":32,"column":53}},"31":{"start":{"line":33,"column":13},"end":{"line":33,"column":47}},"32":{"start":{"line":35,"column":18},"end":{"line":35,"column":20}},"33":{"start":{"line":36,"column":27},"end":{"line":41,"column":5}},"34":{"start":{"line":43,"column":8},"end":{"line":45,"column":9}},"35":{"start":{"line":44,"column":12},"end":{"line":44,"column":75}},"36":{"start":{"line":46,"column":24},"end":{"line":46,"column":68}},"37":{"start":{"line":47,"column":25},"end":{"line":47,"column":46}},"38":{"start":{"line":48,"column":29},"end":{"line":48,"column":72}},"39":{"start":{"line":49,"column":8},"end":{"line":49,"column":28}},"40":{"start":{"line":52,"column":23},"end":{"line":52,"column":25}},"41":{"start":{"line":53,"column":25},"end":{"line":60,"column":9}},"42":{"start":{"line":54,"column":12},"end":{"line":56,"column":13}},"43":{"start":{"line":55,"column":16},"end":{"line":55,"column":34}},"44":{"start":{"line":57,"column":12},"end":{"line":59,"column":13}},"45":{"start":{"line":58,"column":16},"end":{"line":58,"column":68}},"46":{"start":{"line":58,"column":51},"end":{"line":58,"column":66}},"47":{"start":{"line":61,"column":8},"end":{"line":61,"column":22}},"48":{"start":{"line":62,"column":8},"end":{"line":62,"column":22}},"49":{"start":{"line":65,"column":29},"end":{"line":65,"column":38}},"50":{"start":{"line":66,"column":23},"end":{"line":66,"column":51}},"51":{"start":{"line":67,"column":25},"end":{"line":67,"column":30}},"52":{"start":{"line":68,"column":30},"end":{"line":79,"column":10}},"53":{"start":{"line":69,"column":12},"end":{"line":71,"column":13}},"54":{"start":{"line":70,"column":16},"end":{"line":70,"column":23}},"55":{"start":{"line":72,"column":26},"end":{"line":72,"column":54}},"56":{"start":{"line":73,"column":12},"end":{"line":78,"column":13}},"57":{"start":{"line":74,"column":31},"end":{"line":74,"column":79}},"58":{"start":{"line":75,"column":16},"end":{"line":77,"column":17}},"59":{"start":{"line":76,"column":20},"end":{"line":76,"column":38}},"60":{"start":{"line":80,"column":8},"end":{"line":80,"column":41}},"61":{"start":{"line":81,"column":8},"end":{"line":83,"column":9}},"62":{"start":{"line":82,"column":12},"end":{"line":82,"column":107}},"63":{"start":{"line":84,"column":8},"end":{"line":84,"column":28}},"64":{"start":{"line":87,"column":8},"end":{"line":87,"column":76}},"65":{"start":{"line":87,"column":48},"end":{"line":87,"column":74}},"66":{"start":{"line":90,"column":25},"end":{"line":90,"column":30}},"67":{"start":{"line":91,"column":8},"end":{"line":99,"column":9}},"68":{"start":{"line":92,"column":12},"end":{"line":98,"column":13}},"69":{"start":{"line":93,"column":38},"end":{"line":93,"column":65}},"70":{"start":{"line":94,"column":16},"end":{"line":97,"column":17}},"71":{"start":{"line":95,"column":20},"end":{"line":95,"column":81}},"72":{"start":{"line":96,"column":20},"end":{"line":96,"column":38}},"73":{"start":{"line":100,"column":8},"end":{"line":100,"column":26}},"74":{"start":{"line":103,"column":31},"end":{"line":103,"column":33}},"75":{"start":{"line":104,"column":24},"end":{"line":104,"column":91}},"76":{"start":{"line":104,"column":62},"end":{"line":104,"column":90}},"77":{"start":{"line":105,"column":8},"end":{"line":109,"column":11}},"78":{"start":{"line":106,"column":30},"end":{"line":106,"column":80}},"79":{"start":{"line":106,"column":58},"end":{"line":106,"column":79}},"80":{"start":{"line":107,"column":30},"end":{"line":107,"column":62}},"81":{"start":{"line":108,"column":12},"end":{"line":108,"column":43}},"82":{"start":{"line":110,"column":8},"end":{"line":115,"column":9}},"83":{"start":{"line":111,"column":32},"end":{"line":111,"column":63}},"84":{"start":{"line":112,"column":28},"end":{"line":112,"column":61}},"85":{"start":{"line":113,"column":33},"end":{"line":113,"column":74}},"86":{"start":{"line":114,"column":12},"end":{"line":114,"column":65}},"87":{"start":{"line":116,"column":8},"end":{"line":116,"column":20}},"88":{"start":{"line":119,"column":21},"end":{"line":119,"column":23}},"89":{"start":{"line":120,"column":20},"end":{"line":120,"column":21}},"90":{"start":{"line":121,"column":19},"end":{"line":121,"column":21}},"91":{"start":{"line":122,"column":24},"end":{"line":122,"column":26}},"92":{"start":{"line":123,"column":19},"end":{"line":123,"column":21}},"93":{"start":{"line":124,"column":25},"end":{"line":124,"column":92}},"94":{"start":{"line":125,"column":8},"end":{"line":125,"column":62}},"95":{"start":{"line":126,"column":21},"end":{"line":126,"column":59}},"96":{"start":{"line":127,"column":8},"end":{"line":151,"column":9}},"97":{"start":{"line":128,"column":27},"end":{"line":128,"column":77}},"98":{"start":{"line":129,"column":12},"end":{"line":143,"column":13}},"99":{"start":{"line":130,"column":36},"end":{"line":134,"column":17}},"100":{"start":{"line":135,"column":36},"end":{"line":141,"column":17}},"101":{"start":{"line":142,"column":16},"end":{"line":142,"column":82}},"102":{"start":{"line":144,"column":12},"end":{"line":144,"column":24}},"103":{"start":{"line":147,"column":12},"end":{"line":149,"column":13}},"104":{"start":{"line":148,"column":16},"end":{"line":148,"column":28}},"105":{"start":{"line":150,"column":12},"end":{"line":150,"column":24}},"106":{"start":{"line":154,"column":8},"end":{"line":177,"column":11}},"107":{"start":{"line":155,"column":30},"end":{"line":155,"column":80}},"108":{"start":{"line":155,"column":58},"end":{"line":155,"column":79}},"109":{"start":{"line":156,"column":30},"end":{"line":156,"column":62}},"110":{"start":{"line":157,"column":27},"end":{"line":157,"column":82}},"111":{"start":{"line":157,"column":60},"end":{"line":157,"column":81}},"112":{"start":{"line":158,"column":12},"end":{"line":176,"column":13}},"113":{"start":{"line":160,"column":20},"end":{"line":160,"column":59}},"114":{"start":{"line":161,"column":20},"end":{"line":161,"column":26}},"115":{"start":{"line":163,"column":20},"end":{"line":163,"column":58}},"116":{"start":{"line":164,"column":20},"end":{"line":164,"column":26}},"117":{"start":{"line":166,"column":20},"end":{"line":166,"column":62}},"118":{"start":{"line":167,"column":20},"end":{"line":167,"column":26}},"119":{"start":{"line":169,"column":20},"end":{"line":169,"column":57}},"120":{"start":{"line":170,"column":20},"end":{"line":170,"column":26}},"121":{"start":{"line":172,"column":20},"end":{"line":172,"column":90}},"122":{"start":{"line":172,"column":55},"end":{"line":172,"column":75}},"123":{"start":{"line":173,"column":20},"end":{"line":173,"column":26}},"124":{"start":{"line":175,"column":20},"end":{"line":175,"column":95}},"125":{"start":{"line":178,"column":8},"end":{"line":178,"column":56}},"126":{"start":{"line":181,"column":8},"end":{"line":181,"column":59}},"127":{"start":{"line":181,"column":37},"end":{"line":181,"column":57}},"128":{"start":{"line":184,"column":8},"end":{"line":187,"column":20}},"129":{"start":{"line":185,"column":27},"end":{"line":185,"column":37}},"130":{"start":{"line":190,"column":23},"end":{"line":190,"column":25}},"131":{"start":{"line":191,"column":24},"end":{"line":191,"column":26}},"132":{"start":{"line":192,"column":22},"end":{"line":192,"column":24}},"133":{"start":{"line":193,"column":19},"end":{"line":193,"column":21}},"134":{"start":{"line":194,"column":8},"end":{"line":217,"column":11}},"135":{"start":{"line":195,"column":30},"end":{"line":195,"column":80}},"136":{"start":{"line":195,"column":58},"end":{"line":195,"column":79}},"137":{"start":{"line":196,"column":30},"end":{"line":196,"column":62}},"138":{"start":{"line":197,"column":12},"end":{"line":199,"column":13}},"139":{"start":{"line":198,"column":16},"end":{"line":198,"column":23}},"140":{"start":{"line":200,"column":27},"end":{"line":200,"column":82}},"141":{"start":{"line":200,"column":60},"end":{"line":200,"column":81}},"142":{"start":{"line":201,"column":12},"end":{"line":216,"column":13}},"143":{"start":{"line":203,"column":20},"end":{"line":203,"column":62}},"144":{"start":{"line":204,"column":20},"end":{"line":204,"column":26}},"145":{"start":{"line":206,"column":20},"end":{"line":206,"column":61}},"146":{"start":{"line":207,"column":20},"end":{"line":207,"column":90}},"147":{"start":{"line":207,"column":55},"end":{"line":207,"column":75}},"148":{"start":{"line":208,"column":20},"end":{"line":208,"column":26}},"149":{"start":{"line":210,"column":20},"end":{"line":210,"column":60}},"150":{"start":{"line":211,"column":20},"end":{"line":211,"column":26}},"151":{"start":{"line":213,"column":20},"end":{"line":213,"column":26}},"152":{"start":{"line":215,"column":20},"end":{"line":215,"column":95}},"153":{"start":{"line":218,"column":8},"end":{"line":218,"column":78}},"154":{"start":{"line":221,"column":31},"end":{"line":221,"column":58}},"155":{"start":{"line":222,"column":20},"end":{"line":222,"column":116}},"156":{"start":{"line":223,"column":8},"end":{"line":246,"column":11}},"157":{"start":{"line":224,"column":12},"end":{"line":245,"column":15}},"158":{"start":{"line":227,"column":34},"end":{"line":227,"column":37}},"159":{"start":{"line":228,"column":16},"end":{"line":230,"column":17}},"160":{"start":{"line":229,"column":20},"end":{"line":229,"column":89}},"161":{"start":{"line":231,"column":16},"end":{"line":234,"column":17}},"162":{"start":{"line":232,"column":20},"end":{"line":232,"column":33}},"163":{"start":{"line":233,"column":20},"end":{"line":233,"column":34}},"164":{"start":{"line":235,"column":30},"end":{"line":235,"column":32}},"165":{"start":{"line":236,"column":16},"end":{"line":238,"column":19}},"166":{"start":{"line":237,"column":20},"end":{"line":237,"column":37}},"167":{"start":{"line":239,"column":16},"end":{"line":241,"column":19}},"168":{"start":{"line":240,"column":20},"end":{"line":240,"column":65}},"169":{"start":{"line":244,"column":16},"end":{"line":244,"column":26}},"170":{"start":{"line":249,"column":8},"end":{"line":260,"column":9}},"171":{"start":{"line":250,"column":29},"end":{"line":250,"column":48}},"172":{"start":{"line":251,"column":12},"end":{"line":256,"column":13}},"173":{"start":{"line":252,"column":16},"end":{"line":252,"column":66}},"174":{"start":{"line":255,"column":16},"end":{"line":255,"column":36}},"175":{"start":{"line":259,"column":12},"end":{"line":259,"column":24}},"176":{"start":{"line":263,"column":0},"end":{"line":263,"column":30}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":74},"end":{"line":2,"column":75}},"loc":{"start":{"line":2,"column":96},"end":{"line":9,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":6,"column":38},"end":{"line":6,"column":39}},"loc":{"start":{"line":6,"column":49},"end":{"line":6,"column":65}},"line":6},"2":{"name":"(anonymous_2)","decl":{"start":{"line":9,"column":6},"end":{"line":9,"column":7}},"loc":{"start":{"line":9,"column":28},"end":{"line":12,"column":1}},"line":9},"3":{"name":"(anonymous_3)","decl":{"start":{"line":13,"column":80},"end":{"line":13,"column":81}},"loc":{"start":{"line":13,"column":95},"end":{"line":15,"column":1}},"line":13},"4":{"name":"(anonymous_4)","decl":{"start":{"line":15,"column":5},"end":{"line":15,"column":6}},"loc":{"start":{"line":15,"column":20},"end":{"line":17,"column":1}},"line":15},"5":{"name":"(anonymous_5)","decl":{"start":{"line":18,"column":50},"end":{"line":18,"column":51}},"loc":{"start":{"line":18,"column":65},"end":{"line":24,"column":1}},"line":18},"6":{"name":"(anonymous_6)","decl":{"start":{"line":25,"column":56},"end":{"line":25,"column":57}},"loc":{"start":{"line":25,"column":71},"end":{"line":27,"column":1}},"line":25},"7":{"name":"(anonymous_7)","decl":{"start":{"line":42,"column":4},"end":{"line":42,"column":5}},"loc":{"start":{"line":42,"column":30},"end":{"line":50,"column":5}},"line":42},"8":{"name":"(anonymous_8)","decl":{"start":{"line":51,"column":4},"end":{"line":51,"column":5}},"loc":{"start":{"line":51,"column":28},"end":{"line":63,"column":5}},"line":51},"9":{"name":"(anonymous_9)","decl":{"start":{"line":53,"column":25},"end":{"line":53,"column":26}},"loc":{"start":{"line":53,"column":35},"end":{"line":60,"column":9}},"line":53},"10":{"name":"(anonymous_10)","decl":{"start":{"line":58,"column":40},"end":{"line":58,"column":41}},"loc":{"start":{"line":58,"column":51},"end":{"line":58,"column":66}},"line":58},"11":{"name":"(anonymous_11)","decl":{"start":{"line":64,"column":4},"end":{"line":64,"column":5}},"loc":{"start":{"line":64,"column":38},"end":{"line":85,"column":5}},"line":64},"12":{"name":"(anonymous_12)","decl":{"start":{"line":68,"column":41},"end":{"line":68,"column":42}},"loc":{"start":{"line":68,"column":58},"end":{"line":79,"column":9}},"line":68},"13":{"name":"(anonymous_13)","decl":{"start":{"line":86,"column":4},"end":{"line":86,"column":5}},"loc":{"start":{"line":86,"column":28},"end":{"line":88,"column":5}},"line":86},"14":{"name":"(anonymous_14)","decl":{"start":{"line":87,"column":37},"end":{"line":87,"column":38}},"loc":{"start":{"line":87,"column":48},"end":{"line":87,"column":74}},"line":87},"15":{"name":"(anonymous_15)","decl":{"start":{"line":89,"column":4},"end":{"line":89,"column":5}},"loc":{"start":{"line":89,"column":48},"end":{"line":101,"column":5}},"line":89},"16":{"name":"(anonymous_16)","decl":{"start":{"line":102,"column":4},"end":{"line":102,"column":5}},"loc":{"start":{"line":102,"column":25},"end":{"line":117,"column":5}},"line":102},"17":{"name":"(anonymous_17)","decl":{"start":{"line":104,"column":46},"end":{"line":104,"column":47}},"loc":{"start":{"line":104,"column":62},"end":{"line":104,"column":90}},"line":104},"18":{"name":"(anonymous_18)","decl":{"start":{"line":105,"column":24},"end":{"line":105,"column":25}},"loc":{"start":{"line":105,"column":36},"end":{"line":109,"column":9}},"line":105},"19":{"name":"(anonymous_19)","decl":{"start":{"line":106,"column":48},"end":{"line":106,"column":49}},"loc":{"start":{"line":106,"column":58},"end":{"line":106,"column":79}},"line":106},"20":{"name":"(anonymous_20)","decl":{"start":{"line":118,"column":4},"end":{"line":118,"column":5}},"loc":{"start":{"line":118,"column":47},"end":{"line":152,"column":5}},"line":118},"21":{"name":"(anonymous_21)","decl":{"start":{"line":153,"column":4},"end":{"line":153,"column":5}},"loc":{"start":{"line":153,"column":67},"end":{"line":179,"column":5}},"line":153},"22":{"name":"(anonymous_22)","decl":{"start":{"line":154,"column":24},"end":{"line":154,"column":25}},"loc":{"start":{"line":154,"column":36},"end":{"line":177,"column":9}},"line":154},"23":{"name":"(anonymous_23)","decl":{"start":{"line":155,"column":48},"end":{"line":155,"column":49}},"loc":{"start":{"line":155,"column":58},"end":{"line":155,"column":79}},"line":155},"24":{"name":"(anonymous_24)","decl":{"start":{"line":157,"column":50},"end":{"line":157,"column":51}},"loc":{"start":{"line":157,"column":60},"end":{"line":157,"column":81}},"line":157},"25":{"name":"(anonymous_25)","decl":{"start":{"line":172,"column":45},"end":{"line":172,"column":46}},"loc":{"start":{"line":172,"column":55},"end":{"line":172,"column":75}},"line":172},"26":{"name":"(anonymous_26)","decl":{"start":{"line":180,"column":4},"end":{"line":180,"column":5}},"loc":{"start":{"line":180,"column":34},"end":{"line":182,"column":5}},"line":180},"27":{"name":"(anonymous_27)","decl":{"start":{"line":181,"column":26},"end":{"line":181,"column":27}},"loc":{"start":{"line":181,"column":37},"end":{"line":181,"column":57}},"line":181},"28":{"name":"(anonymous_28)","decl":{"start":{"line":183,"column":4},"end":{"line":183,"column":5}},"loc":{"start":{"line":183,"column":29},"end":{"line":188,"column":5}},"line":183},"29":{"name":"(anonymous_29)","decl":{"start":{"line":185,"column":17},"end":{"line":185,"column":18}},"loc":{"start":{"line":185,"column":27},"end":{"line":185,"column":37}},"line":185},"30":{"name":"(anonymous_30)","decl":{"start":{"line":189,"column":4},"end":{"line":189,"column":5}},"loc":{"start":{"line":189,"column":31},"end":{"line":219,"column":5}},"line":189},"31":{"name":"(anonymous_31)","decl":{"start":{"line":194,"column":24},"end":{"line":194,"column":25}},"loc":{"start":{"line":194,"column":36},"end":{"line":217,"column":9}},"line":194},"32":{"name":"(anonymous_32)","decl":{"start":{"line":195,"column":48},"end":{"line":195,"column":49}},"loc":{"start":{"line":195,"column":58},"end":{"line":195,"column":79}},"line":195},"33":{"name":"(anonymous_33)","decl":{"start":{"line":200,"column":50},"end":{"line":200,"column":51}},"loc":{"start":{"line":200,"column":60},"end":{"line":200,"column":81}},"line":200},"34":{"name":"(anonymous_34)","decl":{"start":{"line":207,"column":45},"end":{"line":207,"column":46}},"loc":{"start":{"line":207,"column":55},"end":{"line":207,"column":75}},"line":207},"35":{"name":"(anonymous_35)","decl":{"start":{"line":220,"column":4},"end":{"line":220,"column":5}},"loc":{"start":{"line":220,"column":36},"end":{"line":247,"column":5}},"line":220},"36":{"name":"(anonymous_36)","decl":{"start":{"line":223,"column":27},"end":{"line":223,"column":28}},"loc":{"start":{"line":223,"column":48},"end":{"line":246,"column":9}},"line":223},"37":{"name":"(anonymous_37)","decl":{"start":{"line":225,"column":26},"end":{"line":225,"column":27}},"loc":{"start":{"line":225,"column":35},"end":{"line":242,"column":13}},"line":225},"38":{"name":"(anonymous_38)","decl":{"start":{"line":236,"column":31},"end":{"line":236,"column":32}},"loc":{"start":{"line":236,"column":42},"end":{"line":238,"column":17}},"line":236},"39":{"name":"(anonymous_39)","decl":{"start":{"line":239,"column":30},"end":{"line":239,"column":31}},"loc":{"start":{"line":239,"column":36},"end":{"line":241,"column":17}},"line":239},"40":{"name":"(anonymous_40)","decl":{"start":{"line":243,"column":29},"end":{"line":243,"column":30}},"loc":{"start":{"line":243,"column":36},"end":{"line":245,"column":13}},"line":243},"41":{"name":"(anonymous_41)","decl":{"start":{"line":248,"column":4},"end":{"line":248,"column":5}},"loc":{"start":{"line":248,"column":44},"end":{"line":261,"column":5}},"line":248}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":12,"column":3}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":57},"end":{"line":12,"column":2}}],"line":2},"1":{"loc":{"start":{"line":2,"column":57},"end":{"line":12,"column":2}},"type":"cond-expr","locations":[{"start":{"line":2,"column":74},"end":{"line":9,"column":1}},{"start":{"line":9,"column":6},"end":{"line":12,"column":1}}],"line":2},"2":{"loc":{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},"type":"if","locations":[{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},{"start":{"line":3,"column":4},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":5,"column":4},"end":{"line":7,"column":5}},"type":"if","locations":[{"start":{"line":5,"column":4},"end":{"line":7,"column":5}},{"start":{"line":5,"column":4},"end":{"line":7,"column":5}}],"line":5},"4":{"loc":{"start":{"line":5,"column":8},"end":{"line":5,"column":85}},"type":"binary-expr","locations":[{"start":{"line":5,"column":8},"end":{"line":5,"column":13}},{"start":{"line":5,"column":18},"end":{"line":5,"column":84}}],"line":5},"5":{"loc":{"start":{"line":5,"column":18},"end":{"line":5,"column":84}},"type":"cond-expr","locations":[{"start":{"line":5,"column":34},"end":{"line":5,"column":47}},{"start":{"line":5,"column":50},"end":{"line":5,"column":84}}],"line":5},"6":{"loc":{"start":{"line":5,"column":50},"end":{"line":5,"column":84}},"type":"binary-expr","locations":[{"start":{"line":5,"column":50},"end":{"line":5,"column":63}},{"start":{"line":5,"column":67},"end":{"line":5,"column":84}}],"line":5},"7":{"loc":{"start":{"line":10,"column":4},"end":{"line":10,"column":33}},"type":"if","locations":[{"start":{"line":10,"column":4},"end":{"line":10,"column":33}},{"start":{"line":10,"column":4},"end":{"line":10,"column":33}}],"line":10},"8":{"loc":{"start":{"line":13,"column":25},"end":{"line":17,"column":2}},"type":"binary-expr","locations":[{"start":{"line":13,"column":26},"end":{"line":13,"column":30}},{"start":{"line":13,"column":34},"end":{"line":13,"column":57}},{"start":{"line":13,"column":63},"end":{"line":17,"column":1}}],"line":13},"9":{"loc":{"start":{"line":13,"column":63},"end":{"line":17,"column":1}},"type":"cond-expr","locations":[{"start":{"line":13,"column":80},"end":{"line":15,"column":1}},{"start":{"line":15,"column":5},"end":{"line":17,"column":1}}],"line":13},"10":{"loc":{"start":{"line":18,"column":19},"end":{"line":24,"column":1}},"type":"binary-expr","locations":[{"start":{"line":18,"column":20},"end":{"line":18,"column":24}},{"start":{"line":18,"column":28},"end":{"line":18,"column":45}},{"start":{"line":18,"column":50},"end":{"line":24,"column":1}}],"line":18},"11":{"loc":{"start":{"line":19,"column":4},"end":{"line":19,"column":42}},"type":"if","locations":[{"start":{"line":19,"column":4},"end":{"line":19,"column":42}},{"start":{"line":19,"column":4},"end":{"line":19,"column":42}}],"line":19},"12":{"loc":{"start":{"line":19,"column":8},"end":{"line":19,"column":29}},"type":"binary-expr","locations":[{"start":{"line":19,"column":8},"end":{"line":19,"column":11}},{"start":{"line":19,"column":15},"end":{"line":19,"column":29}}],"line":19},"13":{"loc":{"start":{"line":21,"column":4},"end":{"line":21,"column":141}},"type":"if","locations":[{"start":{"line":21,"column":4},"end":{"line":21,"column":141}},{"start":{"line":21,"column":4},"end":{"line":21,"column":141}}],"line":21},"14":{"loc":{"start":{"line":21,"column":40},"end":{"line":21,"column":141}},"type":"if","locations":[{"start":{"line":21,"column":40},"end":{"line":21,"column":141}},{"start":{"line":21,"column":40},"end":{"line":21,"column":141}}],"line":21},"15":{"loc":{"start":{"line":21,"column":44},"end":{"line":21,"column":107}},"type":"binary-expr","locations":[{"start":{"line":21,"column":44},"end":{"line":21,"column":59}},{"start":{"line":21,"column":63},"end":{"line":21,"column":107}}],"line":21},"16":{"loc":{"start":{"line":25,"column":22},"end":{"line":27,"column":1}},"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":27}},{"start":{"line":25,"column":31},"end":{"line":25,"column":51}},{"start":{"line":25,"column":56},"end":{"line":27,"column":1}}],"line":25},"17":{"loc":{"start":{"line":26,"column":11},"end":{"line":26,"column":61}},"type":"cond-expr","locations":[{"start":{"line":26,"column":37},"end":{"line":26,"column":40}},{"start":{"line":26,"column":43},"end":{"line":26,"column":61}}],"line":26},"18":{"loc":{"start":{"line":26,"column":12},"end":{"line":26,"column":33}},"type":"binary-expr","locations":[{"start":{"line":26,"column":12},"end":{"line":26,"column":15}},{"start":{"line":26,"column":19},"end":{"line":26,"column":33}}],"line":26},"19":{"loc":{"start":{"line":43,"column":8},"end":{"line":45,"column":9}},"type":"if","locations":[{"start":{"line":43,"column":8},"end":{"line":45,"column":9}},{"start":{"line":43,"column":8},"end":{"line":45,"column":9}}],"line":43},"20":{"loc":{"start":{"line":54,"column":12},"end":{"line":56,"column":13}},"type":"if","locations":[{"start":{"line":54,"column":12},"end":{"line":56,"column":13}},{"start":{"line":54,"column":12},"end":{"line":56,"column":13}}],"line":54},"21":{"loc":{"start":{"line":57,"column":12},"end":{"line":59,"column":13}},"type":"if","locations":[{"start":{"line":57,"column":12},"end":{"line":59,"column":13}},{"start":{"line":57,"column":12},"end":{"line":59,"column":13}}],"line":57},"22":{"loc":{"start":{"line":69,"column":12},"end":{"line":71,"column":13}},"type":"if","locations":[{"start":{"line":69,"column":12},"end":{"line":71,"column":13}},{"start":{"line":69,"column":12},"end":{"line":71,"column":13}}],"line":69},"23":{"loc":{"start":{"line":73,"column":12},"end":{"line":78,"column":13}},"type":"if","locations":[{"start":{"line":73,"column":12},"end":{"line":78,"column":13}},{"start":{"line":73,"column":12},"end":{"line":78,"column":13}}],"line":73},"24":{"loc":{"start":{"line":75,"column":16},"end":{"line":77,"column":17}},"type":"if","locations":[{"start":{"line":75,"column":16},"end":{"line":77,"column":17}},{"start":{"line":75,"column":16},"end":{"line":77,"column":17}}],"line":75},"25":{"loc":{"start":{"line":81,"column":8},"end":{"line":83,"column":9}},"type":"if","locations":[{"start":{"line":81,"column":8},"end":{"line":83,"column":9}},{"start":{"line":81,"column":8},"end":{"line":83,"column":9}}],"line":81},"26":{"loc":{"start":{"line":92,"column":12},"end":{"line":98,"column":13}},"type":"if","locations":[{"start":{"line":92,"column":12},"end":{"line":98,"column":13}},{"start":{"line":92,"column":12},"end":{"line":98,"column":13}}],"line":92},"27":{"loc":{"start":{"line":94,"column":16},"end":{"line":97,"column":17}},"type":"if","locations":[{"start":{"line":94,"column":16},"end":{"line":97,"column":17}},{"start":{"line":94,"column":16},"end":{"line":97,"column":17}}],"line":94},"28":{"loc":{"start":{"line":107,"column":30},"end":{"line":107,"column":62}},"type":"cond-expr","locations":[{"start":{"line":107,"column":42},"end":{"line":107,"column":57}},{"start":{"line":107,"column":60},"end":{"line":107,"column":62}}],"line":107},"29":{"loc":{"start":{"line":110,"column":8},"end":{"line":115,"column":9}},"type":"if","locations":[{"start":{"line":110,"column":8},"end":{"line":115,"column":9}},{"start":{"line":110,"column":8},"end":{"line":115,"column":9}}],"line":110},"30":{"loc":{"start":{"line":129,"column":12},"end":{"line":143,"column":13}},"type":"if","locations":[{"start":{"line":129,"column":12},"end":{"line":143,"column":13}},{"start":{"line":129,"column":12},"end":{"line":143,"column":13}}],"line":129},"31":{"loc":{"start":{"line":129,"column":16},"end":{"line":129,"column":90}},"type":"binary-expr","locations":[{"start":{"line":129,"column":16},"end":{"line":129,"column":22}},{"start":{"line":129,"column":26},"end":{"line":129,"column":56}},{"start":{"line":129,"column":60},"end":{"line":129,"column":90}}],"line":129},"32":{"loc":{"start":{"line":147,"column":12},"end":{"line":149,"column":13}},"type":"if","locations":[{"start":{"line":147,"column":12},"end":{"line":149,"column":13}},{"start":{"line":147,"column":12},"end":{"line":149,"column":13}}],"line":147},"33":{"loc":{"start":{"line":156,"column":30},"end":{"line":156,"column":62}},"type":"cond-expr","locations":[{"start":{"line":156,"column":42},"end":{"line":156,"column":57}},{"start":{"line":156,"column":60},"end":{"line":156,"column":62}}],"line":156},"34":{"loc":{"start":{"line":158,"column":12},"end":{"line":176,"column":13}},"type":"switch","locations":[{"start":{"line":159,"column":16},"end":{"line":161,"column":26}},{"start":{"line":162,"column":16},"end":{"line":164,"column":26}},{"start":{"line":165,"column":16},"end":{"line":167,"column":26}},{"start":{"line":168,"column":16},"end":{"line":170,"column":26}},{"start":{"line":171,"column":16},"end":{"line":173,"column":26}},{"start":{"line":174,"column":16},"end":{"line":175,"column":95}}],"line":158},"35":{"loc":{"start":{"line":172,"column":27},"end":{"line":172,"column":89}},"type":"binary-expr","locations":[{"start":{"line":172,"column":27},"end":{"line":172,"column":83}},{"start":{"line":172,"column":87},"end":{"line":172,"column":89}}],"line":172},"36":{"loc":{"start":{"line":196,"column":30},"end":{"line":196,"column":62}},"type":"cond-expr","locations":[{"start":{"line":196,"column":42},"end":{"line":196,"column":57}},{"start":{"line":196,"column":60},"end":{"line":196,"column":62}}],"line":196},"37":{"loc":{"start":{"line":197,"column":12},"end":{"line":199,"column":13}},"type":"if","locations":[{"start":{"line":197,"column":12},"end":{"line":199,"column":13}},{"start":{"line":197,"column":12},"end":{"line":199,"column":13}}],"line":197},"38":{"loc":{"start":{"line":201,"column":12},"end":{"line":216,"column":13}},"type":"switch","locations":[{"start":{"line":202,"column":16},"end":{"line":204,"column":26}},{"start":{"line":205,"column":16},"end":{"line":208,"column":26}},{"start":{"line":209,"column":16},"end":{"line":211,"column":26}},{"start":{"line":212,"column":16},"end":{"line":213,"column":26}},{"start":{"line":214,"column":16},"end":{"line":215,"column":95}}],"line":201},"39":{"loc":{"start":{"line":207,"column":27},"end":{"line":207,"column":89}},"type":"binary-expr","locations":[{"start":{"line":207,"column":27},"end":{"line":207,"column":83}},{"start":{"line":207,"column":87},"end":{"line":207,"column":89}}],"line":207},"40":{"loc":{"start":{"line":228,"column":16},"end":{"line":230,"column":17}},"type":"if","locations":[{"start":{"line":228,"column":16},"end":{"line":230,"column":17}},{"start":{"line":228,"column":16},"end":{"line":230,"column":17}}],"line":228},"41":{"loc":{"start":{"line":231,"column":16},"end":{"line":234,"column":17}},"type":"if","locations":[{"start":{"line":231,"column":16},"end":{"line":234,"column":17}},{"start":{"line":231,"column":16},"end":{"line":234,"column":17}}],"line":231},"42":{"loc":{"start":{"line":251,"column":12},"end":{"line":256,"column":13}},"type":"if","locations":[{"start":{"line":251,"column":12},"end":{"line":256,"column":13}},{"start":{"line":251,"column":12},"end":{"line":256,"column":13}}],"line":251},"43":{"loc":{"start":{"line":251,"column":16},"end":{"line":251,"column":72}},"type":"binary-expr","locations":[{"start":{"line":251,"column":16},"end":{"line":251,"column":42}},{"start":{"line":251,"column":46},"end":{"line":251,"column":72}}],"line":251}},"s":{"0":1,"1":17,"2":17,"3":17,"4":17,"5":17,"6":4170,"7":17,"8":0,"9":0,"10":0,"11":1,"12":1,"13":0,"14":1,"15":2,"16":1,"17":1,"18":1,"19":1,"20":17,"21":17,"22":1,"23":1,"24":1,"25":2,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":142,"33":142,"34":26,"35":1,"36":25,"37":25,"38":25,"39":25,"40":25,"41":25,"42":94446,"43":25,"44":94446,"45":41368,"46":94421,"47":25,"48":25,"49":25,"50":25,"51":25,"52":25,"53":25,"54":0,"55":25,"56":25,"57":25,"58":25,"59":25,"60":25,"61":25,"62":0,"63":25,"64":25,"65":100,"66":25,"67":25,"68":3723,"69":1849,"70":1849,"71":1849,"72":1849,"73":25,"74":1849,"75":1849,"76":20339,"77":1849,"78":9245,"79":9245,"80":9245,"81":9245,"82":1849,"83":1849,"84":1849,"85":1849,"86":1849,"87":0,"88":4170,"89":4170,"90":4170,"91":4170,"92":4170,"93":4170,"94":4170,"95":4170,"96":4170,"97":4170,"98":4170,"99":4170,"100":4170,"101":4170,"102":0,"103":0,"104":0,"105":0,"106":4170,"107":20850,"108":20850,"109":20850,"110":20850,"111":29190,"112":20850,"113":4170,"114":4170,"115":4170,"116":4170,"117":4170,"118":4170,"119":4170,"120":4170,"121":4170,"122":4170,"123":4170,"124":0,"125":4170,"126":6303,"127":24360,"128":22227,"129":22227,"130":1849,"131":1849,"132":1849,"133":1849,"134":1849,"135":9245,"136":9245,"137":9245,"138":9245,"139":1849,"140":7396,"141":11094,"142":7396,"143":1849,"144":1849,"145":1849,"146":1849,"147":1849,"148":1849,"149":1849,"150":1849,"151":1849,"152":0,"153":1849,"154":4170,"155":4170,"156":4170,"157":4170,"158":4170,"159":4170,"160":0,"161":4170,"162":0,"163":0,"164":4170,"165":4170,"166":4170,"167":4170,"168":4170,"169":0,"170":4170,"171":4170,"172":4170,"173":4170,"174":0,"175":0,"176":1},"f":{"0":17,"1":4170,"2":0,"3":1,"4":0,"5":2,"6":2,"7":26,"8":25,"9":94446,"10":94421,"11":25,"12":25,"13":25,"14":100,"15":25,"16":1849,"17":20339,"18":9245,"19":9245,"20":4170,"21":4170,"22":20850,"23":20850,"24":29190,"25":4170,"26":6303,"27":24360,"28":22227,"29":22227,"30":1849,"31":9245,"32":9245,"33":11094,"34":1849,"35":4170,"36":4170,"37":4170,"38":4170,"39":4170,"40":0,"41":4170},"b":{"0":[1,1,1],"1":[1,0],"2":[17,0],"3":[17,0],"4":[17,17],"5":[2,15],"6":[15,0],"7":[0,0],"8":[1,1,1],"9":[1,0],"10":[1,1,1],"11":[1,1],"12":[2,2],"13":[1,0],"14":[17,0],"15":[17,17],"16":[1,1,1],"17":[2,0],"18":[2,2],"19":[1,25],"20":[25,94421],"21":[41368,53078],"22":[0,25],"23":[25,0],"24":[25,0],"25":[0,25],"26":[1849,1874],"27":[1849,0],"28":[9245,0],"29":[1849,0],"30":[4170,0],"31":[4170,4170,4170],"32":[0,0],"33":[20850,0],"34":[4170,4170,4170,4170,4170,0],"35":[4170,0],"36":[9245,0],"37":[1849,7396],"38":[1849,1849,1849,1849,0],"39":[1849,0],"40":[0,4170],"41":[0,4170],"42":[4170,0],"43":[4170,4170]},"inputSourceMap":{"version":3,"file":"C:/Users/oreak/IdeaProjects/project_team059/src/controller/rooms/RoomsParser.ts","sources":["C:/Users/oreak/IdeaProjects/project_team059/src/controller/rooms/RoomsParser.ts"],"names":[],"mappings":"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","sourcesContent":["import Room, { Mfield, Sfield } from \"../rooms/Room\";\nimport JSZip from \"jszip\";\nimport Building from \"./Building\";\nimport * as parse5 from \"parse5\";\nimport { InsightError } from \"../IInsightFacade\";\nimport * as http from \"node:http\";\n\nexport default interface GeoResponse {\n\tlat?: number;\n\tlon?: number;\n\terror?: string;\n}\n\nexport interface DatasetRecord {\n\tid: string;\n\trooms: Room[];\n}\n\ninterface Geolocation {\n\tlat: number;\n\tlon: number;\n}\n\nexport default class RoomsParser {\n\tprivate TEAM_NUMBER = 59;\n\tprivate buildingTdClassNames: string[] = [\n\t\t\"views-field views-field-field-building-code\",\n\t\t\"views-field views-field-title\",\n\t\t\"views-field views-field-field-building-address\",\n\t\t\"views-field views-field-nothing\",\n\t];\n\t// parses through index.htm file to return a map with associated populated fields of all buildings in the file\n\tprotected async parseIndexFile(zip: JSZip): Promise<Map<string, Building>> {\n\t\tif (!zip.files[\"index.htm\"]) {\n\t\t\tthrow new InsightError(\"index.htm not found\");\n\t\t}\n\n\t\tconst content = await zip.files[\"index.htm\"].async(\"string\");\n\t\tconst document = parse5.parse(content);\n\t\tconst buildingsMap = await this.findTdElemsInIndexFile(document);\n\n\t\treturn buildingsMap;\n\t}\n\n\tprivate async getAllTables(doc: any): Promise<any[]> {\n\t\tconst tables: any[] = [];\n\t\tconst traverse = (node: any): void => {\n\t\t\t// Check if the current node is a <table>\n\t\t\tif (node.nodeName === \"table\") {\n\t\t\t\ttables.push(node); // Add the table to the list\n\t\t\t}\n\n\t\t\tif (node.childNodes) {\n\t\t\t\tnode.childNodes.forEach((child: any) => traverse(child));\n\t\t\t}\n\t\t};\n\n\t\ttraverse(doc);\n\t\treturn tables;\n\t}\n\n\tprotected async findTdElemsInIndexFile(doc: any): Promise<Map<string, Building>> {\n\t\tconst buildingsMap = new Map<string, Building>();\n\t\tconst tables = await this.getAllTables(doc);\n\t\tlet foundTable = false;\n\n\t\tconst tablePromises = tables.map(async (table: any) => {\n\t\t\tif (foundTable) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst tbody = this.findTbodyInTable(table);\n\t\t\tif (tbody) {\n\t\t\t\tconst result = await this.processTableBody(tbody, buildingsMap);\n\t\t\t\tif (result) {\n\t\t\t\t\tfoundTable = true; // Update foundTable if a valid building was found\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tawait Promise.all(tablePromises);\n\t\tif (buildingsMap.size === 0) {\n\t\t\tthrow new InsightError(\"No <td> elements found or valid buildings detected.\");\n\t\t}\n\n\t\treturn buildingsMap;\n\t}\n\n\tprivate findTbodyInTable(table: any): any | undefined {\n\t\treturn table.childNodes.find((child: any) => child.nodeName === \"tbody\");\n\t}\n\n\tprivate async processTableBody(tbody: any, buildingsMap: Map<string, Building>): Promise<boolean> {\n\t\tlet validTable = false;\n\t\tfor (const child of tbody.childNodes) {\n\t\t\tif (child.nodeName === \"tr\") {\n\t\t\t\tconst validBuilding = this.processTableRow(child);\n\t\t\t\tif (validBuilding) {\n\t\t\t\t\tbuildingsMap.set(validBuilding.code, validBuilding.building);\n\t\t\t\t\tvalidTable = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn validTable; // no valid building found in this tbody -> not a valid table\n\t}\n\n\tprivate processTableRow(row: any): { code: string; building: Building } | null {\n\t\tconst currClassNames: string[] = [];\n\t\tconst tdElems = row.childNodes.filter((grandchild: any) => grandchild.nodeName === \"td\");\n\n\t\ttdElems.forEach((tdElem: any) => {\n\t\t\tconst classAttr = tdElem.attrs.find((attr: any) => attr.name === \"class\");\n\t\t\tconst classList = classAttr ? classAttr.value : \"\";\n\t\t\tcurrClassNames.push(classList);\n\t\t});\n\n\t\tif (this.compareClassNames(this.buildingTdClassNames, currClassNames)) {\n\t\t\t// console.log(\"reqClass: \", this.buildingTdClassNames)\n\t\t\t// console.log(\"currClass: \", currClassNames)\n\n\t\t\tconst newBuilding: Building = this.parseBuildingInfo(tdElems);\n\t\t\tconst codeKey: string[] = newBuilding.getbHref().split(\"/\");\n\n\t\t\tconst buildingCode: string = codeKey[codeKey.length - 1].split(\".\")[0];\n\t\t\t//console.log(buildingCode)\n\n\t\t\treturn { code: buildingCode, building: newBuilding };\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprotected async parseRoomInfo(tdElems: any, building: Building, id: string): Promise<Room | null> {\n\t\tlet number = \"\";\n\t\tlet seats = 0;\n\t\tlet type = \"\";\n\t\tlet furniture = \"\";\n\t\tlet href = \"\";\n\t\t// Extract room information from tdElems\n\t\tconst roomInfo = this.findElementInfo(tdElems, number, seats, href, furniture, type);\n\t\t({ href, number, seats, furniture, type } = roomInfo);\n\t\tconst name = `${building.getShortname()}_${number}`;\n\t\ttry {\n\t\t\t// Fetch geolocation data\n\t\t\tconst geoLoc = await this.fetchGeoLocation(building.getAddress());\n\t\t\t// Ensure both lat and lon are present\n\t\t\tif (geoLoc && typeof geoLoc.lat === \"number\" && typeof geoLoc.lon === \"number\") {\n\t\t\t\tconst roomMfields: Mfield = {\n\t\t\t\t\tlat: geoLoc.lat,\n\t\t\t\t\tlon: geoLoc.lon,\n\t\t\t\t\tseats: seats,\n\t\t\t\t};\n\n\t\t\t\t// Define the Sfield object\n\t\t\t\tconst roomSfields: Partial<Sfield> = {\n\t\t\t\t\tnumber: number,\n\t\t\t\t\tname: name,\n\t\t\t\t\ttype: type,\n\t\t\t\t\tfurniture: furniture,\n\t\t\t\t\thref: href,\n\t\t\t\t};\n\n\t\t\t\treturn new Room(id, roomMfields, roomSfields, building);\n\t\t\t}\n\t\t\treturn null;\n\t\t} catch (error) {\n\t\t\tif (error) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tprivate findElementInfo(\n\t\ttdElems: any,\n\t\tnumber: string,\n\t\tseats: number,\n\t\thref: string,\n\t\tfurniture: string,\n\t\ttype: string\n\t): { number: string; seats: number; href: string; furniture: string; type: string } {\n\t\ttdElems.forEach((tdElem: any): any => {\n\t\t\tconst classAttr = tdElem.attrs.find((attr: any) => attr.name === \"class\");\n\t\t\tconst className = classAttr ? classAttr.value : \"\";\n\n\t\t\tconst anchor = tdElem.childNodes.find((node: any) => node.nodeName === \"a\");\n\t\t\tswitch (className) {\n\t\t\t\tcase \"views-field views-field-field-room-number\":\n\t\t\t\t\tnumber = this.processNodeValue(anchor);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"views-field views-field-field-room-capacity\":\n\t\t\t\t\tseats = this.processNodeValue(tdElem);\n\t\t\t\t\t//console.log(seats)\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"views-field views-field-field-room-furniture\":\n\t\t\t\t\tfurniture = this.processNodeValue(tdElem);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"views-field views-field-field-room-type\":\n\t\t\t\t\ttype = this.processNodeValue(tdElem);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"views-field views-field-nothing\":\n\t\t\t\t\thref = anchor.attrs.find((attr: any) => attr.name === \"href\")?.value || \"\";\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new InsightError(\"Not a valid building table cell\");\n\t\t\t}\n\t\t});\n\t\treturn { number, seats, href, furniture, type };\n\t}\n\n\tprotected compareClassNames(arr1: any[], arr2: any[]): boolean {\n\t\treturn arr1.every((value) => arr2.includes(value));\n\t}\n\n\tprotected processNodeValue(tdElem: any): any {\n\t\treturn tdElem.childNodes\n\t\t\t.map((node: any) => node.value)\n\t\t\t.join(\"\")\n\t\t\t.trim();\n\t}\n\n\tprotected parseBuildingInfo(tdElems: any): Building {\n\t\t// Extract the anchor element within the <td>\n\t\t//console.log(tdElems[0].attr)\n\t\tlet fullname = \"\";\n\t\tlet shortname = \"\";\n\t\tlet address = \"\";\n\t\tlet href = \"\";\n\n\t\ttdElems.forEach((tdElem: any) => {\n\t\t\tconst classAttr = tdElem.attrs.find((attr: any) => attr.name === \"class\");\n\t\t\tconst className = classAttr ? classAttr.value : \"\";\n\n\t\t\tif (className === \"views-field views-field-field-building-image\") {\n\t\t\t\treturn; // SKIP\n\t\t\t}\n\t\t\tconst anchor = tdElem.childNodes.find((node: any) => node.nodeName === \"a\");\n\n\t\t\tswitch (className) {\n\t\t\t\tcase \"views-field views-field-field-building-code\":\n\t\t\t\t\tshortname = this.processNodeValue(tdElem);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"views-field views-field-title\":\n\t\t\t\t\tfullname = this.processNodeValue(anchor);\n\t\t\t\t\thref = anchor.attrs.find((attr: any) => attr.name === \"href\")?.value || \"\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"views-field views-field-field-building-address\":\n\t\t\t\t\taddress = this.processNodeValue(tdElem);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"views-field views-field-nothing\":\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new InsightError(\"Not a valid building table cell\");\n\t\t\t}\n\t\t});\n\n\t\t// Create and return a new Building instance\n\t\treturn new Building({ fullname, shortname, address, href });\n\t}\n\n\tprotected async fetchGeoLocation(address: string): Promise<Geolocation> {\n\t\tconst encodedAddress = encodeURIComponent(address);\n\t\tconst url = `http://cs310.students.cs.ubc.ca:11316/api/v1/project_team${this.TEAM_NUMBER}/${encodedAddress}`;\n\t\t// based on https://nodejs.org/api/http.html#http_http implementation of 'http.get(url[, options][, callback])'\n\t\treturn new Promise<Geolocation>((resolve, reject) => {\n\t\t\thttp\n\t\t\t\t.get(url, (res) => {\n\t\t\t\t\tlet error;\n\t\t\t\t\tconst errorCode = 200;\n\t\t\t\t\tif (res.statusCode !== errorCode) {\n\t\t\t\t\t\terror = new Error(`Request Failed.\\nStatus Code: ${res.statusCode}`);\n\t\t\t\t\t}\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\tres.resume();\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t}\n\n\t\t\t\t\tlet rawData = \"\";\n\t\t\t\t\tres.on(\"data\", (chunk) => {\n\t\t\t\t\t\trawData += chunk;\n\t\t\t\t\t});\n\t\t\t\t\tres.on(\"end\", () => {\n\t\t\t\t\t\tthis.fetchResponse(rawData, resolve, reject);\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.on(\"error\", (e) => {\n\t\t\t\t\treject(e);\n\t\t\t\t});\n\t\t});\n\t}\n\n\tprivate fetchResponse(\n\t\trawData: string,\n\t\tresolve: (value: PromiseLike<Geolocation> | Geolocation) => void,\n\t\treject: (reason?: any) => void\n\t): any {\n\t\ttry {\n\t\t\tconst response: GeoResponse = JSON.parse(rawData);\n\t\t\tif (response.lat !== undefined && response.lon !== undefined) {\n\t\t\t\tresolve({ lat: response.lat, lon: response.lon });\n\t\t\t} else {\n\t\t\t\treject(new Error());\n\t\t\t}\n\t\t} catch (err) {\n\t\t\treject(err);\n\t\t}\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"0ae929da1cea9392bdffbcfd2d318c89da882ca0","contentHash":"2f5ac07514007909bc8f9a509b33a2afc49fba05597b0e6a8e8a59370dfe5b87"},"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\rooms\\Room.ts":{"path":"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\rooms\\Room.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":19},"end":{"line":6,"column":57}},"4":{"start":{"line":17,"column":8},"end":{"line":22,"column":11}},"5":{"start":{"line":23,"column":8},"end":{"line":23,"column":23}},"6":{"start":{"line":24,"column":8},"end":{"line":24,"column":44}},"7":{"start":{"line":25,"column":8},"end":{"line":31,"column":10}},"8":{"start":{"line":32,"column":8},"end":{"line":32,"column":31}},"9":{"start":{"line":33,"column":8},"end":{"line":33,"column":31}},"10":{"start":{"line":34,"column":8},"end":{"line":34,"column":35}},"11":{"start":{"line":35,"column":8},"end":{"line":35,"column":39}},"12":{"start":{"line":36,"column":8},"end":{"line":36,"column":49}},"13":{"start":{"line":37,"column":8},"end":{"line":37,"column":39}},"14":{"start":{"line":38,"column":8},"end":{"line":38,"column":43}},"15":{"start":{"line":39,"column":8},"end":{"line":39,"column":39}},"16":{"start":{"line":42,"column":8},"end":{"line":42,"column":29}},"17":{"start":{"line":45,"column":8},"end":{"line":45,"column":29}},"18":{"start":{"line":48,"column":21},"end":{"line":48,"column":104}},"19":{"start":{"line":49,"column":8},"end":{"line":51,"column":9}},"20":{"start":{"line":50,"column":12},"end":{"line":50,"column":45}},"21":{"start":{"line":52,"column":8},"end":{"line":52,"column":42}},"22":{"start":{"line":55,"column":8},"end":{"line":55,"column":25}},"23":{"start":{"line":58,"column":8},"end":{"line":62,"column":10}},"24":{"start":{"line":65,"column":44},"end":{"line":65,"column":48}},"25":{"start":{"line":66,"column":8},"end":{"line":68,"column":9}},"26":{"start":{"line":67,"column":12},"end":{"line":67,"column":59}},"27":{"start":{"line":69,"column":55},"end":{"line":69,"column":62}},"28":{"start":{"line":70,"column":25},"end":{"line":70,"column":87}},"29":{"start":{"line":71,"column":50},"end":{"line":71,"column":57}},"30":{"start":{"line":73,"column":8},"end":{"line":78,"column":9}},"31":{"start":{"line":74,"column":12},"end":{"line":74,"column":34}},"32":{"start":{"line":77,"column":12},"end":{"line":77,"column":54}},"33":{"start":{"line":79,"column":24},"end":{"line":83,"column":9}},"34":{"start":{"line":84,"column":24},"end":{"line":93,"column":9}},"35":{"start":{"line":94,"column":8},"end":{"line":94,"column":59}},"36":{"start":{"line":97,"column":0},"end":{"line":97,"column":23}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":16,"column":4},"end":{"line":16,"column":5}},"loc":{"start":{"line":16,"column":60},"end":{"line":40,"column":5}},"line":16},"2":{"name":"(anonymous_2)","decl":{"start":{"line":41,"column":4},"end":{"line":41,"column":5}},"loc":{"start":{"line":41,"column":17},"end":{"line":43,"column":5}},"line":41},"3":{"name":"(anonymous_3)","decl":{"start":{"line":44,"column":4},"end":{"line":44,"column":5}},"loc":{"start":{"line":44,"column":17},"end":{"line":46,"column":5}},"line":44},"4":{"name":"(anonymous_4)","decl":{"start":{"line":47,"column":4},"end":{"line":47,"column":5}},"loc":{"start":{"line":47,"column":28},"end":{"line":53,"column":5}},"line":47},"5":{"name":"(anonymous_5)","decl":{"start":{"line":54,"column":4},"end":{"line":54,"column":5}},"loc":{"start":{"line":54,"column":12},"end":{"line":56,"column":5}},"line":54},"6":{"name":"(anonymous_6)","decl":{"start":{"line":57,"column":4},"end":{"line":57,"column":5}},"loc":{"start":{"line":57,"column":20},"end":{"line":63,"column":5}},"line":57},"7":{"name":"(anonymous_7)","decl":{"start":{"line":64,"column":4},"end":{"line":64,"column":5}},"loc":{"start":{"line":64,"column":26},"end":{"line":95,"column":5}},"line":64}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":26,"column":22},"end":{"line":26,"column":64}},"type":"binary-expr","locations":[{"start":{"line":26,"column":22},"end":{"line":26,"column":38}},{"start":{"line":26,"column":42},"end":{"line":26,"column":64}}],"line":26},"4":{"loc":{"start":{"line":27,"column":23},"end":{"line":27,"column":67}},"type":"binary-expr","locations":[{"start":{"line":27,"column":23},"end":{"line":27,"column":40}},{"start":{"line":27,"column":44},"end":{"line":27,"column":67}}],"line":27},"5":{"loc":{"start":{"line":28,"column":21},"end":{"line":28,"column":61}},"type":"binary-expr","locations":[{"start":{"line":28,"column":21},"end":{"line":28,"column":36}},{"start":{"line":28,"column":40},"end":{"line":28,"column":61}}],"line":28},"6":{"loc":{"start":{"line":29,"column":18},"end":{"line":29,"column":53}},"type":"binary-expr","locations":[{"start":{"line":29,"column":18},"end":{"line":29,"column":30}},{"start":{"line":29,"column":34},"end":{"line":29,"column":53}}],"line":29},"7":{"loc":{"start":{"line":49,"column":8},"end":{"line":51,"column":9}},"type":"if","locations":[{"start":{"line":49,"column":8},"end":{"line":51,"column":9}},{"start":{"line":49,"column":8},"end":{"line":51,"column":9}}],"line":49},"8":{"loc":{"start":{"line":49,"column":12},"end":{"line":49,"column":44}},"type":"binary-expr","locations":[{"start":{"line":49,"column":12},"end":{"line":49,"column":21}},{"start":{"line":49,"column":25},"end":{"line":49,"column":44}}],"line":49},"9":{"loc":{"start":{"line":66,"column":8},"end":{"line":68,"column":9}},"type":"if","locations":[{"start":{"line":66,"column":8},"end":{"line":68,"column":9}},{"start":{"line":66,"column":8},"end":{"line":68,"column":9}}],"line":66},"10":{"loc":{"start":{"line":66,"column":12},"end":{"line":66,"column":42}},"type":"binary-expr","locations":[{"start":{"line":66,"column":12},"end":{"line":66,"column":18}},{"start":{"line":66,"column":22},"end":{"line":66,"column":30}},{"start":{"line":66,"column":34},"end":{"line":66,"column":42}}],"line":66},"11":{"loc":{"start":{"line":73,"column":8},"end":{"line":78,"column":9}},"type":"if","locations":[{"start":{"line":73,"column":8},"end":{"line":78,"column":9}},{"start":{"line":73,"column":8},"end":{"line":78,"column":9}}],"line":73}},"s":{"0":1,"1":1,"2":1,"3":1,"4":4170,"5":4170,"6":4170,"7":4170,"8":4170,"9":4170,"10":4170,"11":4170,"12":4170,"13":4170,"14":4170,"15":4170,"16":4170,"17":0,"18":0,"19":0,"20":0,"21":0,"22":4170,"23":4170,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":1},"f":{"0":1,"1":4170,"2":4170,"3":0,"4":0,"5":4170,"6":4170,"7":0},"b":{"0":[1,1,1],"1":[1,0],"2":[1,1],"3":[4170,4170],"4":[4170,4170],"5":[4170,4170],"6":[4170,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0,0],"11":[0,0]},"inputSourceMap":{"version":3,"file":"C:/Users/oreak/IdeaProjects/project_team059/src/controller/rooms/Room.ts","sources":["C:/Users/oreak/IdeaProjects/project_team059/src/controller/rooms/Room.ts"],"names":[],"mappings":"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","sourcesContent":["import Building from \"./Building\";\n\nexport interface Sfield {\n\tfullname: string;\n\tshortname: string;\n\tnumber: string;\n\tname: string;\n\taddress: string;\n\ttype: string;\n\tfurniture: string;\n\thref: string;\n}\n\nexport interface Mfield {\n\tlat: number;\n\tlon: number;\n\tseats: number;\n}\n\ninterface RoomJSON {\n\tsetID: string;\n\tsFields: Sfield;\n\tmFields: {\n\t\tlat: number;\n\t\tlon: number;\n\t\tseats: number;\n\t};\n}\n\nexport default class Room extends Building {\n\tpublic name: string;\n\tpublic lat: number;\n\tpublic lon: number;\n\tpublic seats: number;\n\tpublic href: string;\n\tpublic type: string;\n\tpublic furniture: string;\n\tpublic number: string;\n\tconstructor(\n\t\tid: string,\n\t\t{ lat, lon, seats }: Mfield,\n\t\tsfields: Partial<Sfield>,\n\t\tbuilding: Building // Accepting a Building instance\n\t) {\n\t\tsuper({\n\t\t\tfullname: building.getFullname(),\n\t\t\tshortname: building.getShortname(),\n\t\t\taddress: building.getAddress(),\n\t\t\thref: building.getbHref(),\n\t\t});\n\t\tthis.name = id;\n\t\tthis._mfields = { lat, lon, seats };\n\t\tthis._sfields = {\n\t\t\tfullname: sfields.fullname || building.getFullname(),\n\t\t\tshortname: sfields.shortname || building.getShortname(),\n\t\t\taddress: sfields.address || building.getAddress(),\n\t\t\thref: sfields.href || building.getbHref(),\n\t\t\t...sfields,\n\t\t} as Sfield;\n\t\tthis.lon = Number(lon);\n\t\tthis.lat = Number(lat);\n\t\tthis.seats = Number(seats);\n\t\tthis.type = this._sfields.type;\n\t\tthis.furniture = this._sfields.furniture;\n\t\tthis.href = this._sfields.href;\n\t\tthis.number = this._sfields.number;\n\t\tthis.name = this._sfields.name;\n\t}\n\n\tpublic getSfields(): Sfield {\n\t\treturn this._sfields;\n\t}\n\n\tpublic getMfields(): Mfield {\n\t\treturn this._mfields;\n\t}\n\n\tpublic getSFieldByIndex(index: number): string {\n\t\tconst keys: (keyof Sfield)[] = [\"fullname\", \"shortname\", \"number\", \"name\", \"address\", \"type\", \"furniture\", \"href\"];\n\t\tif (index < 0 || index > keys.length) {\n\t\t\tthrow new Error(\"Out of bounds\");\n\t\t}\n\t\treturn this._sfields[keys[index]];\n\t}\n\n\tpublic getID(): string {\n\t\treturn this.name;\n\t}\n\n\tpublic convertToJSON(): { setID: string; sFields: Sfield; mFields: Mfield } {\n\t\treturn {\n\t\t\tsetID: this.getID(),\n\t\t\tsFields: { ...this._sfields },\n\t\t\tmFields: { ...this._mfields },\n\t\t};\n\t}\n\n\tpublic static fromJSON(json: RoomJSON): Room {\n\t\tconst { setID, sFields, mFields } = json;\n\n\t\t// validate required fields\n\t\tif (!setID || !sFields || !mFields) {\n\t\t\tthrow new Error(\"Invalid JSON data for Room.\");\n\t\t}\n\n\t\t// extract building-related fields\n\t\tconst { fullname, shortname, address, href } = sFields;\n\n\t\t// create building\n\t\tconst building = new Building({ fullname, shortname, address, href });\n\n\t\t// get room-specific fields\n\t\tconst { number, name, type, furniture } = sFields;\n\t\tlet seats: number;\n\t\tif (typeof mFields.seats === \"number\") {\n\t\t\tseats = mFields.seats;\n\t\t} else {\n\t\t\tthrow new Error(`Invalid type for seats`);\n\t\t}\n\n\t\t// create the Mfield object\n\t\tconst mfields: Mfield = {\n\t\t\tlat: mFields.lat,\n\t\t\tlon: mFields.lon,\n\t\t\tseats: seats,\n\t\t};\n\n\t\t// create the Sfield object\n\t\tconst sfields: Sfield = {\n\t\t\tfullname,\n\t\t\tshortname,\n\t\t\tnumber,\n\t\t\tname,\n\t\t\taddress,\n\t\t\ttype,\n\t\t\tfurniture,\n\t\t\thref,\n\t\t};\n\n\t\t// instantiate and return the Room object\n\t\treturn new Room(setID, mfields, sfields, building);\n\t}\n\n\t// public setMfield(index: number, newVal: number): void {\n\t// \tconst keys: (keyof Mfield)[] = [\"lat\", \"lon\", \"seats\"];\n\t// \tif (index < 0 || index > keys.length) {\n\t// \t\tthrow new Error(\"Out of bounds\");\n\t// \t}\n\t// \tthis._mfields[keys[index]] = newVal;\n\t// }\n\n\t// public getSFieldIndex(sfield: string): number {\n\t// \tconst keys: (keyof Sfield)[] = [\"fullname\", \"shortname\", \"number\", \"name\", \"address\", \"type\", \"furniture\", \"href\"];\n\t// \treturn keys.indexOf(sfield as keyof Sfield);\n\t// \t// -1 if index is not found\n\t// }\n\n\t// public getMFieldIndex(mfield: string): number {\n\t// \tconst keys: (keyof Mfield)[] = [\"lat\", \"lon\", \"seats\"];\n\t// \treturn keys.indexOf(mfield as keyof Mfield);\n\t// \t// -1 if index is not found\n\t// }\n\t// public getMFieldByIndex(index: number): number {\n\t// \tconst keys: (keyof Mfield)[] = [\"lat\", \"lon\", \"seats\"];\n\t// \tif (index < 0 || index > keys.length) {\n\t// \t\tthrow new Error(\"Out of bounds\");\n\t// \t}\n\t// \treturn this._mfields[keys[index]];\n\t// }\n\n\t// public setMfields(value: Mfield): void {\n\t// \tthis._mfields = value;\n\t// }\n\n\t// public setHref(newHref: string): void {\n\t// \tthis._sfields.href = newHref;\n\t// \tthis.href = newHref;\n\t// }\n\n\t// public setSField(index: number, newVal: string): void {\n\t// \tconst keys: (keyof Sfield)[] = [\"fullname\", \"shortname\", \"number\", \"name\", \"address\", \"type\", \"furniture\", \"href\"];\n\t// \tif (index < 0 || index > keys.length) {\n\t// \t\tthrow new Error(\"Out of bounds\");\n\t// \t}\n\t// \tthis._sfields[keys[index]] = newVal;\n\t// }\n\t//\n\t// public setSfields(value: Sfield): void {\n\t// \tthis._sfields = value;\n\t// }\n\n\t//\n\t// public getLat(): number {\n\t// \treturn this.lat;\n\t// }\n\t//\n\t// public getLon(): number {\n\t// \treturn this.lon;\n\t// }\n\t//\n\t// public getSeats(): number {\n\t// \treturn this.seats;\n\t// }\n\t//\n\t// public getHref(): string {\n\t// \treturn this.href;\n\t// }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"ed719933683592b3c58512f575740a30418e2c59","contentHash":"bc2ec590c191452899432b46c32046cbdcd6529b81658a4fc6693fa3a7ff94d8"},"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\rooms\\Building.ts":{"path":"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\rooms\\Building.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":11,"column":8},"end":{"line":11,"column":40}},"2":{"start":{"line":12,"column":8},"end":{"line":12,"column":42}},"3":{"start":{"line":13,"column":8},"end":{"line":13,"column":38}},"4":{"start":{"line":14,"column":8},"end":{"line":14,"column":33}},"5":{"start":{"line":15,"column":8},"end":{"line":15,"column":53}},"6":{"start":{"line":16,"column":8},"end":{"line":25,"column":10}},"7":{"start":{"line":28,"column":8},"end":{"line":28,"column":29}},"8":{"start":{"line":31,"column":8},"end":{"line":31,"column":30}},"9":{"start":{"line":34,"column":8},"end":{"line":34,"column":28}},"10":{"start":{"line":37,"column":8},"end":{"line":37,"column":26}},"11":{"start":{"line":40,"column":55},"end":{"line":40,"column":59}},"12":{"start":{"line":41,"column":8},"end":{"line":41,"column":68}},"13":{"start":{"line":44,"column":0},"end":{"line":44,"column":27}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":10,"column":4},"end":{"line":10,"column":5}},"loc":{"start":{"line":10,"column":24},"end":{"line":26,"column":5}},"line":10},"1":{"name":"(anonymous_1)","decl":{"start":{"line":27,"column":4},"end":{"line":27,"column":5}},"loc":{"start":{"line":27,"column":18},"end":{"line":29,"column":5}},"line":27},"2":{"name":"(anonymous_2)","decl":{"start":{"line":30,"column":4},"end":{"line":30,"column":5}},"loc":{"start":{"line":30,"column":19},"end":{"line":32,"column":5}},"line":30},"3":{"name":"(anonymous_3)","decl":{"start":{"line":33,"column":4},"end":{"line":33,"column":5}},"loc":{"start":{"line":33,"column":17},"end":{"line":35,"column":5}},"line":33},"4":{"name":"(anonymous_4)","decl":{"start":{"line":36,"column":4},"end":{"line":36,"column":5}},"loc":{"start":{"line":36,"column":15},"end":{"line":38,"column":5}},"line":36},"5":{"name":"(anonymous_5)","decl":{"start":{"line":39,"column":4},"end":{"line":39,"column":5}},"loc":{"start":{"line":39,"column":26},"end":{"line":42,"column":5}},"line":39}},"branchMap":{},"s":{"0":1,"1":6019,"2":6019,"3":6019,"4":6019,"5":6019,"6":6019,"7":8340,"8":12510,"9":12510,"10":6019,"11":0,"12":0,"13":1},"f":{"0":6019,"1":8340,"2":12510,"3":12510,"4":6019,"5":0},"b":{},"inputSourceMap":{"version":3,"file":"C:/Users/oreak/IdeaProjects/project_team059/src/controller/rooms/Building.ts","sources":["C:/Users/oreak/IdeaProjects/project_team059/src/controller/rooms/Building.ts"],"names":[],"mappings":";;AAEA,MAAqB,QAAQ;IACrB,QAAQ,CAAS;IACjB,SAAS,CAAS;IAClB,OAAO,CAAS;IACb,KAAK,CAAS;IACd,QAAQ,CAAS;IACjB,QAAQ,CAAS;IAE3B,YAAY,MAA+E;QAC1F,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;QAChC,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC;QAClC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAG9B,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC;QAGzB,IAAI,CAAC,QAAQ,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC;QAC7C,IAAI,CAAC,QAAQ,GAAG;YACf,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,MAAM,EAAE,EAAE;YACV,IAAI,EAAE,EAAE;YACR,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,IAAI,EAAE,EAAE;YACR,SAAS,EAAE,EAAE;YACb,IAAI,EAAE,EAAE;SACR,CAAC;IACH,CAAC;IAEM,WAAW;QACjB,OAAO,IAAI,CAAC,QAAQ,CAAC;IACtB,CAAC;IAEM,YAAY;QAClB,OAAO,IAAI,CAAC,SAAS,CAAC;IACvB,CAAC;IAEM,UAAU;QAChB,OAAO,IAAI,CAAC,OAAO,CAAC;IACrB,CAAC;IAGM,QAAQ;QACd,OAAO,IAAI,CAAC,KAAK,CAAC;IACnB,CAAC;IAEM,MAAM,CAAC,QAAQ,CAAC,IAAS;QAC/B,MAAM,EAAE,QAAQ,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC;QACpD,OAAO,IAAI,QAAQ,CAAC,EAAE,QAAQ,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;IAC7D,CAAC;CACD;AAnDD,2BAmDC","sourcesContent":["import { Mfield, Sfield } from \"./Room\";\n\nexport default class Building {\n\tpublic fullname: string;\n\tpublic shortname: string;\n\tpublic address: string;\n\tprotected bHref: string;\n\tprotected _mfields: Mfield;\n\tprotected _sfields: Sfield;\n\n\tconstructor(params: Required<Record<\"fullname\" | \"shortname\" | \"address\" | \"href\", string>>) {\n\t\tthis.fullname = params.fullname;\n\t\tthis.shortname = params.shortname;\n\t\tthis.address = params.address;\n\n\t\t// the BUILDING href link NOT the room href Link\n\t\tthis.bHref = params.href;\n\n\t\t// Initialize Mfield and Sfield with default values\n\t\tthis._mfields = { lat: 0, lon: 0, seats: 0 };\n\t\tthis._sfields = {\n\t\t\tfullname: this.fullname,\n\t\t\tshortname: this.shortname,\n\t\t\tnumber: \"\",\n\t\t\tname: \"\",\n\t\t\taddress: this.address,\n\t\t\ttype: \"\",\n\t\t\tfurniture: \"\",\n\t\t\thref: \"\",\n\t\t};\n\t}\n\n\tpublic getFullname(): string {\n\t\treturn this.fullname;\n\t}\n\n\tpublic getShortname(): string {\n\t\treturn this.shortname;\n\t}\n\n\tpublic getAddress(): string {\n\t\treturn this.address;\n\t}\n\n\t// the BUILDING href link NOT the room href Link\n\tpublic getbHref(): string {\n\t\treturn this.bHref;\n\t}\n\n\tpublic static fromJSON(json: any): Building {\n\t\tconst { fullname, shortname, address, href } = json;\n\t\treturn new Building({ fullname, shortname, address, href });\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"6c710855c5aa86fd9dd4030caa2c7ab3157ff31c","contentHash":"330179fc1de42196806853dcf4fe0d81227b355a0a0c541a2c6e49536cf1589c"},"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\rooms\\RoomDiskWriter.ts":{"path":"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\rooms\\RoomDiskWriter.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":12,"column":3}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},"2":{"start":{"line":3,"column":26},"end":{"line":3,"column":33}},"3":{"start":{"line":4,"column":15},"end":{"line":4,"column":52}},"4":{"start":{"line":5,"column":4},"end":{"line":7,"column":5}},"5":{"start":{"line":6,"column":6},"end":{"line":6,"column":68}},"6":{"start":{"line":6,"column":51},"end":{"line":6,"column":63}},"7":{"start":{"line":8,"column":4},"end":{"line":8,"column":39}},"8":{"start":{"line":10,"column":4},"end":{"line":10,"column":33}},"9":{"start":{"line":10,"column":26},"end":{"line":10,"column":33}},"10":{"start":{"line":11,"column":4},"end":{"line":11,"column":17}},"11":{"start":{"line":13,"column":25},"end":{"line":17,"column":2}},"12":{"start":{"line":14,"column":4},"end":{"line":14,"column":72}},"13":{"start":{"line":16,"column":4},"end":{"line":16,"column":21}},"14":{"start":{"line":18,"column":19},"end":{"line":24,"column":1}},"15":{"start":{"line":19,"column":4},"end":{"line":19,"column":42}},"16":{"start":{"line":19,"column":31},"end":{"line":19,"column":42}},"17":{"start":{"line":20,"column":17},"end":{"line":20,"column":19}},"18":{"start":{"line":21,"column":4},"end":{"line":21,"column":141}},"19":{"start":{"line":21,"column":21},"end":{"line":21,"column":141}},"20":{"start":{"line":21,"column":40},"end":{"line":21,"column":141}},"21":{"start":{"line":21,"column":109},"end":{"line":21,"column":141}},"22":{"start":{"line":22,"column":4},"end":{"line":22,"column":36}},"23":{"start":{"line":23,"column":4},"end":{"line":23,"column":18}},"24":{"start":{"line":25,"column":22},"end":{"line":27,"column":1}},"25":{"start":{"line":26,"column":4},"end":{"line":26,"column":62}},"26":{"start":{"line":28,"column":0},"end":{"line":28,"column":62}},"27":{"start":{"line":29,"column":16},"end":{"line":29,"column":49}},"28":{"start":{"line":30,"column":22},"end":{"line":30,"column":63}},"29":{"start":{"line":31,"column":15},"end":{"line":31,"column":46}},"30":{"start":{"line":32,"column":25},"end":{"line":32,"column":53}},"31":{"start":{"line":33,"column":19},"end":{"line":33,"column":55}},"32":{"start":{"line":35,"column":23},"end":{"line":40,"column":5}},"33":{"start":{"line":42,"column":8},"end":{"line":42,"column":16}},"34":{"start":{"line":45,"column":23},"end":{"line":45,"column":53}},"35":{"start":{"line":46,"column":20},"end":{"line":46,"column":59}},"36":{"start":{"line":47,"column":8},"end":{"line":47,"column":58}},"37":{"start":{"line":50,"column":26},"end":{"line":50,"column":35}},"38":{"start":{"line":51,"column":8},"end":{"line":51,"column":53}},"39":{"start":{"line":52,"column":25},"end":{"line":52,"column":79}},"40":{"start":{"line":53,"column":8},"end":{"line":53,"column":34}},"41":{"start":{"line":56,"column":28},"end":{"line":56,"column":30}},"42":{"start":{"line":57,"column":21},"end":{"line":57,"column":51}},"43":{"start":{"line":58,"column":24},"end":{"line":58,"column":25}},"44":{"start":{"line":59,"column":23},"end":{"line":59,"column":77}},"45":{"start":{"line":60,"column":8},"end":{"line":62,"column":9}},"46":{"start":{"line":61,"column":12},"end":{"line":61,"column":84}},"47":{"start":{"line":63,"column":8},"end":{"line":73,"column":11}},"48":{"start":{"line":64,"column":33},"end":{"line":64,"column":59}},"49":{"start":{"line":65,"column":12},"end":{"line":72,"column":13}},"50":{"start":{"line":66,"column":39},"end":{"line":70,"column":18}},"51":{"start":{"line":67,"column":37},"end":{"line":67,"column":59}},"52":{"start":{"line":68,"column":37},"end":{"line":68,"column":66}},"53":{"start":{"line":69,"column":20},"end":{"line":69,"column":75}},"54":{"start":{"line":71,"column":16},"end":{"line":71,"column":49}},"55":{"start":{"line":74,"column":27},"end":{"line":74,"column":57}},"56":{"start":{"line":75,"column":25},"end":{"line":75,"column":27}},"57":{"start":{"line":76,"column":8},"end":{"line":76,"column":66}},"58":{"start":{"line":77,"column":8},"end":{"line":77,"column":24}},"59":{"start":{"line":80,"column":8},"end":{"line":84,"column":11}},"60":{"start":{"line":81,"column":12},"end":{"line":83,"column":13}},"61":{"start":{"line":82,"column":16},"end":{"line":82,"column":40}},"62":{"start":{"line":85,"column":8},"end":{"line":85,"column":34}},"63":{"start":{"line":86,"column":8},"end":{"line":88,"column":9}},"64":{"start":{"line":87,"column":12},"end":{"line":87,"column":70}},"65":{"start":{"line":89,"column":8},"end":{"line":89,"column":50}},"66":{"start":{"line":90,"column":8},"end":{"line":90,"column":100}},"67":{"start":{"line":91,"column":8},"end":{"line":91,"column":23}},"68":{"start":{"line":94,"column":29},"end":{"line":94,"column":31}},"69":{"start":{"line":95,"column":25},"end":{"line":112,"column":9}},"70":{"start":{"line":96,"column":35},"end":{"line":96,"column":37}},"71":{"start":{"line":97,"column":12},"end":{"line":108,"column":13}},"72":{"start":{"line":98,"column":32},"end":{"line":98,"column":90}},"73":{"start":{"line":98,"column":66},"end":{"line":98,"column":89}},"74":{"start":{"line":99,"column":16},"end":{"line":103,"column":19}},"75":{"start":{"line":100,"column":38},"end":{"line":100,"column":88}},"76":{"start":{"line":100,"column":66},"end":{"line":100,"column":87}},"77":{"start":{"line":101,"column":38},"end":{"line":101,"column":53}},"78":{"start":{"line":102,"column":20},"end":{"line":102,"column":51}},"79":{"start":{"line":104,"column":16},"end":{"line":107,"column":17}},"80":{"start":{"line":105,"column":36},"end":{"line":105,"column":77}},"81":{"start":{"line":106,"column":20},"end":{"line":106,"column":47}},"82":{"start":{"line":109,"column":12},"end":{"line":111,"column":13}},"83":{"start":{"line":110,"column":16},"end":{"line":110,"column":68}},"84":{"start":{"line":110,"column":51},"end":{"line":110,"column":66}},"85":{"start":{"line":113,"column":8},"end":{"line":113,"column":22}},"86":{"start":{"line":114,"column":22},"end":{"line":114,"column":24}},"87":{"start":{"line":115,"column":8},"end":{"line":122,"column":11}},"88":{"start":{"line":116,"column":12},"end":{"line":120,"column":15}},"89":{"start":{"line":117,"column":16},"end":{"line":119,"column":17}},"90":{"start":{"line":118,"column":20},"end":{"line":118,"column":37}},"91":{"start":{"line":121,"column":12},"end":{"line":121,"column":25}},"92":{"start":{"line":125,"column":20},"end":{"line":127,"column":9}},"93":{"start":{"line":128,"column":21},"end":{"line":128,"column":40}},"94":{"start":{"line":129,"column":8},"end":{"line":129,"column":71}},"95":{"start":{"line":132,"column":33},"end":{"line":132,"column":35}},"96":{"start":{"line":133,"column":8},"end":{"line":139,"column":9}},"97":{"start":{"line":134,"column":12},"end":{"line":138,"column":13}},"98":{"start":{"line":135,"column":33},"end":{"line":135,"column":53}},"99":{"start":{"line":136,"column":33},"end":{"line":136,"column":125}},"100":{"start":{"line":137,"column":16},"end":{"line":137,"column":48}},"101":{"start":{"line":140,"column":8},"end":{"line":140,"column":44}},"102":{"start":{"line":143,"column":0},"end":{"line":143,"column":33}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":74},"end":{"line":2,"column":75}},"loc":{"start":{"line":2,"column":96},"end":{"line":9,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":6,"column":38},"end":{"line":6,"column":39}},"loc":{"start":{"line":6,"column":49},"end":{"line":6,"column":65}},"line":6},"2":{"name":"(anonymous_2)","decl":{"start":{"line":9,"column":6},"end":{"line":9,"column":7}},"loc":{"start":{"line":9,"column":28},"end":{"line":12,"column":1}},"line":9},"3":{"name":"(anonymous_3)","decl":{"start":{"line":13,"column":80},"end":{"line":13,"column":81}},"loc":{"start":{"line":13,"column":95},"end":{"line":15,"column":1}},"line":13},"4":{"name":"(anonymous_4)","decl":{"start":{"line":15,"column":5},"end":{"line":15,"column":6}},"loc":{"start":{"line":15,"column":20},"end":{"line":17,"column":1}},"line":15},"5":{"name":"(anonymous_5)","decl":{"start":{"line":18,"column":50},"end":{"line":18,"column":51}},"loc":{"start":{"line":18,"column":65},"end":{"line":24,"column":1}},"line":18},"6":{"name":"(anonymous_6)","decl":{"start":{"line":25,"column":56},"end":{"line":25,"column":57}},"loc":{"start":{"line":25,"column":71},"end":{"line":27,"column":1}},"line":25},"7":{"name":"(anonymous_7)","decl":{"start":{"line":41,"column":4},"end":{"line":41,"column":5}},"loc":{"start":{"line":41,"column":18},"end":{"line":43,"column":5}},"line":41},"8":{"name":"(anonymous_8)","decl":{"start":{"line":44,"column":4},"end":{"line":44,"column":5}},"loc":{"start":{"line":44,"column":54},"end":{"line":48,"column":5}},"line":44},"9":{"name":"(anonymous_9)","decl":{"start":{"line":49,"column":4},"end":{"line":49,"column":5}},"loc":{"start":{"line":49,"column":49},"end":{"line":54,"column":5}},"line":49},"10":{"name":"(anonymous_10)","decl":{"start":{"line":55,"column":4},"end":{"line":55,"column":5}},"loc":{"start":{"line":55,"column":54},"end":{"line":78,"column":5}},"line":55},"11":{"name":"(anonymous_11)","decl":{"start":{"line":63,"column":23},"end":{"line":63,"column":24}},"loc":{"start":{"line":63,"column":47},"end":{"line":73,"column":9}},"line":63},"12":{"name":"(anonymous_12)","decl":{"start":{"line":66,"column":63},"end":{"line":66,"column":64}},"loc":{"start":{"line":66,"column":83},"end":{"line":70,"column":17}},"line":66},"13":{"name":"(anonymous_13)","decl":{"start":{"line":79,"column":4},"end":{"line":79,"column":5}},"loc":{"start":{"line":79,"column":57},"end":{"line":92,"column":5}},"line":79},"14":{"name":"(anonymous_14)","decl":{"start":{"line":80,"column":27},"end":{"line":80,"column":28}},"loc":{"start":{"line":80,"column":38},"end":{"line":84,"column":9}},"line":80},"15":{"name":"(anonymous_15)","decl":{"start":{"line":93,"column":4},"end":{"line":93,"column":5}},"loc":{"start":{"line":93,"column":48},"end":{"line":123,"column":5}},"line":93},"16":{"name":"(anonymous_16)","decl":{"start":{"line":95,"column":25},"end":{"line":95,"column":26}},"loc":{"start":{"line":95,"column":35},"end":{"line":112,"column":9}},"line":95},"17":{"name":"(anonymous_17)","decl":{"start":{"line":98,"column":55},"end":{"line":98,"column":56}},"loc":{"start":{"line":98,"column":66},"end":{"line":98,"column":89}},"line":98},"18":{"name":"(anonymous_18)","decl":{"start":{"line":99,"column":32},"end":{"line":99,"column":33}},"loc":{"start":{"line":99,"column":44},"end":{"line":103,"column":17}},"line":99},"19":{"name":"(anonymous_19)","decl":{"start":{"line":100,"column":56},"end":{"line":100,"column":57}},"loc":{"start":{"line":100,"column":66},"end":{"line":100,"column":87}},"line":100},"20":{"name":"(anonymous_20)","decl":{"start":{"line":110,"column":40},"end":{"line":110,"column":41}},"loc":{"start":{"line":110,"column":51},"end":{"line":110,"column":66}},"line":110},"21":{"name":"(anonymous_21)","decl":{"start":{"line":115,"column":46},"end":{"line":115,"column":47}},"loc":{"start":{"line":115,"column":59},"end":{"line":122,"column":9}},"line":115},"22":{"name":"(anonymous_22)","decl":{"start":{"line":116,"column":28},"end":{"line":116,"column":29}},"loc":{"start":{"line":116,"column":38},"end":{"line":120,"column":13}},"line":116},"23":{"name":"(anonymous_23)","decl":{"start":{"line":124,"column":4},"end":{"line":124,"column":5}},"loc":{"start":{"line":124,"column":54},"end":{"line":130,"column":5}},"line":124},"24":{"name":"(anonymous_24)","decl":{"start":{"line":131,"column":4},"end":{"line":131,"column":5}},"loc":{"start":{"line":131,"column":38},"end":{"line":141,"column":5}},"line":131}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":12,"column":3}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":57},"end":{"line":12,"column":2}}],"line":2},"1":{"loc":{"start":{"line":2,"column":57},"end":{"line":12,"column":2}},"type":"cond-expr","locations":[{"start":{"line":2,"column":74},"end":{"line":9,"column":1}},{"start":{"line":9,"column":6},"end":{"line":12,"column":1}}],"line":2},"2":{"loc":{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},"type":"if","locations":[{"start":{"line":3,"column":4},"end":{"line":3,"column":33}},{"start":{"line":3,"column":4},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":5,"column":4},"end":{"line":7,"column":5}},"type":"if","locations":[{"start":{"line":5,"column":4},"end":{"line":7,"column":5}},{"start":{"line":5,"column":4},"end":{"line":7,"column":5}}],"line":5},"4":{"loc":{"start":{"line":5,"column":8},"end":{"line":5,"column":85}},"type":"binary-expr","locations":[{"start":{"line":5,"column":8},"end":{"line":5,"column":13}},{"start":{"line":5,"column":18},"end":{"line":5,"column":84}}],"line":5},"5":{"loc":{"start":{"line":5,"column":18},"end":{"line":5,"column":84}},"type":"cond-expr","locations":[{"start":{"line":5,"column":34},"end":{"line":5,"column":47}},{"start":{"line":5,"column":50},"end":{"line":5,"column":84}}],"line":5},"6":{"loc":{"start":{"line":5,"column":50},"end":{"line":5,"column":84}},"type":"binary-expr","locations":[{"start":{"line":5,"column":50},"end":{"line":5,"column":63}},{"start":{"line":5,"column":67},"end":{"line":5,"column":84}}],"line":5},"7":{"loc":{"start":{"line":10,"column":4},"end":{"line":10,"column":33}},"type":"if","locations":[{"start":{"line":10,"column":4},"end":{"line":10,"column":33}},{"start":{"line":10,"column":4},"end":{"line":10,"column":33}}],"line":10},"8":{"loc":{"start":{"line":13,"column":25},"end":{"line":17,"column":2}},"type":"binary-expr","locations":[{"start":{"line":13,"column":26},"end":{"line":13,"column":30}},{"start":{"line":13,"column":34},"end":{"line":13,"column":57}},{"start":{"line":13,"column":63},"end":{"line":17,"column":1}}],"line":13},"9":{"loc":{"start":{"line":13,"column":63},"end":{"line":17,"column":1}},"type":"cond-expr","locations":[{"start":{"line":13,"column":80},"end":{"line":15,"column":1}},{"start":{"line":15,"column":5},"end":{"line":17,"column":1}}],"line":13},"10":{"loc":{"start":{"line":18,"column":19},"end":{"line":24,"column":1}},"type":"binary-expr","locations":[{"start":{"line":18,"column":20},"end":{"line":18,"column":24}},{"start":{"line":18,"column":28},"end":{"line":18,"column":45}},{"start":{"line":18,"column":50},"end":{"line":24,"column":1}}],"line":18},"11":{"loc":{"start":{"line":19,"column":4},"end":{"line":19,"column":42}},"type":"if","locations":[{"start":{"line":19,"column":4},"end":{"line":19,"column":42}},{"start":{"line":19,"column":4},"end":{"line":19,"column":42}}],"line":19},"12":{"loc":{"start":{"line":19,"column":8},"end":{"line":19,"column":29}},"type":"binary-expr","locations":[{"start":{"line":19,"column":8},"end":{"line":19,"column":11}},{"start":{"line":19,"column":15},"end":{"line":19,"column":29}}],"line":19},"13":{"loc":{"start":{"line":21,"column":4},"end":{"line":21,"column":141}},"type":"if","locations":[{"start":{"line":21,"column":4},"end":{"line":21,"column":141}},{"start":{"line":21,"column":4},"end":{"line":21,"column":141}}],"line":21},"14":{"loc":{"start":{"line":21,"column":40},"end":{"line":21,"column":141}},"type":"if","locations":[{"start":{"line":21,"column":40},"end":{"line":21,"column":141}},{"start":{"line":21,"column":40},"end":{"line":21,"column":141}}],"line":21},"15":{"loc":{"start":{"line":21,"column":44},"end":{"line":21,"column":107}},"type":"binary-expr","locations":[{"start":{"line":21,"column":44},"end":{"line":21,"column":59}},{"start":{"line":21,"column":63},"end":{"line":21,"column":107}}],"line":21},"16":{"loc":{"start":{"line":25,"column":22},"end":{"line":27,"column":1}},"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":27}},{"start":{"line":25,"column":31},"end":{"line":25,"column":51}},{"start":{"line":25,"column":56},"end":{"line":27,"column":1}}],"line":25},"17":{"loc":{"start":{"line":26,"column":11},"end":{"line":26,"column":61}},"type":"cond-expr","locations":[{"start":{"line":26,"column":37},"end":{"line":26,"column":40}},{"start":{"line":26,"column":43},"end":{"line":26,"column":61}}],"line":26},"18":{"loc":{"start":{"line":26,"column":12},"end":{"line":26,"column":33}},"type":"binary-expr","locations":[{"start":{"line":26,"column":12},"end":{"line":26,"column":15}},{"start":{"line":26,"column":19},"end":{"line":26,"column":33}}],"line":26},"19":{"loc":{"start":{"line":60,"column":8},"end":{"line":62,"column":9}},"type":"if","locations":[{"start":{"line":60,"column":8},"end":{"line":62,"column":9}},{"start":{"line":60,"column":8},"end":{"line":62,"column":9}}],"line":60},"20":{"loc":{"start":{"line":65,"column":12},"end":{"line":72,"column":13}},"type":"if","locations":[{"start":{"line":65,"column":12},"end":{"line":72,"column":13}},{"start":{"line":65,"column":12},"end":{"line":72,"column":13}}],"line":65},"21":{"loc":{"start":{"line":81,"column":12},"end":{"line":83,"column":13}},"type":"if","locations":[{"start":{"line":81,"column":12},"end":{"line":83,"column":13}},{"start":{"line":81,"column":12},"end":{"line":83,"column":13}}],"line":81},"22":{"loc":{"start":{"line":86,"column":8},"end":{"line":88,"column":9}},"type":"if","locations":[{"start":{"line":86,"column":8},"end":{"line":88,"column":9}},{"start":{"line":86,"column":8},"end":{"line":88,"column":9}}],"line":86},"23":{"loc":{"start":{"line":97,"column":12},"end":{"line":108,"column":13}},"type":"if","locations":[{"start":{"line":97,"column":12},"end":{"line":108,"column":13}},{"start":{"line":97,"column":12},"end":{"line":108,"column":13}}],"line":97},"24":{"loc":{"start":{"line":97,"column":16},"end":{"line":97,"column":57}},"type":"binary-expr","locations":[{"start":{"line":97,"column":16},"end":{"line":97,"column":38}},{"start":{"line":97,"column":42},"end":{"line":97,"column":57}}],"line":97},"25":{"loc":{"start":{"line":104,"column":16},"end":{"line":107,"column":17}},"type":"if","locations":[{"start":{"line":104,"column":16},"end":{"line":107,"column":17}},{"start":{"line":104,"column":16},"end":{"line":107,"column":17}}],"line":104},"26":{"loc":{"start":{"line":109,"column":12},"end":{"line":111,"column":13}},"type":"if","locations":[{"start":{"line":109,"column":12},"end":{"line":111,"column":13}},{"start":{"line":109,"column":12},"end":{"line":111,"column":13}}],"line":109},"27":{"loc":{"start":{"line":117,"column":16},"end":{"line":119,"column":17}},"type":"if","locations":[{"start":{"line":117,"column":16},"end":{"line":119,"column":17}},{"start":{"line":117,"column":16},"end":{"line":119,"column":17}}],"line":117},"28":{"loc":{"start":{"line":134,"column":12},"end":{"line":138,"column":13}},"type":"if","locations":[{"start":{"line":134,"column":12},"end":{"line":138,"column":13}},{"start":{"line":134,"column":12},"end":{"line":138,"column":13}}],"line":134}},"s":{"0":1,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":1,"12":0,"13":0,"14":1,"15":1,"16":1,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":1,"25":3,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":71,"33":71,"34":28,"35":28,"36":26,"37":26,"38":26,"39":25,"40":22,"41":25,"42":25,"43":25,"44":25,"45":25,"46":0,"47":25,"48":438,"49":438,"50":395,"51":395,"52":395,"53":395,"54":395,"55":25,"56":25,"57":25,"58":22,"59":25,"60":395,"61":284,"62":25,"63":25,"64":3,"65":22,"66":22,"67":22,"68":395,"69":395,"70":798047,"71":798047,"72":4454,"73":48994,"74":4454,"75":20850,"76":20850,"77":20850,"78":20850,"79":4454,"80":4170,"81":4170,"82":798047,"83":394270,"84":797652,"85":395,"86":395,"87":395,"88":395,"89":4170,"90":4170,"91":395,"92":22,"93":22,"94":22,"95":22,"96":22,"97":4170,"98":4170,"99":4170,"100":4170,"101":22,"102":1},"f":{"0":0,"1":0,"2":0,"3":0,"4":0,"5":1,"6":3,"7":71,"8":28,"9":26,"10":25,"11":438,"12":395,"13":25,"14":395,"15":395,"16":798047,"17":48994,"18":20850,"19":20850,"20":797652,"21":395,"22":4170,"23":22,"24":22},"b":{"0":[1,1,1],"1":[1,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[1,1,1],"9":[1,0],"10":[1,1,1],"11":[1,0],"12":[1,1],"13":[0,0],"14":[0,0],"15":[0,0],"16":[1,1,1],"17":[1,2],"18":[3,3],"19":[0,25],"20":[395,43],"21":[284,111],"22":[3,22],"23":[4454,793593],"24":[798047,4454],"25":[4170,284],"26":[394270,403777],"27":[4170,0],"28":[4170,0]},"inputSourceMap":{"version":3,"file":"C:/Users/oreak/IdeaProjects/project_team059/src/controller/rooms/RoomDiskWriter.ts","sources":["C:/Users/oreak/IdeaProjects/project_team059/src/controller/rooms/RoomDiskWriter.ts"],"names":[],"mappings":"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","sourcesContent":["import JSZip from \"jszip\";\nimport RoomsParser from \"./RoomsParser\";\nimport * as parse5 from \"parse5\";\nimport { InsightDatasetKind, InsightError } from \"../IInsightFacade\";\nimport Building from \"./Building\";\nimport Room from \"./Room\";\nimport fs from \"fs-extra\";\n\nexport default class RoomDiskWriter extends RoomsParser {\n\t//Every SectionDiskWriter needs to be able to parse sections using SectionsParser\n\n\tprivate roomTdClassNames: string[] = [\n\t\t\"views-field views-field-field-room-number\",\n\t\t\"views-field views-field-field-room-capacity\",\n\t\t\"views-field views-field-field-room-furniture\",\n\t\t\"views-field views-field-field-room-type\",\n\t\t//\"views-field views-field-nothing\",\n\t];\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tpublic async logRoomsDatasetOnDisk(content: string, id: string, roomMap: Map<string, Room[]>): Promise<void> {\n\t\tconst buffer = Buffer.from(content, \"base64\");\n\t\tconst zip = await JSZip.loadAsync(buffer);\n\t\tawait this.logRoomDatasetAndMap(zip, id, roomMap);\n\t}\n\n\t// writes room dataset info onto disk\n\tprivate async logRoomDatasetAndMap(zip: JSZip, id: string, roomMap: Map<string, Room[]>): Promise<void> {\n\t\tlet buildingMap: Map<string, Building> = new Map<string, Building>();\n\t\tbuildingMap = await this.parseIndexFile(zip);\n\t\tconst newRooms = await this.logAllRoomFilesOnDisk(zip, buildingMap, id);\n\t\troomMap.set(id, newRooms);\n\t}\n\tprotected async logAllRoomFilesOnDisk(zip: JSZip, buildingMap: Map<string, Building>, id: string): Promise<Room[]> {\n\t\tconst allPromises: Promise<Room[]>[] = [];\n\t\tconst dirs = Array.from(buildingMap.keys());\n\t\tconst numRows = 0;\n\n\t\tconst folder = zip.folder(\"campus/discover/buildings-and-classrooms\");\n\t\tif (!folder) {\n\t\t\tthrow new InsightError(\"Folder not found in zip file\");\n\t\t}\n\t\tfolder.forEach((relativePath, file) => {\n\t\t\tconst buildingCode = relativePath.split(\".\")[0]; // Extract dir or file name\n\t\t\t//console.log(buildingCode)\n\t\t\tif (dirs.includes(buildingCode)) {\n\t\t\t\t//console.log(\"File object:\", file);\n\t\t\t\tconst promiseContent = file.async(\"text\").then(async (content0) => {\n\t\t\t\t\tconst document = parse5.parse(content0);\n\t\t\t\t\tconst building: Building = buildingMap.get(buildingCode) as Building;\n\t\t\t\t\treturn this.findTdElemsOfRooms(document, building, id);\n\t\t\t\t});\n\n\t\t\t\tallPromises.push(promiseContent);\n\t\t\t}\n\t\t});\n\t\tconst roomArrays = await Promise.all(allPromises);\n\t\tconst allRooms: Room[] = [];\n\t\tawait this.writeToDisk(roomArrays, allRooms, numRows, id);\n\t\treturn allRooms;\n\t}\n\n\tprivate async writeToDisk(\n\t\troomArrays: Awaited<Room[]>[],\n\t\tallRooms: Room[],\n\t\tnumRows: number,\n\t\tid: string\n\t): Promise<number> {\n\t\troomArrays.forEach((rooms) => {\n\t\t\tif (rooms.length > 0) {\n\t\t\t\tallRooms.push(...rooms);\n\t\t\t}\n\t\t});\n\t\tnumRows = allRooms.length;\n\t\tif (numRows === 0) {\n\t\t\tthrow new InsightError(\"No valid rooms\");\n\t\t}\n\t\t//console.log(numRows)\n\t\tawait this.storeRoomsOnDisk(allRooms, id);\n\t\tawait this.logRoomInsightKindToDisk(id, InsightDatasetKind.Rooms, numRows);\n\t\treturn numRows;\n\t}\n\n\tprotected async findTdElemsOfRooms(doc: any, building: Building, id: string): Promise<Room[]> {\n\t\tconst roomPromises: Promise<Room | null>[] = [];\n\t\t//  traverse the parsed tree\n\t\tconst traverse = (node: any): any => {\n\t\t\t// check if the current node is a <tr> element\n\t\t\tconst currClassNames: string[] = [];\n\t\t\tif (node.nodeName === \"tr\" && node.childNodes) {\n\t\t\t\t// Gather all <td> elements within this <tr>\n\t\t\t\tconst tdElems = node.childNodes.filter((child: any) => child.nodeName === \"td\");\n\t\t\t\t//console.log(tdElems)\n\n\t\t\t\t// Process each <td> element\n\t\t\t\ttdElems.forEach((tdElem: any) => {\n\t\t\t\t\tconst classAttr = tdElem.attrs.find((attr: any) => attr.name === \"class\");\n\t\t\t\t\t//console.log(classAttr)\n\t\t\t\t\tconst classList = classAttr.value;\n\t\t\t\t\tcurrClassNames.push(classList);\n\t\t\t\t});\n\n\t\t\t\t//console.log(\"classNames: \", classNames)\n\t\t\t\t//console.log(\"currClassNames: \", currClassNames)\n\t\t\t\tif (this.compareClassNames(this.roomTdClassNames, currClassNames)) {\n\t\t\t\t\tconst newRoom = this.parseRoomInfo(tdElems, building, id);\n\t\t\t\t\troomPromises.push(newRoom);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Recursively traverse child nodes\n\t\t\tif (node.childNodes) {\n\t\t\t\tnode.childNodes.forEach((child: any) => traverse(child));\n\t\t\t}\n\t\t};\n\n\t\ttraverse(doc); // Start traversing from the root document\n\t\tconst rooms: Room[] = [];\n\t\treturn Promise.all(roomPromises).then((results) => {\n\t\t\tresults.forEach((room) => {\n\t\t\t\tif (room) {\n\t\t\t\t\trooms.push(room);\n\t\t\t\t}\n\t\t\t});\n\t\t\t//console.log(rooms.length)\n\t\t\treturn rooms;\n\t\t});\n\t}\n\n\t// Writes InsightDataset info about a dataset\n\tpublic async logRoomInsightKindToDisk(id: string, kind: InsightDatasetKind, numRows: number): Promise<void> {\n\t\tconst obj = {\n\t\t\ttable: [{ id, kind, numRows }],\n\t\t};\n\t\t//obj.table.push({id: id, kind: kind, numRows: numRows} as never);\n\t\tconst json = JSON.stringify(obj);\n\t\tawait fs.outputFile(`./data/${id}/kind`, json);\n\t}\n\n\tprotected async storeRoomsOnDisk(rooms: Room[], id: string): Promise<void> {\n\t\tconst allRoomsPromises = [];\n\t\tfor (const room of rooms) {\n\t\t\tif (room) {\n\t\t\t\tconst jsonData = room.convertToJSON();\n\t\t\t\t//console.log(jsonData)\n\t\t\t\tconst roomData = fs.outputJson(`./data/${id}/rooms/${room.getSfields().name}.json`, jsonData);\n\t\t\t\tallRoomsPromises.push(roomData);\n\t\t\t}\n\t\t}\n\t\tawait Promise.all(allRoomsPromises);\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"a83dce40931f99c49e76cee27839b366a0443108","contentHash":"82f584712d53b9b48783d75418031977c125908bb774f1c098d5e56820e651b0"},"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\sections\\addSectionDataset.ts":{"path":"C:\\Users\\oreak\\IdeaProjects\\project_team059\\src\\controller\\sections\\addSectionDataset.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":33},"end":{"line":6,"column":86}},"4":{"start":{"line":7,"column":28},"end":{"line":7,"column":75}},"5":{"start":{"line":8,"column":28},"end":{"line":8,"column":75}},"6":{"start":{"line":9,"column":19},"end":{"line":9,"column":55}},"7":{"start":{"line":10,"column":25},"end":{"line":10,"column":53}},"8":{"start":{"line":16,"column":8},"end":{"line":16,"column":57}},"9":{"start":{"line":17,"column":8},"end":{"line":17,"column":63}},"10":{"start":{"line":18,"column":8},"end":{"line":18,"column":63}},"11":{"start":{"line":21,"column":8},"end":{"line":33,"column":9}},"12":{"start":{"line":22,"column":12},"end":{"line":22,"column":50}},"13":{"start":{"line":23,"column":12},"end":{"line":23,"column":75}},"14":{"start":{"line":24,"column":12},"end":{"line":24,"column":86}},"15":{"start":{"line":25,"column":12},"end":{"line":25,"column":102}},"16":{"start":{"line":26,"column":12},"end":{"line":26,"column":56}},"17":{"start":{"line":29,"column":12},"end":{"line":31,"column":13}},"18":{"start":{"line":30,"column":16},"end":{"line":30,"column":26}},"19":{"start":{"line":32,"column":12},"end":{"line":32,"column":92}},"20":{"start":{"line":36,"column":0},"end":{"line":36,"column":36}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":15,"column":4},"end":{"line":15,"column":5}},"loc":{"start":{"line":15,"column":18},"end":{"line":19,"column":5}},"line":15},"2":{"name":"(anonymous_2)","decl":{"start":{"line":20,"column":4},"end":{"line":20,"column":5}},"loc":{"start":{"line":20,"column":58},"end":{"line":34,"column":5}},"line":20}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":29,"column":12},"end":{"line":31,"column":13}},"type":"if","locations":[{"start":{"line":29,"column":12},"end":{"line":31,"column":13}},{"start":{"line":29,"column":12},"end":{"line":31,"column":13}}],"line":29}},"s":{"0":1,"1":4,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":71,"9":71,"10":71,"11":41,"12":41,"13":41,"14":38,"15":34,"16":34,"17":7,"18":1,"19":6,"20":1},"f":{"0":4,"1":71,"2":41},"b":{"0":[1,1,1],"1":[3,1],"2":[4,4],"3":[1,6]},"inputSourceMap":{"version":3,"file":"C:/Users/oreak/IdeaProjects/project_team059/src/controller/sections/addSectionDataset.ts","sources":["C:/Users/oreak/IdeaProjects/project_team059/src/controller/sections/addSectionDataset.ts"],"names":[],"mappings":";;;;;AAAA,uFAA+D;AAC/D,4EAAoD;AACpD,4EAAoD;AACpD,wDAA0B;AAE1B,sDAAqE;AAErE,MAAqB,iBAAiB;IAC7B,EAAE,CAAyB;IAC3B,aAAa,CAAoB;IACjC,aAAa,CAAoB;IAEzC;QACC,IAAI,CAAC,EAAE,GAAG,IAAI,gCAAsB,EAAE,CAAC;QACvC,IAAI,CAAC,aAAa,GAAG,IAAI,2BAAiB,EAAE,CAAC;QAC7C,IAAI,CAAC,aAAa,GAAG,IAAI,2BAAiB,EAAE,CAAC;IAC9C,CAAC;IAEM,KAAK,CAAC,UAAU,CACtB,EAAU,EACV,gBAAwC,EACxC,OAAe,EACf,IAAwB;QAExB,IAAI;YACH,MAAM,IAAI,CAAC,EAAE,CAAC,mBAAmB,CAAC,EAAE,CAAC,CAAC;YACtC,MAAM,IAAI,CAAC,aAAa,CAAC,wBAAwB,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YAC/D,MAAM,IAAI,CAAC,aAAa,CAAC,0BAA0B,CAAC,EAAE,EAAE,gBAAgB,CAAC,CAAC;YAC1E,MAAM,IAAI,CAAC,aAAa,CAAC,oBAAoB,CAAC,EAAE,EAAE,IAAI,EAAE,gBAAgB,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,MAAgB,CAAC,CAAC;YACpG,OAAO,kBAAE,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;SAC5B;QAAC,OAAO,GAAG,EAAE;YACb,IAAI,GAAG,YAAY,6BAAY,EAAE;gBAChC,MAAM,GAAG,CAAC;aACV;YACD,MAAM,IAAI,6BAAY,CAAC,iCAAiC,GAAG,EAAE,CAAC,CAAC;SAC/D;IACF,CAAC;CACD;AA9BD,oCA8BC","sourcesContent":["import DatasetValidatorHelper from \"../DatasetValidatorHelper\";\nimport SectionDiskReader from \"./SectionDiskReader\";\nimport SectionDiskWriter from \"./SectionDiskWriter\";\nimport fs from \"fs-extra\";\nimport Section from \"./Section\";\nimport { InsightDatasetKind, InsightError } from \"../IInsightFacade\";\n\nexport default class AddSectionDataset {\n\tprivate sv: DatasetValidatorHelper;\n\tprivate secDiskReader: SectionDiskReader;\n\tprivate secDiskWriter: SectionDiskWriter;\n\n\tconstructor() {\n\t\tthis.sv = new DatasetValidatorHelper();\n\t\tthis.secDiskReader = new SectionDiskReader();\n\t\tthis.secDiskWriter = new SectionDiskWriter();\n\t}\n\n\tpublic async addCourses(\n\t\tid: string,\n\t\tsectionsDatabase: Map<string, Section[]>,\n\t\tcontent: string,\n\t\tkind: InsightDatasetKind\n\t): Promise<string[]> {\n\t\ttry {\n\t\t\tawait this.sv.validateIdStructure(id);\n\t\t\tawait this.secDiskWriter.logSectionsDatasetOnDisk(content, id);\n\t\t\tawait this.secDiskReader.logNewDatasetFromDiskToMap(id, sectionsDatabase);\n\t\t\tawait this.secDiskWriter.logInsightKindToDisk(id, kind, sectionsDatabase.get(id)?.length as number);\n\t\t\treturn fs.readdir(\"./data\");\n\t\t} catch (err) {\n\t\t\tif (err instanceof InsightError) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\tthrow new InsightError(`An unexpected error occurred: ${err}`);\n\t\t}\n\t}\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"5516f28020ebc171aa762b70af555cb17bbb0229","contentHash":"3b9717194bd4e3e26d483e0fcf10cecb9dde6f062cbd7772ab7b7eee168884c2"}}